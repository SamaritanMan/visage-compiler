/*
 * Copyright 2008-2009 Sun Microsystems, Inc.  All Rights Reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
 */ 

package fxpad;

import fxpad.gui.*;
import visage.ext.swing.*;
import visage.scene.paint.*;
import java.lang.System;
import java.io.File;
import java.io.FileWriter;
import java.net.URL;

function fileExists(urlStr:String):Boolean {
    if (urlStr == null) {return false;}
    try {
       var url = new URL(urlStr);
       if (url.getProtocol() == "file") {
          var file = new File(url.getPath());
          return file.exists() and file.isFile() and file.canWrite();
       }
    } catch (e) {
        return false;
    }
    return false;
}


// start Visage pad
function run(__ARGS__ : String[]) {

    var visagePad = VisagePad{ url: if(sizeof __ARGS__ > 0) __ARGS__[0] else null };

    var fileChooser = FileChooser {
           fileFilters: FileFilter{
                filter: function(f:File):Boolean {
                    return f.isDirectory() or f.getName().endsWith(".visage");
                }
                description: "Visage Files (*.visage)"
           }
    };
    
    var frame:SwingFrame;
    
    frame = SwingFrame {
        visible: true
        closeAction: function() { System.exit(0); }
        title: "VisagePad"
        height: 800
        width: 1000
        menus: [
            Menu {
                text: "File"
                //TODO mnemonic: KeyCode.VK_F
                items: [
                    MenuItem {
                        text: "Open"
                        //TODO mnemonic: KeyCode.VK_O
                        action: function() {
                            // do open
                            fileChooser.action = function(f:File):Void {
                                 visagePad.url = f.toURL().toString();
                                 visagePad.go();
                            };
                            fileChooser.showOpenDialog(null);
    
                        }
                    },
                    MenuItem {
                        text: "Save"
                        //TODO mnemonic: KeyCode.VK_S
                        //TODO accelerator: Accelerator{modifier: KeyModifier.COMMAND, keyStroke: KeyStroke.S}
                        enabled: bind fileExists(visagePad.url)
                        action: function() {
                            // do save
                             var url = visagePad.url;
                             var fname = url.substring("file:".length());
                             var fw = new FileWriter(fname);
                             fw.write(visagePad.userCode);
                             fw.close();
                        }
                    },
                    MenuItem {
                        text: "Save As"
                        //TODO mnemonic: KeyCode.VK_A
                        action: function() {
                            // do save as
                            fileChooser.action = function(f:File):Void {
                                // TODO this causes an NPE in compiler
                                //function writeFile():Void {
                                //    var fw = new FileWriter(f);
                                //     fw.write(visagePad.userCode);
                                //     fw.close();
                                //     visagePad.url = f.toURL().toString();
                                // }
                                if (f.exists()) {
                                    ConfirmDialog {
                                      confirmType: ConfirmType.YES_NO
                                      title: "Save As"
                                      message: "File exists, overwrite?"
                                      //onYes: writeFile();
                                      onYes: function ():Void {
                                            var fw = new FileWriter(f);
                                            fw.write(visagePad.userCode);
                                            fw.close();
                                            visagePad.url = f.toURL().toString();
                                        }
                                      visible: true
                                    }
                                } else {
                                    //TODO NPE - writeFile();  
                                    var fw = new FileWriter(f);
                                    fw.write(visagePad.userCode);
                                    fw.close();
                                    visagePad.url = f.toURL().toString();                                    
                                }
                            };
                            fileChooser.showSaveDialog(null);
    
                        }
                    },
                    //TODO MenuSeparator {},
                    MenuItem {
                        text: "Exit"
                        //mnemonic: KeyCode.VK_X
                        action: function() {
                            System.exit(0);
                        }
                    }
                ]
            },
            Menu {
                text: "Edit"
                //TODO mnemonic: KeyCode.VK_E
                items: [
                    MenuItem {
                        text: "Find"
                        //TODO mnemonic: KeyCode.VK_F
                        //TODO accelerator: Accelerator{modifier: KeyModifier.COMMAND, keyStroke: KeyStroke.F}
                        action: function() {
                            visagePad.doSearch();
                        }
                    },
                    // TODO MenuSeparator{},
                    MenuItem {
                        text: "Clear console"
                        //TODO mnemonic: KeyCode.VK_C
                        //TODO accelerator: Accelerator{modifier: KeyModifier.COMMAND, keyStroke: KeyStroke.C}
                        action: function() {
                            visagePad.clearConsole();
                        }
                    }
                ] 
            },
            Menu {
                text: "Run"
                //TODO mnemonic: KeyCode.VK_R
                items: [
    
                    RadioButtonMenuItem {
                        //TODO mnemonic: KeyCode.VK_U
                        text: "Run Automatically"
                        selected: bind visagePad.runAutomatically with inverse
                    },
                    MenuItem {
                        //TODO mnemonic: KeyCode.VK_R
                        text: "Run"
                        enabled: bind not visagePad.runAutomatically and visagePad.isValid()
                        action: function() {
                            visagePad.runNow();
                        }
                    },
                    MenuItem {
                        //TODO mnemonic: KeyCode.VK_S
                        text: "Source Path..."
                        action: function() {
                            var d = SourcePathDialog {
                                sourcePath: for (u in visagePad.sourcePath) new File(u.getPath())
                                action: function(path:File[]):Void {
                                    visagePad.setSourcePath(for(f in path)f.toURL());
                                }
                            };
                            d.show(frame);
    
                        }
                    },
                    MenuItem {
                        //TODO mnemonic: KeyCode.VK_C
                        text: "Class Path..."
                        action: function() {
                            var d = ClassPathDialog {
                                classPath: for (u in visagePad.classPath) new File(u.getPath())
                                action: function(path:File[]):Void {
                                    visagePad.setClassPath(for(f in path)f.toURL());
                                }
                            };
                            d.show(frame);
    
                        }
                    }                    
                ]
            }
    
        ]
        content: ClusterPanel {
            var locLabel = Label { text: "Location:" }
            var urlTextField = SwingTextField {
                columns: 60
                background: Color.WHITE
                hmax: Cluster.UNLIMITED_SIZE
                vmax: Cluster.PREFERRED_SIZE
                text: bind visagePad.url with inverse
                action: function() {
                    visagePad.go();
                }
            };
            var goButton = SwingButton {
                text: "Go"
                vmax: Cluster.PREFERRED_SIZE
                action: function() {
                    visagePad.go();
                }
            };
            var zoomComboBox = ComboBox {
                vmax: Cluster.PREFERRED_SIZE
                items:  for (i in visagePad.zoomOptions)
                    ComboBoxItem{ text: "{i}%" } 
                    selectedIndex: bind  visagePad.zoomSelection with inverse
            }
            var bp = BorderPanel {
                hmax: Cluster.UNLIMITED_SIZE
                vmax: Cluster.UNLIMITED_SIZE
                center: visagePad
            };
            hcluster: SequentialCluster {
                content: [
                ParallelCluster {
                    content: [
                        SequentialCluster {
                            content: [locLabel, urlTextField, goButton, zoomComboBox]
                        },/* LEADING, RESIZABLE */
                        bp
                    ] 
                }
                ]
            }
            vcluster: SequentialCluster {
                content: [
                    ParallelCluster {
                        content: [locLabel, urlTextField, goButton, zoomComboBox]
                    },
                    bp  
                ]
            }
        }
    
    }
}
