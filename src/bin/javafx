#!/bin/sh
#
# JavaFX Script execution script for Linux/Solaris/OS X.
#
# Uses the same arguments as the JDK's java command.
#

# resolve symlinks
PRG=$0
while [ -h "$PRG" ]; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '^.*-> \(.*\)$' 2>/dev/null`
    if expr "$link" : '^/' 2> /dev/null >/dev/null; then
	PRG="$link"
    else
	PRG="`dirname "$PRG"`/$link"
    fi
done
PATHSEP=":"
# detect Darwin and Cygwin environments
darwin=false;
cygwin=false;
linux=false;
solaris=false;
case "`uname`" in
  Darwin*) darwin=true;
           if [ -z "$JAVA_HOME" ] ; then
              JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Home
           fi
           ;;
  CYGWIN*) cygwin=true ; PATHSEP=";";;
  Linux*)  linux=true;;
  SunOS*)  solaris=true;;
esac

if [ -n "$JAVA_HOME"  ] ; then
    JAVA_CMD="$JAVA_HOME/bin/java"
else
  JAVA_CMD=`which java 2> /dev/null `
  if [ -z "$JAVA_CMD" ] ; then
      JAVA_CMD=java
  fi
fi

if [ ! -x "$JAVA_CMD" ] ; then
  echo 'Error: JAVA_HOME is not defined, cannot find "java" command.'
  exit 1
fi

if [ -z "$CLASSPATH" ] ; then
  USER_CP="."
else
  USER_CP="$CLASSPATH"
  if $cygwin ; then
    USER_CP=`cygpath --path --unix "$USER_CP"`
  fi
fi 

classpath="$USER_CP"
args=""
jargs=""
profile="desktop"
USER_LIBPATH=""

parse_args() {
while [ $# -gt 0 ] ; do
    case "$1" in
        -J*) jopt=`expr "X-$1" : 'X--J\(.*\)'`; jargs="$jargs \"$jopt\"";;
        -jar) shift; args="$args \"$1\""; classpath="$1"; seen_main=true ;;
        -cp | -classpath) shift; classpath="$classpath:$1";;
        -version)
            if [ ! -n "$seen_main" ]; then
               lastarg="com.sun.javafx.runtime.LauncherHelper -version"
               break
            else
               args="$args \"$1\""
            fi
            ;;
        -fullversion)
            if [ ! -n "$seen_main" ]; then
               lastarg="com.sun.javafx.runtime.LauncherHelper -fullversion"
               break
            else
               args="$args \"$1\""
            fi
            ;;
        -X)
            if [ ! -n "$seen_main" ]; then
               lastarg="com.sun.javafx.runtime.LauncherHelper -helpx"
               break
            else
               args="$args \"$1\""
            fi
            ;;
        -help | -\? )
            if [ ! -n "$seen_main" ]; then
               lastarg="com.sun.javafx.runtime.LauncherHelper -help"
               break
            else
               args="$args \"$1\""
            fi
            ;;
        -profile) shift; profile="$1";;
        -Djava.library.path*) USER_LIBPATH=`echo $1 | cut -d= -f2`;;
        -*) if [ ! -n "$seen_main" ]; then
               jargs="$jargs \"$1\""
            else 
               args="$args \"$1\"" 
            fi ;;
        *) seen_main=true ; args="$args \"$1\"";;
    esac
    shift
done
} 

parse_args "$@" # process arguments on the command line

javafx_home=`dirname "$PRG"`/..

if [ -f "${javafx_home}/profiles/${profile}.properties" ]; then
    eval `cat "${javafx_home}/profiles/${profile}.properties" | tr ";" ":" | grep -v "^#" | sed 's/^\(.*\)$/\1;/'`
else
    echo "The profile '${profile}' is not supported. Use one of these:"
    ls ${javafx_home}/profiles | sed "s/\.properties//"
    exit 1
fi

classpath="$classpath:$execute_classpath"

# Under Cygwin, convert certain environment variables back to Windows format
if $cygwin ; then
  classpath=`cygpath --path --windows "$classpath"`
  execute_classpath=`cygpath --path --windows "$execute_classpath"`
  JAVA_CMD=`cygpath --unix "$JAVA_CMD"`
fi

if [ -n "${execute_bootclasspath}" ]; then
    if $cygwin ; then
        execute_bootclasspath=`cygpath --path --windows "$execute_bootclasspath"`
    fi
    jargs="$jargs \"-Xbootclasspath:${execute_bootclasspath}\""
fi
if [ -n "${execute_bootclasspath_prepend}" ]; then
    if $cygwin ; then
        execute_bootclasspath_prepend=`cygpath --path --windows "$execute_bootclasspath_prepend"`
    fi
    jargs="$jargs \"-Xbootclasspath/p:${execute_bootclasspath_prepend}\""
fi
if [ -n "${execute_bootclasspath_append}" ]; then
    if $cygwin ; then
        execute_bootclasspath_append=`cygpath --path --windows "$execute_bootclasspath_append"`
    fi
    jargs="$jargs \"-Xbootclasspath/a:${execute_bootclasspath_append}\""
fi
if [ -n "${execute_nativelibpath}" ]; then
    if $cygwin ; then
        execute_nativelibpath=`cygpath --path --windows "$execute_nativelibpath"`
    fi
    if [ -n "$USER_LIBPATH" ]; then
        jargs="$jargs \"-Djava.library.path=${USER_LIBPATH}${PATHSEP}${execute_nativelibpath}\""
    else
        jargs="$jargs \"-Djava.library.path=${execute_nativelibpath}\""
    fi
elif [ -n "$USER_LIBPATH" ]; then
    jargs="$jargs \"-Djava.library.path=${USER_LIBPATH}\""
fi
if [ -n "${execute_bootnativelibpath}" ]; then
    if $cygwin ; then
        execute_bootnativelibpath=`cygpath --path --windows "$execute_nativelibpath"`
    fi
    jargs="$jargs \"-Dsun.boot.library.path=${execute_bootnativelibpath}\""
fi
if [ -n "${execute_vmargs_macos}" -a "$darwin" = "true" ]; then
    jargs="$jargs ${execute_vmargs_macos}"
fi
if [ -n "${execute_vmargs_windows}" -a "$cygwin" = "true" ]; then
    jargs="$jargs ${execute_vmargs_windows}"
fi
if [ -n "${execute_vmargs_linux}" -a "$linux" = "true" ]; then
    jargs="$jargs ${execute_vmargs_linux}"
fi
if [ -n "${execute_vmargs_solaris}" -a "$solaris" = "true" ]; then
    jargs="$jargs ${execute_vmargs_solaris}"
fi
if [ -n "${execute_vmargs_common}" ]; then
    jargs="$jargs ${execute_vmargs_common}"
fi
if [ -n "$lastarg" ]; then
    jargs="$jargs -classpath '"$classpath"' $lastarg"
else
    jargs="$jargs -classpath '"$classpath"' com.sun.javafx.runtime.Main"
    if [ -n "$args" ]; then
       jargs="$jargs $args"
    fi
fi

eval '"$JAVA_CMD"' "$jargs"
