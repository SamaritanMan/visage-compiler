#!/bin/sh
#
# JavaFX Script execution script for Linux/Solaris/OS X.
#
# Uses the same arguments as the JDK's java command.
#

# resolve symlinks
PRG=$0
while [ -h "$PRG" ]; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '^.*-> \(.*\)$' 2>/dev/null`
    if expr "$link" : '^/' 2> /dev/null >/dev/null; then
	PRG="$link"
    else
	PRG="`dirname "$PRG"`/$link"
    fi
done

JFX_HOME=`dirname "$PRG"`/../lib

# detect Darwin and Cygwin environments
darwin=false;
cygwin=false;
case "`uname`" in
  Darwin*) darwin=true;
           if [ -z "$JAVA_HOME" ] ; then
              JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Home
           fi
           ;;
  CYGWIN*) cygwin=true;
esac

if [ -n "$JAVA_HOME"  ] ; then
    JAVA_CMD="$JAVA_HOME/bin/java"
else
  JAVA_CMD=`which java 2> /dev/null `
  if [ -z "$JAVA_CMD" ] ; then
      JAVA_CMD=java
  fi
fi

if [ ! -x "$JAVA_CMD" ] ; then
  echo 'Error: JAVA_HOME is not defined, cannot find "java" command.'
  exit 1
fi

if [ -z "$CLASSPATH" ] ; then
  USER_CP="."
else
  USER_CP="$CLASSPATH"
fi 

# Jars with classes already defined in the JDK's tools.jar file need to be put
# on the bootclasspath, along with any classes they reference, due to those
# classes being on the bootclasspath with Mac OS X Java distributions.
classpath="$JFX_HOME/javafxrt.jar:$JFX_HOME/javafxgui.jar:$JFX_HOME/javafx-swing.jar:$JFX_HOME/@SCENEGRAPH_JAR@:$JFX_HOME/Decora-HW.jar:$JFX_HOME/Decora-D3D.jar:$JFX_HOME/jmc.jar:$USER_CP"
nativelibpath="$JFX_HOME"

args=""
jargs=""
parse_args() {
while [ $# -gt 0 ] ; do
    case "$1" in
        -J*) jopt=`expr "X-$1" : 'X--J\(.*\)'`; jargs="$jargs $jopt";;
        -cp | -classpath) shift; classpath="$classpath:$1";;
        *) args="$args $1";;
    esac
    shift
done
} 

parse_args "$@" # process arguments on the command line

# Under Cygwin, convert certain environment variables back to Windows format
if $cygwin ; then
  classpath=`cygpath --path --windows "$classpath"`
  nativelibpath=`cygpath --path --windows "$nativelibpath"`
  JAVA_CMD=`cygpath --unix "$JAVA_CMD"`
fi

"$JAVA_CMD" -Djava.library.path="$nativelibpath" $jargs -classpath "$classpath" $args
