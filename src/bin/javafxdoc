#!/bin/sh
#
# JavaFX Script doc generation script for Linux/Solaris/OS X.
#
# Uses the same core arguments as the JDK's javadoc command, but uses 
# the XMLDoclet and an XSLT translator to generate documentation.  Run
# javafxdoc without arguments to see the XMLDoclet options.
#

# resolve symlinks
PRG=$0
while [ -h "$PRG" ]; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '^.*-> \(.*\)$' 2>/dev/null`
    if expr "$link" : '^/' 2> /dev/null >/dev/null; then
    PRG="$link"
    else
    PRG="`dirname "$PRG"`/$link"
    fi
done

# detect Darwin and Cygwin environments
darwin=false;
cygwin=false;
separator=":"
case "`uname`" in
  Darwin*) darwin=true;
           if [ -z "$JAVA_HOME" ] ; then
              JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Home
           fi
           ;;
  CYGWIN*) cygwin=true;
           separator=";"
           ;;
esac

if [ -n "$JAVA_HOME"  ] ; then
    JAVA_CMD="$JAVA_HOME/bin/java"
else
  JAVA_CMD=`which java 2> /dev/null `
  if [ -z "$JAVA_CMD" ] ; then
      JAVA_CMD=java
  fi
fi

if [ ! -x "$JAVA_CMD" ] ; then
  echo 'Error: JAVA_HOME is not defined, cannot find "java" command.'
  exit 1
fi

if [ -z "$CLASSPATH" ] ; then
  USER_CP="."
else
  USER_CP="$CLASSPATH"
fi 

classpath="$USER_CP"
args=""
jargs=""
profile="desktop"

parse_args() {
while [ $# -gt 0 ] ; do
    case "$1" in
        -J*) jopt=`expr "X-$1" : 'X--J\(.*\)'`; jargs="$jargs \"$jopt\"";;
        -cp | -classpath) shift; classpath="$classpath$separator$1";;
    -profile) shift; profile="$1";;
        *) args="$args \"$1\"";;
    esac
    shift
done
} 

if [ $# -eq 0 ] ; then
    args="-help"
fi

parse_args "$@" # process arguments on the command line

javafx_home=`dirname "$PRG"`/..

if [ -f "${javafx_home}/profiles/${profile}.properties" ]; then
    eval `cat "${javafx_home}/profiles/${profile}.properties" | tr ";" "$separator" | grep -v "^#" | sed 's/^\(.*\)$/\1;/'`
else
    echo "The profile '${profile}' is not supported. Use one of these:"
    ls ${javafx_home}/profiles | sed "s/\.properties//"
    exit 1
fi

# Under Cygwin, convert certain environment variables back to Windows format
if $cygwin ; then
  classpath=`cygpath --path --windows "$classpath"`
  javadoc_classpath=`cygpath --path --windows "$javadoc_classpath"`
  JAVA_CMD=`cygpath --unix "$JAVA_CMD"`
fi

if [ -n "${javadoc_bootclasspath}" ]; then
    if $cygwin ; then
        javadoc_bootclasspath=`cygpath --path --windows "$javadoc_bootclasspath"`
    fi
    jargs="$jargs \"-Xbootclasspath:${javadoc_bootclasspath}\""
fi
if [ -n "${javadoc_bootclasspath_prepend}" ]; then
    if $cygwin ; then
        javadoc_bootclasspath_prepend=`cygpath --path --windows "$javadoc_bootclasspath_prepend"`
    fi
    jargs="$jargs \"-Xbootclasspath/p:${javadoc_bootclasspath_prepend}\""
fi
if [ -n "${javadoc_bootclasspath_append}" ]; then
    if $cygwin ; then
        javadoc_bootclasspath_append=`cygpath --path --windows "$javadoc_bootclasspath_append"`
    fi
    jargs="$jargs \"-Xbootclasspath/a:${javadoc_bootclasspath_append}\""
fi
if [ -n "${javadoc_nativelibpath}" ]; then
    if $cygwin ; then
        javadoc_nativelibpath=`cygpath --path --windows "$javadoc_nativelibpath"`
    fi
    jargs="$jargs \"-Djava.library.path=${javadoc_nativelibpath}\""
fi
jargs="$jargs com.sun.tools.javafxdoc.Main -classpath '"$classpath:$javadoc_classpath"'"
if [ -n "$args" ]; then
    jargs="$jargs $args"
fi

eval '"$JAVA_CMD"' "$jargs"
