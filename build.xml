<?xml version="1.0" encoding="UTF-8"?>
<project name="JavaFX Compiler" default="default" basedir=".">
    <description>Builds, tests, and runs the openjfx-compiler project.</description>

    <property name="tools.dir" value="${basedir}/tools"/>
    <property name="javafxdoc.dir" value="${basedir}/javafxdoc"/>
    <property name="launcher.dir" value="${basedir}/launcher"/>
    <property environment="env" />
    <import file="tools-defs.xml"/>
    <property name="antlr.grammarv3" value="v3" />
    <property name="antlr.grammarv4p" value="v4Parser" />
    <property name="antlr.grammarv4l" value="v4Lexer" />
    <property name="antlr.grammarv3w" value="v3Walker" />

    <target name="default" depends="jar,javafxdoc,launcher"
            description="Build javafxc compiler and compiler runtime distribution"/>

    <target name="all" depends="jar, javafxdoc, launcher, source-zip, test, spec, docs, pack-jars"
            description="Build and test all project artifacts"/>
            
    <target name="dist" description="Build distribution bundles" depends="dist-init,dist-zip,dist-tgz"/>
    
    <target name="dist-zip" description="Build distribution zip file" depends="all">
        <zip basedir="dist" compress="true" destfile="${zip.bundle}" includes="${dist.includes}"/>
    </target>
    
    <target name="dist-tgz" description="Build distribution gzipped tar file" depends="all">
        <tar basedir="dist" longfile="fail" compression="gzip" destfile="${tgz.bundle}" includes="${dist.includes}"/>
    </target>

    <target name="dist-init" depends="init">
        <mkdir dir="${bundle.dir}"/>
    </target>
    
    <target name="hudson-all" depends="coverage, all, findbugs, coverage-report, hudson-post-build"
            description="Build and test all project artifacts"/>

    <target name="all-with-coverage" depends="coverage, all, findbugs, coverage-report"
            description="Build and test all project artifacts with coverage"/>

    <target name="compiler-only" depends="jar"
            description="Build just the javafxc compiler (no bin scripts, javafxdoc, etc)"/>

    <available property="ant.jar" value="${ant.home}/lib/ant.jar" file="${ant.home}/lib/ant.jar"/>
    <!-- if the previous location is not correct than find the ant.jar from the java.class.path value -->
    <pathconvert property="ant.jar">
        <mapper type="regexp" from="${path.separator}([^${path.separator}]*ant.jar)${path.separator}" to="\1"/>
        <path location="${path.separator}${java.class.path}${path.separator}"/>
    </pathconvert>

    <target name="check-ant">
        <fail message="Ant version 1.7.0 or later is required to build JavaFX.">
            <condition>
                <not>
                    <antversion atleast="1.7.0"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="check-jdk-1.5">
        <available property="has-jdk-1.5" classname="java.lang.Appendable"/>
    </target>

    <target name="check-bootstrap">
        <condition property="has-bootstrap-dirs">
            <and>
                <available file="${ant.dir}"/>
                <available file="${junit.dir}"/>
                <available file="${docbook.dir}"/>
                <available file="${antlr.dir}"/>
                <available file="${antlrworks.dir}/antlrworks-${antlrworks.ver}.jar"/>
                <available file="${antlr.dir}/antlr-2.7.7.jar"/>
            </and>
        </condition>
    </target>

    <target name="tool-paths">
        <!-- Define actual properties for the known paths so they can be used in the properties file -->
        <property name="ant.class.path" refid="ant.class.path"/>
        <property name="scenegraph.class.path" refid="scenegraph.class.path"/>
        <property name="junit.class.path" refid="junit.class.path"/>
        <property name="findbugs.class.path" refid="findbugs.class.path"/>
        <property name="saxon.class.path" refid="saxon.class.path"/>
        <property name="xincluder.class.path" refid="xincluder.class.path"/>
        <property name="antlr.class.path" refid="antlr.class.path"/>
        <property name="antlr-runtime.class.path" refid="antlr-runtime.class.path"/>
        <property name="antlrworks.class.path" refid="antlrworks.class.path"/>
        <property name="cobertura.class.path" refid="cobertura.class.path"/>
    </target>

    <target name="do-bootstrap" depends="check-bootstrap" unless="has-bootstrap-dirs">
        <ant antfile="bootstrap.xml" target="all"/>
    </target>
    
    <target name="update-scenegraph" depends="do-bootstrap" unless="has-scenegraph-dir">
        <ant antfile="bootstrap.xml" target="scenegraph"/>
    </target>

    <target name="single-fx-test-check" if="test.fx.includes">
        <property name="test.class" value="framework.FXCompilerTest"/>
        <property name="test.includes" value="**/FXCompilerTest.java"/>
        <property name="javac.includes" value="**/FXCompilerTest.java"/>
        <property name="test-sys-prop.test.fx.includes" value="${test.fx.includes}"/>
    </target>

    <target name="-pre-init" depends="check-ant,check-jdk-1.5,do-bootstrap,update-scenegraph,tool-paths,single-fx-test-check">
        <fail unless="has-jdk-1.5">You need JDK 1.5 or higher to build JavaFX.</fail>
        <echo message="JDK version ${java.version}"/>
        <echo message="Ant version ${ant.version}"/>
    </target>

    <target name="-post-init">
        <property name="antlr.grammarv4l.file" value="${antlr.src.dir}/${antlr.grammarv4l}.g" />
        <property name="antlr.grammarv4p.file" value="${antlr.src.dir}/${antlr.grammarv4p}.g" />
        <property name="antlr.grammarv3.file" value="${antlr.src.dir}/${antlr.grammarv3}.g" />
        <property name="antlr.grammarv3w.file" value="${antlr.src.dir}/${antlr.grammarv3w}.g" />
    </target>

    <!-- jar file creation: external runtime jar contents are included to reduce classpath issues -->
    <target depends="init,compile,-pre-jar" if="manifest.available+main.class+mkdist.available" name="-do-jar-with-libraries">
        <jar compress="${jar.compress}" destfile="${dist.jar}" manifest="${manifest.file}">
            <fileset dir="${build.classes.dir}"/>
            <zipfileset src="${file.reference.javac.jar}" excludes="META-INF/**/,javax/annotation/**/,com/sun/tools/javac/processing"/>
            <zipfileset src="${antlr-runtime.class.path}" excludes="META-INF/**/,org/antlr/runtime/debug/**/,org/antlr/runtime/misc/**/"/>
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
            </manifest>
        </jar>
        <jar compress="${jar.compress}" destfile="${dist.javafxrt.jar}" >
            <fileset dir="${build.classes.dir}" >
                <include name="**/*.class" />
                <exclude name="com/sun/tools/javafx/**"/>
                <exclude name="com/sun/javafx/api/**"/>
            </fileset>
        </jar>
    </target>

    <target depends="-pre-compile" name="generate-lexerv4" unless="lexerv4.uptodate" >
        <java classname="org.antlr.Tool" classpathref="antlr.class.path" fork="true">
            <arg value="-o" />
            <arg value="${antlr.generated.dir}" />
            <arg value="${antlr.grammarv4l.file}" />
            <jvmarg value="-Xmx256m"/>
        </java>
        <java classname="org.antlr.Tool" classpathref="antlr.class.path" fork="true">
            <arg value="-o" />
            <arg value="${antlr.generated.dir}" />
            <arg value="${antlr.grammarv4p.file}" />
            <jvmarg value="-Xmx256m"/>
        </java>
    	<property name="parserv4.uptodate" value="v3Walker" />
    </target>

    <target depends="-pre-compile, generate-lexerv4" name="generate-parserv4" unless="parserv4.uptodate">
        <java classname="org.antlr.Tool" classpathref="antlr.class.path" fork="true">
            <arg value="-o" />
            <arg value="${antlr.generated.dir}" />
            <arg value="${antlr.grammarv4p.file}" />
            <jvmarg value="-Xmx256m"/>
        </java>
    </target>

    <target depends="-pre-compile" name="generate-parserv3" unless="parserv3.uptodate" >
        <java classname="org.antlr.Tool" classpathref="antlr.class.path" fork="true">
            <arg value="-o" />
            <arg value="${antlr.generated.dir}" />
            <arg value="${antlr.grammarv3.file}" />
            <jvmarg value="-Xmx256m"/>
        </java>
    </target>

    <target depends="-pre-compile" name="generate-parserv3w" unless="parserv3w.uptodate" >
        <java classname="org.antlr.Tool" classpathref="antlr.class.path" fork="true">
            <arg value="-o" />
            <arg value="${antlr.generated.dir}" />
            <arg value="${antlr.grammarv3w.file}" />
            <arg value="-lib" />
            <arg value="${antlr.generated.dir}" />
            <jvmarg value="-Xmx256m"/>
        </java>
    </target>

    <target name="syntax-diagrams" depends="init">
        <mkdir dir="${syntax.diagrams.dir}"/>
        <java classname="org.antlr.works.Console" fork="true">
            <classpath>
                <path refid="antlrworks.class.path" />
                <path refid="antlr.class.path" />
            </classpath>
            <arg value="-f" />
            <arg value="${antlr.grammarv3.file}" />
            <arg value="-sd" />
            <arg value="png" />
            <arg value="-o" />
            <arg value="${syntax.diagrams.dir}" />
            <arg value="-verbose"/>
            <jvmarg value="-Xmx256m"/>
        </java>
    </target>
    <target name="-do-compile" depends="init,generated-java,-pre-compile" if="have.sources">
        <pcompile srcdir="${src.classes.dir}/com"
                  destdir="${build.generated.dir}/com"
                  includes="${includes}"/>
        <copy todir="${build.generated.dir}">
            <fileset dir="${src.classes.dir}" includes="${includes}"/>
            <globmapper from="*.properties-template" to="*.properties"/>
            <filterset begintoken="$(" endtoken=")">
                <filter token="RELEASE" value="${release}"/>
                <filter token="FULL_VERSION" value="${full.version}"/>
            </filterset>
        </copy>
        <pcompile srcdir="${build.generated.dir}"
                  destdir="${build.generated.dir}"
                  includes="**/*.properties"/>
        <javac compiler="modern" fork="true"
               destdir="${build.classes.dir}" includes="${includes}" excludes="${excludes}"
               debug="${javac.debug}" deprecation="${javac.deprecation}"
               source="${javac.source}" target="${javac.target}" includeantruntime="false">
            <src path="${src.classes.dir}"/>
            <src path="${build.generated.dir}"/>
            <classpath>
                <path path="${javac.classpath}"/>
            </classpath>
            <compilerarg value="-J-Xbootclasspath/p:${basedir}${file.separator}lib${file.separator}javac.jar"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.classes.dir}" excludes="${build.classes.excludes}"/>
        </copy>
    </target>

    <target name="generated-java" depends="generate-parserv3,generate-parserv3w,generate-lexerv4,generate-parserv4" />
    
    <target depends="init,-def-pcompile" name="-pre-compile">
        <mkdir dir="${build.classes.dir}"/>
        <uptodate property="lexerv4.uptodate" srcfile="${antlr.grammarv4l.file}" targetfile="${antlr.generated.dir}/${antlr.grammarv4l}.java" />
        <uptodate property="parserv4.uptodate" srcfile="${antlr.grammarv4p.file}" targetfile="${antlr.generated.dir}/${antlr.grammarv4p}.java" />
        <uptodate property="parserv3.uptodate" srcfile="${antlr.grammarv3.file}" targetfile="${antlr.generated.dir}/${antlr.grammarv3}Parser.java" />
        <uptodate property="parserv3w.uptodate" srcfile="${antlr.grammarv3w.file}" targetfile="${antlr.generated.dir}/${antlr.grammarv3w}.java" />
    </target>
    
    <target name="-post-compile">
        <!-- compiles the fx files in the compiler workspace. These are the runtime
             files shipped with the compiler (not related to the JavaFX Runtime
             project). -->
        <taskdef name="javafxc" classname="com.sun.tools.javafx.ant.JavaFxAntTask">
            <classpath>
                <pathelement location="${ant.jar}"/>
                <pathelement location="${build.classes.dir}"/>
                <pathelement path="${javac.classpath}"/>
            </classpath>
        </taskdef>

        <javafxc debug="${javac.debug}" deprecation="${javac.deprecation}"
                 destdir="${build.classes.dir}"
                 excludes="${excludes}" includeantruntime="false"
                 includes="**/*.fx" source="${javac.source}" sourcepath=""
                 srcdir="${src.classes.dir}" target="${javac.target}"
                 classpath="${build.classes.dir}:${javac.test.classpath}"
                 compilerclasspath="${build.classes.dir}:${javac.classpath}">
        </javafxc>
    </target>

    <target depends="init,javafxdoc" name="-javadoc-build">
        <mkdir dir="${dist.javadoc.dir}"/>
        <path id="bootpath" path="${javac.classpath}"/>
        <property name="bootjars" refid="bootpath"/>
        <path id="clspath" path="build/classes"/>
        <property name="clsjars" refid="clspath"/>
        <path id="srcpath" path="src/share/classes"/>
        <property name="srcpathprop" refid="srcpath"/>
        <copy todir="${dist.javafxdoc.dir}">
            <fileset dir="${basedir}/javadoc-files">
                <include name="draft.*"/>
                <include name="*.css"/>
                <include name="*.js"/>
                <include name="*.png"/>
            </fileset>
        </copy>
        <javadoc additionalparam="${javadoc.additionalparam}" author="${javadoc.author}" destdir="${dist.javadoc.dir}" failonerror="true" noindex="${javadoc.noindex}" nonavbar="${javadoc.nonavbar}" notree="${javadoc.notree}" private="${javadoc.private}" source="${javac.source}" splitindex="${javadoc.splitindex}" use="${javadoc.use}" useexternalfile="true" version="${javadoc.version}" windowtitle="${javadoc.windowtitle}"
                packagenames="${javadoc.pkgs}" sourcepath="${src.classes.dir}">
            <classpath>
                <path path="${javac.classpath}"/>
            </classpath>
        </javadoc>
        <!--
        switch to alternate launching method so we can add gui jars to classpath
        <java jar="dist/lib/javafxdoc.jar" fork="true" failonerror="true">
        -->
    	<mkdir dir="${build.dir}/doc"/>
        <javadoc destdir="${dist.javadoc.dir}" failonerror="true" version="${javadoc.version}" private="${javadoc.private}" source="${javac.source}"
                 packagenames="javafx.reflect" sourcepath="${src.classes.dir}">
            <doclet name="com.sun.tools.xmldoclet.XMLDoclet"
                    path="${dist.javafxrdoc.jar}">
               <param name="-o" value="${build.dir}/doc/javadoc.xml"/>
               <param name="-nohtml"/>
            </doclet>
         </javadoc>
        <java  fork="true" failonerror="true" classname="com.sun.tools.javafxdoc.Main">
            <classpath location="dist/lib/javafxdoc.jar"/>
            <classpath refid="clspath"/>
            <arg value="-d"/>
            <arg value="${dist.javafxdoc.dir}"/>
            <arg value="-sourcepath"/>
            <arg value="${srcpathprop}"/>
            <arg value="-classpath"/>
            <arg value="${clsjars}"/>
        	<arg line="-i ${build.dir}/doc/javadoc.xml"/>
            <classpath>
                <path path="${build.classes.dir}:${javac.test.classpath}:dist/lib/javafxgui.jar"/>
            </classpath>
            <jvmarg line="-Xbootclasspath/p:${bootjars}"/>
            <jvmarg line="-Djava.awt.headless=true"/>
            <jvmarg value="-Xmx256m"/>
            <arg line="${javafxdoc.packages}"/>
        </java>
        
       <!-- this is a hack to make the index page be something other than the frameset. -->
        <copy file="${dist.javafxdoc.dir}/overview-summary.html" tofile="${dist.javafxdoc.dir}/index.html"
            overwrite="true"/>
    </target>
    
    <target name="-def-pcompile">
        <mkdir dir="${build.buildtools.dir}"/>
        <javac srcdir="${src.buildtools.dir}/CompileProperties"
               destdir="${build.buildtools.dir}/"
               classpath="${ant.home}/lib/ant.jar"/>
        <taskdef name="pcompile"
                 classname="CompilePropertiesTask" 
                 classpath="${build.buildtools.dir}/"/>
    </target>
    
    <target name="docs" depends="init,javadoc,spec,man-pages">
        <copy todir="dist/doc">
            <fileset dir="doc" includes="**/*.pdf"/>
        </copy>
        <copy file="doc/doc-index.html" tofile="dist/doc/index.html"/>
        <copy todir="dist/doc/images">
            <fileset dir="doc/images"/>
        </copy>
        <copy todir="dist/doc">
            <fileset dir="build/doc/man" includes="*.html,*.css"/>
        </copy>
    </target>

    <!-- Stuff dealing with adding coverage to JUnit execution -->

    <target name="coverage" description="Enables coverage for junit test targets">
        <property name="do.coverage" value="true"/>
    </target>

    <target name="cobertura-taskdefs">
        <taskdef classpathref="cobertura.class.path" resource="tasks.properties"/>
    </target>

    <target name="conditional-instrument" if="do.coverage" depends="cobertura-taskdefs">
        <mkdir dir="${build.instrumented.dir}"/>
        <cobertura-instrument todir="${build.instrumented.dir}">
            <fileset dir="${build.classes.dir}" includes="**/*.class"/>
            <classpath refid="cobertura.class.path"/>
        </cobertura-instrument>
    </target>

    <target name="conditional-clean-instrument" unless="do.coverage">
        <delete dir="${build.instrumented.dir}"/>
    </target>

    <target name="conditional-coverage-report" if="do.coverage" depends="cobertura-taskdefs">
        <mkdir dir="${dist.coverage.dir}"/>
        <cobertura-report srcdir="${src.classes.dir}" destdir="${dist.coverage.dir}">
            <classpath>
                <path location="${build.classes.dir}"/>
            </classpath>
        </cobertura-report>
        <cobertura-report format="xml" srcdir="${src.classes.dir}" destdir="${build.dir}"/>
    </target>

    <target depends="init,conditional-instrument,conditional-clean-instrument" if="have.tests" name="-pre-test-run">
        <mkdir dir="${build.test.results.dir}"/>
    </target>

    <target depends="init,compile-test,-pre-test-run,-do-test-run,check-test-results" if="have.tests" name="-post-test-run">
        <fail if="build.tests.failed">Some tests failed; see details above.</fail>
    </target>
    
    <target name="check-test-results">
        <!-- Ignore junit errors on Hudson, so it reports an UNSTABLE build instead of a FAILURE -->
        <condition property="build.tests.failed">
            <and>
                <isset property="tests.failed" description="JUnit task failed"/>
                <not>
                    <isset property="export.dir" description="Hudson build"/>
                </not>
            </and>
        </condition>
    </target>

    <target depends="conditional-coverage-report" name="coverage-report" />

    <!-- End stuff dealing with adding coverage to JUnit execution -->

    <target name="-post-clean" depends="javafxdoc-clean,spec-clean,launcher-clean">
        <!-- Delete ANTLR-generated files -->
        <delete dir="src/share/classes/com/sun/tools/javafx" includes="**/v3*.*" excludes="**/v3.g **/v3Walker.g"/>
        <delete dir="src/share/classes/com/sun/tools/javafx" includes="**/v4*.*" excludes="**/v4Lexer.g **/v4Parser.g"/>
        <delete dir="${syntax.diagrams.dir}" />
        <delete dir="${build.instrumented.dir}"/>
        <delete file="cobertura.ser" />
        <delete dir="bundles"/>
    </target>

    <target name="spec" depends="syntax-diagrams" description="Build JavaFX Script specification.">
        <ant antfile="doc/build.xml" target="spec" inheritAll="false"/>
        <copy todir="dist/doc/reference">
            <fileset dir="build/doc/html"/>
        </copy>
    </target>

    <target name="findbugs" depends="compile">
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
                 classpathref="findbugs.class.path" />
        <mkdir dir="${dist.findbugs.dir}"/>
        <findbugs output="xml" outputFile="${build.dir}/findbugs.xml" home="${findbugs.dir}" jvmargs="-Xmx512m"
                  projectName="OpenJFX compiler ${full.version}" excludeFilter="findbugs-exclude.xml">
            <class location="${build.classes.dir}"/>
            <auxclasspath path="${javac.classpath}:${junit.class.path}"/>
            <sourcepath path="${src.classes.dir}"/>
        </findbugs>
        <exec executable="sh">
            <arg value="${findbugs.dir}/bin/convertXmlToText"/>
            <arg value="-longBugCodes"/>
            <arg value="-html:${findbugs.dir}/src/xsl/fancy.xsl"/>
            <arg value="${build.dir}/findbugs.xml"/>
            <redirector output="${dist.findbugs.dir}/findbugs.html"/>
        </exec>
    </target>

    <target name="svnstat">
        <mkdir dir="${dist.svnstat.dir}"/>
        <java classname="de.agentlab.svnstat.SvnStat" fork="true" classpathref="svnstat.class.path">
            <env key="PATH" path="${env.PATH}:${svn.path}" />
            <arg value="-r" />
            <arg value="${svn.repository}" />
            <arg value="-d" />
            <arg value="${dist.svnstat.dir}" />
        </java>
    </target>

    <!-- Runs only if export.dir is set, which should only be set from the continuous build.
         Publishes build results to ${export.dir}.
         Depends on  environment params JOB_NAME and SVN_REVISION.
         Publishes result of findbugs analysis, where it can later be combined into
         a multi-version bug database. -->
    <target name="hudson-post-build" depends="init" if="export.dir">
        <property environment="env"/>
        <mkdir dir="${export.dir}/findbugs"/>
        <exec executable="sh">
            <arg value="${findbugs.dir}/bin/setBugDatabaseInfo"/>
            <arg value="-name"/>
            <arg value="${env.JOB_NAME}-${env.SVN_REVISION}"/>
            <arg value="${build.dir}/findbugs.xml"/>
            <redirector output="${export.dir}/findbugs/${env.JOB_NAME}-${env.SVN_REVISION}.xml"/>
        </exec>
        <delete dir="${export.dir}/docroot/current-build" />
        <copy todir="${export.dir}/docroot/current-build">
            <fileset dir="${dist.dir}"/>
        </copy>
        <copy todir="${export.dir}/docroot/current-build/doc">
            <fileset dir="doc" includes="**/*.pdf"/>
        </copy>
    </target>

    <target name="javafxdoc" depends="jar">
        <!-- javadoc.jar depends on doclets.jar but we don't have it. Create a temporary file here: -->
        <jar jarfile="lib/doclets.jar"/>
        <ant dir="${javafxdoc.dir}" antfile="build.xml" target="jar" inheritall="false"/>
        <delete file="lib/doclets.jar"/>
    </target>
    
    <target name="launcher" description="Copy command wrappers to dist/bin directory.">
        <ant dir="${launcher.dir}" antfile="build.xml" target="all" inheritall="false">
            <property name="compiler.dist.dir" location="${basedir}/dist/bin" />
        </ant>
        <copy todir="dist/bin">
            <fileset dir="src/bin"/>
            <filterset>
                <filter token="SCENEGRAPH_JAR" value="${scenegraph.jar.file}"/>
            </filterset>
        </copy>
        <chmod dir="dist/bin" perm="755" includes="**/javafx*"/>
    </target>
    
    <target name="man-pages">
        <ant antfile="doc/build.xml" target="man-pages" inheritAll="false"/>
        <copy todir="dist/man/man1">
            <fileset dir="build/doc/man/man1"/>
        </copy>
    </target>
    
    <target name="demos-clean">
        <!-- NOP to keep Hudson from breaking -->
   </target>

    <target name="javafxdoc-clean">
        <ant dir="${javafxdoc.dir}" antfile="build.xml" target="clean" inheritall="false" />
    </target>
    
    <target name="launcher-clean">
        <ant dir="${launcher.dir}" antfile="build.xml" target="clean" inheritall="false" />
    </target>

    <target name="spec-clean">
        <ant dir="doc" antfile="build.xml" target="clean" inheritall="false" />
    </target>

    <target name="real-clean">
        <!-- suppress automatic bootstrapping -->
        <property name="has-bootstrap-dirs" value="true"/>
        <property name="has-scenegraph-dir" value="true"/>
        <ant antfile="bootstrap.xml" target="prepare"/>
        <antcall target="clean"/>
        <ant antfile="bootstrap.xml" target="clean"/>
        <antcall target="javafxdoc-clean"/>
        <antcall target="spec-clean"/>
        <antcall target="launcher-clean"/>
        <mkdir dir="dist/lib"/>
        <delete dir="dist/lib"/>
    </target>
    
    <available property="mail.jar" value="${ant.home}/lib/mail.jar" file="${ant.home}/lib/mail.jar"/>
    
    <target name="weekly-build-check">
        <!-- weekly build parameters, normally set by Hudson -->
        <fail unless="weekly.build.alias"/>
        <fail unless="weekly.buildmaster"/>
        <!-- JavaMail jar, needed for build notification -->
        <fail unless="mail.jar"/>
    </target>
    
    <target name="weekly-build" description="Weekly build target" depends="weekly-build-check">
        <tstamp>
            <format property="date.stamp" pattern="yyyy-MM-dd"/>
        </tstamp>
        <antcall target="-bundles-build">
            <param name="release" value="weekly-${date.stamp}"/>
        </antcall>
        <mail from="${weekly.buildmaster}" 
              replyto="${weekly.build.alias}"
              tolist="${weekly.build.alias}"
              message="${date.stamp} weekly build completed:\n\nhttp://openjfx.java.sun.com/builds/weekly/openjfx-compiler/weekly-${date.stamp}"
              subject="Weekly build available"/>
    </target>
    
    <target name="milestone-build" description="Milestone build target">
        <antcall target="-bundles-build"/>
    </target>
    
    <target name="-bundles-build" depends="init">
        <fail unless="release" description="release tag not specified"/>
        <mkdir dir="${bundle.dir}"/>
        <zip destfile="${src.bundle}" basedir="${basedir}"
             excludes="${bundle.dir}/**, ${build.dir}/**, ${dist.dir}/** , **/.svn/**" level="9"/>
        <antcall target="dist"/>
        <!-- property set separately by Hudson build -->
        <property name="bundle.destdir" value="${env.WORKSPACE}"/>
        <mkdir dir="${bundle.destdir}/${release}"/>
        <copy todir="${bundle.destdir}/${release}">
            <fileset dir="${bundle.dir}"/>
        </copy>
        <delete dir="${bundle.destdir}/latest" failonerror="true"/>
        <mkdir dir="${bundle.destdir}/latest"/>
        <copy todir="${bundle.destdir}/latest">
            <fileset dir="${bundle.dir}"/>
        </copy>
    </target>
    
    <target name="pack-jars" depends="jar">
        <taskdef name="pack200" classpath="${file.reference.pack200task.jar}"
                 classname="com.sun.tools.apache.ant.pack200.Pack200Task"/>
        <pack200 src="${dist.jar}" gzipoutput="true" destfile='${dist.jar}.pack.gz'/>
        <pack200 src="${dist.javafxrt.jar}" gzipoutput="true" destfile='${dist.javafxrt.jar}.pack.gz'/>
    </target>
    
    <target name="source-zip" depends="init">
        <zip destfile="${dist.dir}/src.zip">
            <zipfileset dir="${src.classes.dir}"/>
            <zipfileset dir="javafxdoc/src"/>
        </zip>
    </target>
    
    <!-- 
                ======================
                INITIALIZATION SECTION 
                ======================
            -->
    <target depends="-pre-init" name="-init-private">
        <property file="nbproject/private/config.properties"/>
        <property file="nbproject/private/configs/${config}.properties"/>
        <property file="nbproject/private/private.properties"/>
    </target>
    <target depends="-pre-init,-init-private" name="-init-user">
        <property file="${user.properties.file}"/>
        <!-- The two properties below are usually overridden -->
        <!-- by the active platform. Just a fallback. -->
        <property name="default.javac.source" value="1.4"/>
        <property name="default.javac.target" value="1.4"/>
    </target>
    <target depends="-pre-init,-init-private,-init-user" name="-init-project">
        <property file="nbproject/configs/${config}.properties"/>
        <property file="project.properties"/>
    </target>
    <target depends="-pre-init,-init-private,-init-user,-init-project" name="-do-init">
        <available file="${manifest.file}" property="manifest.available"/>
        <condition property="manifest.available+main.class">
            <and>
                <isset property="manifest.available"/>
                <isset property="main.class"/>
                <not>
                    <equals arg1="${main.class}" arg2="" trim="true"/>
                </not>
            </and>
        </condition>
        <condition property="manifest.available+main.class+mkdist.available">
            <and>
                <istrue value="${manifest.available+main.class}"/>
                <isset property="libs.CopyLibs.classpath"/>
            </and>
        </condition>
        <condition property="have.tests">
            <or>
                <available file="${test.src.dir}"/>
            </or>
        </condition>
        <condition property="have.sources">
            <or>
                <available file="${src.classes.dir}"/>
            </or>
        </condition>
        <condition property="netbeans.home+have.tests">
            <and>
                <isset property="netbeans.home"/>
                <isset property="have.tests"/>
            </and>
        </condition>
        <condition property="no.javadoc.preview">
            <and>
                <isset property="javadoc.preview"/>
                <isfalse value="${javadoc.preview}"/>
            </and>
        </condition>
        <property name="run.jvmargs" value=""/>
        <property name="javac.compilerargs" value=""/>
        <property name="work.dir" value="${basedir}"/>
        <property name="javac.debug" value="true"/>
        <property name="javadoc.preview" value="true"/>
        <property name="source.encoding" value="${file.encoding}"/>
        <condition property="javadoc.encoding.used" value="${javadoc.encoding}">
            <and>
                <isset property="javadoc.encoding"/>
                <not>
                    <equals arg1="${javadoc.encoding}" arg2=""/>
                </not>
            </and>
        </condition>
        <property name="javadoc.encoding.used" value="${source.encoding}"/>
        <property name="includes" value="**"/>
        <property name="excludes" value=""/>
        <condition else="" property="javac.compilerargs.jaxws" value="-Djava.endorsed.dirs='${jaxws.endorsed.dir}'">
            <and>
                <isset property="jaxws.endorsed.dir"/>
                <available file="nbproject/jaxws-build.xml"/>
            </and>
        </condition>
    </target>
    <target depends="-pre-init,-init-private,-init-user,-init-project,-do-init" name="-init-check">
        <fail unless="src.classes.dir">Must set src.classes.dir</fail>
        <fail unless="test.src.dir">Must set test.src.dir</fail>
        <fail unless="build.dir">Must set build.dir</fail>
        <fail unless="dist.dir">Must set dist.dir</fail>
        <fail unless="build.classes.dir">Must set build.classes.dir</fail>
        <fail unless="dist.javadoc.dir">Must set dist.javadoc.dir</fail>
        <fail unless="build.test.classes.dir">Must set build.test.classes.dir</fail>
        <fail unless="build.test.results.dir">Must set build.test.results.dir</fail>
        <fail unless="build.classes.excludes">Must set build.classes.excludes</fail>
        <fail unless="dist.jar">Must set dist.jar</fail>
    </target>
    
    <target name="-init-debug-args">
        <property name="version-output" value="java version &quot;${ant.java.version}"/>
        <condition property="have-jdk-older-than-1.4">
            <or>
                <contains string="${version-output}" substring="java version &quot;1.0"/>
                <contains string="${version-output}" substring="java version &quot;1.1"/>
                <contains string="${version-output}" substring="java version &quot;1.2"/>
                <contains string="${version-output}" substring="java version &quot;1.3"/>
            </or>
        </condition>
        <condition else="-Xdebug" property="debug-args-line" value="-Xdebug -Xnoagent -Djava.compiler=none">
            <istrue value="${have-jdk-older-than-1.4}"/>
        </condition>
    </target>
    
    <target name="-init-presetdef-jar">
        <presetdef name="jar" uri="http://www.netbeans.org/ns/j2se-project/1">
            <jar compress="${jar.compress}" jarfile="${dist.jar}">
                <fileset dir="${build.classes.dir}"/>
            </jar>
        </presetdef>
    </target>
    
    <target depends="-pre-init,-init-private,-init-user,-init-project,-do-init,-post-init,-init-check,-init-presetdef-jar" name="init"/>
    <!--
                ===================
                COMPILATION SECTION
                ===================
            -->
    <target depends="init,generated-java,-pre-compile,-do-compile,-post-compile" description="Compile project." name="compile"/>
    <target depends="init,generated-java,-pre-compile,-force-recompile" name="-do-compile-single">
        <fail unless="javac.includes">Must select some files in the IDE or set javac.includes
        </fail>
        <javac excludes="" includes="${javac.includes}" sourcepath="${src.classes.dir}"/>
    </target>
    <target depends="init,-pre-compile,-do-compile-single" name="compile-single"/>
    <target depends="init,-pre-compile" name="-force-recompile">
        <fail unless="javac.includes">Must set javac.includes
        </fail>
        <pathconvert pathsep="," property="javac.includes.binary">
            <path>
                <filelist dir="${build.classes.dir}" files="${javac.includes}"/>
            </path>
            <globmapper from="*.java" to="*.class"/>
        </pathconvert>
        <delete>
            <files includes="${javac.includes.binary}"/>
        </delete>
    </target>
    <!--
                ====================
                JAR BUILDING SECTION
                ====================
            -->
    <target depends="init" name="-pre-jar">
        <dirname file="${dist.jar}" property="dist.jar.dir"/>
        <mkdir dir="${dist.jar.dir}"/>
    </target>
    <target depends="init,compile,-pre-jar" name="-do-jar-without-manifest" unless="manifest.available">
        <jar/>
    </target>
    <target depends="init,compile,-pre-jar" if="manifest.available" name="-do-jar-with-manifest" unless="manifest.available+main.class">
        <jar manifest="${manifest.file}"/>
    </target>
    <target depends="init,compile,-pre-jar" if="manifest.available+main.class" name="-do-jar-with-mainclass" unless="manifest.available+main.class+mkdist.available">
        <jar manifest="${manifest.file}">
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
            </manifest>
        </jar>
        <echo>To run this application from the command line without Ant, try:</echo>
        <property location="${build.classes.dir}" name="build.classes.dir.resolved"/>
        <property location="${dist.jar}" name="dist.jar.resolved"/>
        <pathconvert property="run.classpath.with.dist.jar">
            <path path="${run.classpath}"/>
            <map from="${build.classes.dir.resolved}" to="${dist.jar.resolved}"/>
        </pathconvert>
        <echo>java -cp "${run.classpath.with.dist.jar}" ${main.class}</echo>
    </target>
    <target depends="init,compile,-do-jar-with-manifest,-do-jar-without-manifest,-do-jar-with-mainclass,-do-jar-with-libraries" description="Build JAR." name="jar"/>
    <!--
                =================
                EXECUTION SECTION
                =================
            -->
    <target depends="init,compile" description="Run a main class." name="run">
        <fail unless="main.class">Must select one file in the IDE or set main.class</fail>
        <input addproperty="application.args" message="(Set the property application.args to skip this prompt). Your work dir is ${work.dir}. Arguments: "/>
        <java classname="${main.class}" dir="${work.dir}" fork="true">
            <jvmarg line="${run.jvmargs}"/>
            <arg line="${application.args}"/>
            <classpath>
                <path path="${run.classpath}"/>
            </classpath>
            <syspropertyset>
                <propertyref prefix="run-sys-prop."/>
                <mapper from="run-sys-prop.*" to="*" type="glob"/>
            </syspropertyset>
        </java>
    </target>
    <target name="-do-not-recompile">
        <property name="javac.includes.binary" value=""/>
    </target>
    <target depends="init,-do-not-recompile,compile-single" name="run-single">
        <fail unless="run.class">Must select one file in the IDE or set run.class</fail>
        <java classname="@{run.class}" dir="${work.dir}" fork="true">
            <jvmarg line="${run.jvmargs}"/>
            <arg line="${application.args}"/>
            <classpath>
                <path path="${run.classpath}"/>
            </classpath>
            <syspropertyset>
                <propertyref prefix="run-sys-prop."/>
                <mapper from="run-sys-prop.*" to="*" type="glob"/>
            </syspropertyset>
        </java>
    </target>
    <!--
                =================
                DEBUGGING SECTION
                =================
            -->
    <target depends="init" if="netbeans.home" name="-debug-start-debugger">
        <nbjpdastart addressproperty="jpda.address" name="${debug.class}" transport="dt_socket">
            <classpath>
                <path path="${debug.classpath}"/>
            </classpath>
        </nbjpdastart>
    </target>
    <target depends="init,compile" name="-debug-start-debuggee">
        <input addproperty="application.args" message="(Set the property application.args to skip this prompt). Your work dir is ${work.dir}. Arguments: "/>
        <java classname="${main.class}" dir="${work.dir}" fork="true">
            <jvmarg line="-Xdebug"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
            <jvmarg line="${run.jvmargs}"/>
            <arg line="${application.args}"/>
            <classpath>
                <path path="${debug.classpath}"/>
            </classpath>
            <syspropertyset>
                <propertyref prefix="run-sys-prop."/>
                <mapper from="run-sys-prop.*" to="*" type="glob"/>
            </syspropertyset>
        </java>
    </target>
    <target depends="init,compile,-debug-start-debugger,-debug-start-debuggee" description="Debug project in IDE." if="netbeans.home" name="debug"/>
    <target depends="init" if="netbeans.home" name="-debug-start-debugger-stepinto">
        <nbjpdastart addressproperty="jpda.address" name="${main.class}" stopclassname="${main.class}" transport="dt_socket">
            <classpath>
                <path path="${debug.classpath}"/>
            </classpath>
        </nbjpdastart>
    </target>
    <target depends="init,compile,-debug-start-debugger-stepinto,-debug-start-debuggee" if="netbeans.home" name="debug-stepinto"/>
    <target depends="init,compile-single" if="netbeans.home" name="-debug-start-debuggee-single">
        <fail unless="debug.class">Must select one file in the IDE or set debug.class</fail>
        <java classname="${debug.class}" dir="${work.dir}" fork="true">
            <jvmarg line="${debug-args-line}"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
            <jvmarg line="${run.jvmargs}"/>
            <arg line="${application.args}"/>
            <classpath>
                <path path="${debug.classpath}"/>
            </classpath>
            <syspropertyset>
                <propertyref prefix="run-sys-prop."/>
                <mapper from="run-sys-prop.*" to="*" type="glob"/>
            </syspropertyset>
        </java>
    </target>
    <target depends="init,-do-not-recompile,compile-single,-debug-start-debugger,-debug-start-debuggee-single" if="netbeans.home" name="debug-single"/>
    <target depends="init" name="-pre-debug-fix">
        <fail unless="fix.includes">Must set fix.includes</fail>
        <property name="javac.includes" value="${fix.includes}.java"/>
    </target>
    <target depends="init,-pre-debug-fix,compile-single" if="netbeans.home" name="-do-debug-fix">
        <nbjpdareload/>
    </target>
    <target depends="init,-pre-debug-fix,-do-debug-fix" if="netbeans.home" name="debug-fix"/>
    <!--
                ===============
                JAVADOC SECTION
                ===============
            -->
    <target depends="init,-javadoc-build" if="netbeans.home" name="-javadoc-browse" unless="no.javadoc.preview">
        <nbbrowse file="${dist.javadoc.dir}/index.html"/>
    </target>
    <target depends="init,-javadoc-build,-javadoc-browse" description="Build Javadoc." name="javadoc"/>
    <!--
                =========================
                JUNIT COMPILATION SECTION
                =========================
            -->
    <target depends="init,compile" if="have.tests" name="-pre-compile-test">
        <mkdir dir="${build.test.classes.dir}"/>
    </target>
    <target depends="init,compile,-pre-compile-test" if="have.tests" name="-do-compile-test">
        <javac classpath="${javac.test.classpath}" debug="true" destdir="${build.test.classes.dir}" srcdir="${test.src.dir}"/>
        <copy todir="${build.test.classes.dir}">
            <fileset dir="${test.src.dir}" excludes="${build.classes.excludes}"/>
        </copy>
    </target>
    <target depends="init,compile,-pre-compile-test,-do-compile-test" name="compile-test"/>
    <target depends="init,compile,-pre-compile-test,-force-recompile-test" if="have.tests" name="-do-compile-test-single">
        <fail unless="javac.includes">Must select some files in the IDE or set javac.includes
        </fail>
        <javac classpath="${javac.test.classpath}"
               debug="true"
               source="${javac.source}"
               target="${javac.target}"
               destdir="${build.test.classes.dir}"
               excludes="" 
               sourcepath="${test.src.dir}"
               srcdir="${test.src.dir}"
               deprecation="${javac.deprecation}"
               encoding="${source.encoding}">
            <compilerarg line="${javac.compilerargs} ${javac.compilerargs.jaxws}"/>
        </javac>
        <copy todir="${build.test.classes.dir}">
            <fileset dir="${test.src.dir}" excludes="${build.classes.excludes}"/>
        </copy>
    </target>
    <target depends="init,compile,-pre-compile-test,-do-compile-test-single" name="compile-test-single"/>
    <target depends="init,compile,-pre-compile-test" name="-force-recompile-test">
        <fail unless="javac.includes">Must set javac.includes</fail>
        <pathconvert pathsep="," property="javac.includes.binary">
            <path>
                <filelist dir="${build.test.classes.dir}" files="${javac.includes}"/>
            </path>
            <globmapper from="*.java" to="*.class"/>
        </pathconvert>
        <delete>
            <files includes="${javac.includes.binary}"/>
        </delete>
    </target>

    <!--
                =======================
                JUNIT EXECUTION SECTION
                =======================
            -->
    <target depends="init,compile-test,-pre-test-run" if="have.tests" name="-do-test-run">
        <junit dir="${work.dir}" errorproperty="tests.failed" failureproperty="tests.failed" fork="true" showoutput="true">
            <batchtest todir="${build.test.results.dir}">
                <fileset dir="${test.src.dir}" excludes="${excludes}" includes="${includes}">
                    <filename name="**/*Test.java"/>
                </fileset>
            </batchtest>
            <classpath>
                <path path="${run.test.classpath}"/>
            </classpath>
            <syspropertyset>
                <propertyref prefix="test-sys-prop."/>
                <mapper from="test-sys-prop.*" to="*" type="glob"/>
            </syspropertyset>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>
            <jvmarg line="${run.jvmargs}"/>
        </junit>

    </target>
    <target depends="init" if="have.tests" name="test-report"/>
    <target depends="init" if="netbeans.home+have.tests" name="-test-browse"/>
    <target depends="init,compile-test,-pre-test-run,-do-test-run,test-report,-post-test-run,-test-browse" description="Run unit tests." name="test"/>
    <target depends="init" if="have.tests" name="-pre-test-run-single">
        <mkdir dir="${build.test.results.dir}"/>
    </target>
    <target depends="init,compile-test-single,-pre-test-run-single" if="have.tests" name="-do-test-run-single">
        <fail unless="test.class">Must select one file in the IDE or set test.class</fail>
        <property location="${build.test.results.dir}/TEST-${test.class}.xml" name="test.report.file"/>
        <delete file="${test.report.file}"/>
        <mkdir dir="${build.test.results.dir}"/>
        <java classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner" dir="${work.dir}" fork="true">
            <jvmarg line="${run.jvmargs}"/>
            <classpath>
                <path path="${ant.home}/lib/ant.jar:${ant.home}/lib/ant-junit.jar:${run.test.classpath}"/>
            </classpath>
            <syspropertyset>
                <propertyref prefix="test-sys-prop."/>
                <mapper from="test-sys-prop.*" to="*" type="glob"/>
            </syspropertyset>
            <arg value="${test.class}"/>
            <arg value="showoutput=true"/>
            <arg value="formatter=org.apache.tools.ant.taskdefs.optional.junit.BriefJUnitResultFormatter"/>
            <arg value="formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,${test.report.file}"/>
        </java>
    </target>
    <target depends="init,compile-test-single,-pre-test-run-single,-do-test-run-single" if="have.tests" name="-post-test-run-single">
        <fail if="tests.failed">Some tests failed; see details above.</fail>
    </target>
    <target depends="init,-do-not-recompile,compile-test-single,-pre-test-run-single,-do-test-run-single,-post-test-run-single" description="Run single unit test." name="test-single">
    </target>    
    <!--
                =======================
                JUNIT DEBUGGING SECTION
                =======================
            -->
    <target depends="init,compile-test" if="have.tests" name="-debug-start-debuggee-test">
        <fail unless="test.class">Must select one file in the IDE or set test.class</fail>
        <property location="${build.test.results.dir}/TEST-${test.class}.xml" name="test.report.file"/>
        <delete file="${test.report.file}"/>
        <mkdir dir="${build.test.results.dir}"/>
        <java classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner"  dir="${work.dir}" fork="true">
            <syspropertyset>
                <propertyref prefix="test-sys-prop."/>
                <mapper from="test-sys-prop.*" to="*" type="glob"/>
            </syspropertyset>
            <syspropertyset>
                <propertyref prefix="run-sys-prop."/>
                <mapper from="run-sys-prop.*" to="*" type="glob"/>
            </syspropertyset>
            <arg value="${test.class}"/>
            <arg value="showoutput=true"/>
            <arg value="formatter=org.apache.tools.ant.taskdefs.optional.junit.BriefJUnitResultFormatter"/>
            <arg value="formatter=org.apache.tools.ant.taskdefs.optional.junit.XMLJUnitResultFormatter,${test.report.file}"/>
            <jvmarg line="-Xdebug"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
            <jvmarg line="${run.jvmargs}"/>
            <classpath>
                <path path="${ant.home}/lib/ant.jar:${ant.home}/lib/ant-junit.jar:${debug.test.classpath}"/>
            </classpath>
        </java>
    </target>
    <target depends="init,compile-test" if="netbeans.home+have.tests" name="-debug-start-debugger-test">
        <nbjpdastart addressproperty="jpda.address" name="${test.class}" transport="dt_socket">
            <classpath>
                <path path="${debug.test.classpath}"/>
            </classpath>
        </nbjpdastart>
    </target>
    <target depends="init,-do-not-recompile,compile-test-single,-debug-start-debugger-test,-debug-start-debuggee-test" name="debug-test"/>
    <target depends="init,-pre-debug-fix,compile-test-single" if="netbeans.home" name="-do-debug-fix-test">
        <nbjpdareload dir="${build.test.classes.dir}"/>
    </target>
    <target depends="init,-pre-debug-fix,-do-debug-fix-test" if="netbeans.home" name="debug-fix-test"/>
    <!--
                ===============
                CLEANUP SECTION
                ===============
            -->
    <target depends="init" name="-do-clean">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>
    
    <target depends="init,-do-clean,-post-clean" description="Clean build products." name="clean"/>
</project>
