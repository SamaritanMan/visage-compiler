<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="JavaFX Compiler" default="default" basedir=".">
    <description>Builds, tests, and runs the project JavaFX.</description>

    <property name="tools.dir" value="${basedir}/tools"/>
    <property name="runtime.dir" value="${basedir}/runtime"/>
    <property environment="env" />
    <import file="tools-defs.xml"/>
    <property name="antlr.grammarv2" value="v2" />
    <property name="antlr.grammarv3" value="v3" />
    <property name="antlr.grammarv3w" value="v3Walker" />

    <import file="nbproject/build-impl.xml"/>

    <target name="default" depends="jar,runtime,install-scripts"
            description="Build javafxc compiler and runtime distribution"/>

    <target name="all" depends="jar, runtime, spec, javadoc, test, findbugs"
            description="Build and test all project artifacts"/>

    <target name="hudson-all" depends="coverage, all, coverage-report, hudson-post-build"
            description="Build and test all project artifacts"/>

    <target name="all-with-coverage" depends="coverage, all, coverage-report"
            description="Build and test all project artifacts with coverage"/>

    <target name="compiler-only" depends="jar"
            description="Build just the javafxc compiler (no runtime or bin scripts)"/>

    <available property="ant.jar" value="${ant.home}/lib/ant.jar" file="${ant.home}/lib/ant.jar"/>
    <!-- if the previous location is not correct than find the ant.jar from the java.class.path value -->
    <pathconvert property="ant.jar">
        <mapper type="regexp" from="${path.separator}([^${path.separator}]*ant.jar)${path.separator}" to="\1"/>
        <path location="${path.separator}${java.class.path}${path.separator}"/>
    </pathconvert>

    <target name="check-ant">
        <fail message="Ant version 1.7.0 or later is required to build JavaFX.">
            <condition>
                <not>
                    <antversion atleast="1.7.0"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="check-jdk-1.5">
        <available property="has-jdk-1.5" classname="java.lang.Appendable"/>
    </target>

    <target name="check-bootstrap">
        <condition property="has-bootstrap-dirs">
            <and>
                <available file="${ant.dir}"/>
                <available file="${scenegraph.dir}"/>
                <available file="${junit.dir}"/>
                <available file="${docbook.dir}"/>
                <available file="${antlr.dir}"/>
                <available file="${antlrworks.dir}/antlrworks-${antlrworks.ver}.jar"/>
                <available file="${antlr.dir}/antlr-2.7.7.jar"/>
            </and>
        </condition>
    </target>

    <target name="tool-paths">
        <!-- Define actual properties for the known paths so they can be used in the properties file -->
        <property name="ant.class.path" refid="ant.class.path"/>
        <property name="scenegraph.class.path" refid="scenegraph.class.path"/>
        <property name="junit.class.path" refid="junit.class.path"/>
        <property name="findbugs.class.path" refid="findbugs.class.path"/>
        <property name="saxon.class.path" refid="saxon.class.path"/>
        <property name="xincluder.class.path" refid="xincluder.class.path"/>
        <property name="antlr.class.path" refid="antlr.class.path"/>
        <property name="antlr-runtime.class.path" refid="antlr-runtime.class.path"/>
        <property name="antlrworks.class.path" refid="antlrworks.class.path"/>
        <property name="cobertura.class.path" refid="cobertura.class.path"/>
    </target>

    <target name="do-bootstrap" depends="check-bootstrap" unless="has-bootstrap-dirs">
        <ant antfile="bootstrap.xml" target="all"/>
    </target>

    <target name="single-fx-test-check" if="test.fx.includes">
        <property name="test.includes" value="**/FXCompilerTest.java"/>
        <property name="javac.includes" value="**/FXCompilerTest.java"/>
        <property name="test-sys-prop.test.fx.includes" value="${test.fx.includes}"/>
    </target>

    <target name="-pre-init" depends="check-ant,check-jdk-1.5,do-bootstrap,tool-paths,single-fx-test-check">
        <fail unless="has-jdk-1.5">You need JDK 1.5 or higher to build JavaFX.</fail>
        <echo message="JDK version ${java.version}"/>
        <echo message="Ant version ${ant.version}"/>
    </target>

    <target name="-post-init">
        <property name="antlr.grammarv2.file" value="${antlr.src.dir}/${antlr.grammarv2}.g" />
        <property name="antlr.grammarv3.file" value="${antlr.src.dir}/${antlr.grammarv3}.g" />
        <property name="antlr.grammarv3w.file" value="${antlr.src.dir}/${antlr.grammarv3w}.g" />
    </target>

    <!-- jar file creation: external runtime jar contents are included to reduce classpath issues -->
    <target depends="init,compile,-pre-pre-jar,-pre-jar" if="manifest.available+main.class+mkdist.available" name="-do-jar-with-libraries">
        <jar compress="${jar.compress}" destfile="${dist.jar}" manifest="${manifest.file}">
            <fileset dir="${build.classes.dir}"/>
            <zipfileset src="${file.reference.javac.jar}" excludes="META-INF/**/"/>
            <zipfileset src="${antlr-runtime.class.path}" excludes="META-INF/**/"/>
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
            </manifest>
        </jar>
    </target>

    <target name="generate-parserv2" unless="parserv2.uptodate" >
        <java classname="org.antlr.Tool" classpathref="antlr.class.path" fork="true">
            <arg value="${antlr.grammarv2.file}" />
        </java>
    </target>

    <target name="generate-parserv3" unless="parserv3.uptodate" >
        <java classname="org.antlr.Tool" classpathref="antlr.class.path" fork="true">
            <arg value="${antlr.grammarv3.file}" />
        </java>
    </target>

    <target name="generate-parserv3w" unless="parserv3w.uptodate" >
        <java classname="org.antlr.Tool" classpathref="antlr.class.path" fork="true">
            <arg value="${antlr.grammarv3w.file}" />
            <arg value="-lib" />
            <arg value="${antlr.src.dir}" />
        </java>
    </target>

    <target name="syntax-diagrams">
        <mkdir dir="${syntax.diagrams.dir}"/>
        <java classname="org.antlr.works.Console" fork="true">
            <classpath>
                <pathelement path="${java.class.path}" />
                <path refid="antlr.class.path" />
                <path refid="antlrworks.class.path" />
            </classpath>
            <arg value="-f" />
            <arg value="${antlr.grammar.file}" />
            <arg value="-sd" />
            <arg value="png" />
            <arg value="-o" />
            <arg value="${syntax.diagrams.dir}" />
        </java>
    </target>

    <target name="-do-compile" depends="init,deps-jar,-pre-pre-compile,-pre-compile" if="have.sources">
        <javac compiler="modern" fork="true"
               srcdir="${src.classes.dir}" destdir="${build.classes.dir}"
               debug="${javac.debug}" deprecation="${javac.deprecation}"
               source="${javac.source}" target="${javac.target}" includeantruntime="false">
            <classpath>
                <path path="${javac.classpath}"/>
            </classpath>
            <compilerarg value="-J-Xbootclasspath/p:${basedir}${file.separator}lib${file.separator}javac.jar"/>
            <compilerarg line="${javac.compilerargs}"/>
        </javac>
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.classes.dir}" excludes="${build.classes.excludes}"/>
        </copy>
    </target>

    <target name="compile-runtime-fx">
        <taskdef name="javafxc" classname="com.sun.tools.javafx.ant.JavaFxAntTask">
            <classpath>
                <pathelement location="${ant.jar}"/>
                <pathelement location="${build.classes.dir}"/>
                <pathelement path="${javac.classpath}"/>
            </classpath>
        </taskdef>

        <javafxc debug="${javac.debug}" deprecation="${javac.deprecation}"
                 destdir="${build.classes.dir}"
                 excludes="${excludes}" includeantruntime="false"
                 includes="**/*.fx" source="${javac.source}" sourcepath=""
                 srcdir="${src.classes.dir}" target="${javac.target}"
                 classpath="${build.classes.dir}:${javac.test.classpath}"
                 compilerclasspath="${build.classes.dir}:${javac.classpath}"/>
    </target>

    <target depends="init,deps-jar" name="-pre-pre-compile">
        <mkdir dir="${build.classes.dir}"/>
        <uptodate property="parserv2.uptodate" srcfile="${antlr.grammarv2.file}" targetfile="${antlr.generated.dir}/${antlr.grammarv2}Parser.java" />
        <uptodate property="parserv3.uptodate" srcfile="${antlr.grammarv3.file}" targetfile="${antlr.generated.dir}/${antlr.grammarv3}Parser.java" />
        <uptodate property="parserv3w.uptodate" srcfile="${antlr.grammarv3w.file}" targetfile="${antlr.generated.dir}/${antlr.grammarv3w}.java" />
    </target>
    <target name="-pre-compile" depends="generate-parserv2,generate-parserv3,generate-parserv3w"/>
    <target name="-post-compile" depends="compile-runtime-fx" />
    <target depends="init" name="-javadoc-build">
        <mkdir dir="${dist.javadoc.dir}"/>
        <javadoc additionalparam="${javadoc.additionalparam}" author="${javadoc.author}" destdir="${dist.javadoc.dir}" failonerror="true" noindex="${javadoc.noindex}" nonavbar="${javadoc.nonavbar}" notree="${javadoc.notree}" private="${javadoc.private}" source="${javac.source}" splitindex="${javadoc.splitindex}" use="${javadoc.use}" useexternalfile="true" version="${javadoc.version}" windowtitle="${javadoc.windowtitle}"
                packagenames="${javadoc.pkgs}" sourcepath="${src.classes.dir}">
            <classpath>
                <path path="${javac.classpath}"/>
            </classpath>
        </javadoc>
    </target>

    <!-- Stuff dealing with adding coverage to JUnit execution -->

    <target name="coverage" description="Enables coverage for junit test targets">
        <property name="do.coverage" value="true"/>
    </target>

    <target name="cobertura-taskdefs">
        <taskdef classpathref="cobertura.class.path" resource="tasks.properties"/>
    </target>

    <target name="conditional-instrument" if="do.coverage" depends="cobertura-taskdefs">
        <mkdir dir="${build.instrumented.dir}"/>
        <cobertura-instrument todir="${build.instrumented.dir}">
            <fileset dir="${build.classes.dir}" includes="**/*.class"/>
            <classpath refid="cobertura.class.path"/>
        </cobertura-instrument>
    </target>

    <target name="conditional-clean-instrument" unless="do.coverage">
        <delete dir="${build.instrumented.dir}"/>
    </target>

    <target name="conditional-coverage-report" if="do.coverage" depends="cobertura-taskdefs">
        <mkdir dir="${dist.coverage.dir}"/>
        <cobertura-report srcdir="${src.classes.dir}" destdir="${dist.coverage.dir}">
            <classpath>
                <path location="${build.classes.dir}"/>
            </classpath>
        </cobertura-report>
        <cobertura-report format="xml" srcdir="${src.classes.dir}" destdir="${build.dir}"/>
    </target>

    <target depends="init,conditional-instrument,conditional-clean-instrument" if="have.tests" name="-pre-test-run">
        <mkdir dir="${build.test.results.dir}"/>
    </target>

    <target depends="init,compile-test,-pre-test-run,-do-test-run" if="have.tests" name="-post-test-run">
        <!-- Don't explicitly call fail task, so Hudson reports an UNSTABLE build instead of FAILURE -->
    </target>

    <target depends="conditional-coverage-report" name="coverage-report" />

    <!-- End stuff dealing with adding coverage to JUnit execution -->

    <target name="-post-jar" description="Copy command wrappers to dest/bin directory.">
        <copy todir="dist/bin">
            <fileset dir="src/bin"/>
            <filterset>
                <filter token="SCENEGRAPH_JAR" value="${scenegraph.jar}"/>
            </filterset>
        </copy>
        <chmod dir="dist/bin" perm="755" includes="**/javafx*"/>
    </target>

    <target name="-post-clean" depends="runtime-clean">
        <!-- Delete ANTLR-generated files -->
        <delete dir="src/share/classes/com/sun/tools/javafx" includes="**/v2*.*" excludes="**/v2.g"/>
        <delete dir="src/share/classes/com/sun/tools/javafx" includes="**/v3*.*" excludes="**/v3.g **/v3Walker.g"/>
        <delete dir="${syntax.diagrams.dir}" />
        <delete dir="${build.instrumented.dir}"/>
        <delete file="cobertura.ser" />
    </target>

    <target name="spec" depends="syntax-diagrams" description="Build JavaFX Script specification.">
        <ant antfile="doc/build.xml" target="spec" inheritAll="false"/>
        <copy todir="dist/doc">
            <fileset dir="build/doc/html"/>
        </copy>
    </target>

    <target name="findbugs" depends="compile">
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
                 classpathref="findbugs.class.path" />
        <mkdir dir="${dist.findbugs.dir}"/>
        <findbugs output="xml" outputFile="${build.dir}/findbugs.xml" home="${findbugs.dir}" jvmargs="-Xmx512m"
                  excludeFilter="findbugs-exclude.xml">
            <class location="${build.classes.dir}"/>
            <auxclasspath path="${javac.classpath}"/>
            <sourcepath path="${src.classes.dir}"/>
        </findbugs>
        <exec executable="sh">
            <arg value="${findbugs.dir}/bin/convertXmlToText"/>
            <arg value="-longBugCodes"/>
            <arg value="-html:${findbugs.dir}/src/xsl/fancy.xsl"/>
            <arg value="${build.dir}/findbugs.xml"/>
            <redirector output="${dist.findbugs.dir}/findbugs.html"/>
        </exec>
    </target>

    <target name="svnstat">
        <mkdir dir="${dist.svnstat.dir}"/>
        <java classname="de.agentlab.svnstat.SvnStat" fork="true" classpathref="svnstat.class.path">
            <env key="PATH" path="${env.PATH}:${svn.path}" />
            <arg value="-r" />
            <arg value="${svn.repository}" />
            <arg value="-d" />
            <arg value="${dist.svnstat.dir}" />
        </java>
    </target>

    <!-- Runs only if export.dir is set, which should only be set from the continuous build.
         Publishes build results to ${export.dir}.
         Depends on Hudson environment params JOB_NAME and SVN_REVISION.
         Publishes result of findbugs analysis, where it can later be combined into
         a multi-version bug database. -->
    <target name="hudson-post-build" depends="init" if="export.dir">
        <property environment="env"/>
        <mkdir dir="${export.dir}/findbugs"/>
        <exec executable="sh">
            <arg value="${findbugs.dir}/bin/setBugDatabaseInfo"/>
            <arg value="-name"/>
            <arg value="${env.JOB_NAME}-${env.SVN_REVISION}"/>
            <arg value="${build.dir}/findbugs.xml"/>
            <redirector output="${export.dir}/findbugs/${env.JOB_NAME}-${env.SVN_REVISION}.xml"/>
        </exec>
        <delete dir="${export.dir}/docroot/current-build" />
        <copy todir="${export.dir}/docroot/current-build">
            <fileset dir="${dist.dir}"/>
        </copy>
        <copy todir="${export.dir}/docroot/current-build/doc">
            <fileset dir="doc" includes="**/*.pdf"/>
        </copy>
    </target>

    <target name="runtime" depends="jar">
        <ant dir="${runtime.dir}" antfile="build.xml" target="jar" inheritall="false" />
    </target>
    
    <target name="install-scripts">
        <copy todir="dist/bin">
            <fileset dir="src/bin"/>
        </copy>
        <chmod dir="dist/bin" perm="755" includes="**/javafx*"/>
    </target>

    <target name="runtime-clean" >
        <ant dir="${runtime.dir}" antfile="build.xml" target="clean" inheritall="false" />
    </target>

    <target name="real-clean">
        <!-- suppress automatic bootstrapping -->
        <property name="has-bootstrap-dirs" value="true"/>
        <ant antfile="bootstrap.xml" target="prepare"/>
        <antcall target="clean"/>
        <ant antfile="bootstrap.xml" target="clean"/>
    </target>        
</project>
