<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="JavaFX Compiler" default="default" basedir=".">
    <description>Builds, tests, and runs the project JavaFX.</description>

    <property name="tools.dir" value="${basedir}/tools"/>
    <property environment="env" />
    <import file="tools-defs.xml"/>
    <property name="antlr.grammar" value="v2" />

    <import file="nbproject/build-impl.xml"/>
    <!--<property file="nbproject/project.properties" />-->

    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
    </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="JavaFX-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
    </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->

    <target name="default" depends="jar"
            description="Build javafxc compiler."/>

    <target name="all" depends="jar, spec, javadoc, test, findbugs, hudson"
            description="Build and test all project artifacts"/>

    <target name="all-with-coverage" depends="coverage, all"
            description="Build and test all project artifacts with coverage"/>

    <available property="ant.jar" value="${ant.home}/lib/ant.jar" file="${ant.home}/lib/ant.jar"/>
    <!-- if the previous location is not correct than find the ant.jar from the java.class.path value -->
    <pathconvert property="ant.jar">
        <mapper type="regexp" from="${path.separator}([^${path.separator}]*ant.jar)${path.separator}" to="\1"/>
        <path location="${path.separator}${java.class.path}${path.separator}"/>
    </pathconvert>

    <target name="check-ant">
        <fail message="Ant version 1.7.0 or later is required to build JavaFX.">
            <condition>
                <not>
                    <antversion atleast="1.7.0"/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="check-jdk-1.6">
        <available property="has-jdk-1.6" classname="javax.script.ScriptEngine"/>
    </target>
    
    <target name="check-bootstrap">
        <condition property="has-bootstrap-dirs">
            <and>
                <available file="${ant.dir}"/>
                <available file="${junit.dir}"/>
                <available file="${docbook.dir}"/>
                <available file="${antlr.dir}"/>
                <available file="${antlr.dir}/antlr-2.7.7.jar"/>
            </and>
        </condition>
    </target>
    
    <target name="tool-paths">
        <!-- Define actual properties for the known paths so they can be used in the properties file -->
        <property name="ant.class.path" refid="ant.class.path"/>
        <property name="junit.class.path" refid="junit.class.path"/>
        <property name="findbugs.class.path" refid="findbugs.class.path"/>
        <property name="saxon.class.path" refid="saxon.class.path"/>
        <property name="xincluder.class.path" refid="xincluder.class.path"/>
        <property name="antlr.class.path" refid="antlr.class.path"/>
        <property name="antlr-runtime.class.path" refid="antlr-runtime.class.path"/>
        <property name="antlrworks.class.path" refid="antlrworks.class.path"/>
        <property name="cobertura.class.path" refid="cobertura.class.path"/>
    </target>
    
    <target name="do-bootstrap" depends="check-bootstrap" unless="has-bootstrap-dirs">
        <ant antfile="bootstrap.xml" target="all"/>
    </target>

    <target name="fx-taskdef">
        <taskdef resource="javafxc-ant-task.properties">
            <classpath>
                <pathelement location="${ant.jar}"/>
                <pathelement location="${build.classes.dir}"/>
                <pathelement path="${javac.classpath}"/>
            </classpath>
        </taskdef>
    </target>

    <target name="-pre-init" depends="check-ant,check-jdk-1.6,do-bootstrap,tool-paths">
        <fail unless="has-jdk-1.6">You need JDK 1.6 or higher to build JavaFX.</fail>
        <echo message="JDK version ${java.version}"/>
        <echo message="Ant version ${ant.version}"/>
    </target>

    <target name="-post-init">
        <condition property="antlr.uptodate" >
            <uptodate srcfile="${antlr.src.dir}/${antlr.grammar}.g" targetfile="${antlr.generated.dir}/${antlr.grammar}Parser.java" />
        </condition>
    </target>


    <target name="-post-compile" depends="fx-taskdef">
        <javafxc debug="${javac.debug}" deprecation="${javac.deprecation}"
                 destdir="${build.classes.dir}"
                 encoding="${source.encoding}" excludes="${excludes}" includeantruntime="false"
                 includes="**/*.fx" source="${javac.source}" sourcepath=""
                 srcdir="${src.classes.dir}" target="${javac.target}"
                 classpath="${build.classes.dir}:${javac.classpath}"
                 compilerclasspath="${build.classes.dir}:${javac.classpath}"/>
    </target>
    
    <!-- jar file creation: external runtime jar contents are included to reduce classpath issues -->
    <target depends="init,compile,-pre-pre-jar,-pre-jar" if="manifest.available+main.class+mkdist.available" name="-do-jar-with-libraries">
        <jar compress="${jar.compress}" destfile="${dist.jar}" manifest="${manifest.file}">
            <fileset dir="${build.classes.dir}"/>
            <zipfileset src="${file.reference.javac.jar}" excludes="META-INF/**/,com/sun/tools/javac/resources/javac.properties,com/sun/tools/javac/resources/version.properties"/> 
            <zipfileset src="${antlr-runtime.class.path}" excludes="META-INF/**/"/>
            <manifest>
                <attribute name="Main-Class" value="${main.class}"/>
            </manifest>
        </jar>
        <echo>To run this application from the command line without Ant, try:</echo>
        <property location="${dist.jar}" name="dist.jar.resolved"/>
        <echo>java -jar "${dist.jar.resolved}"</echo>
    </target>
    
    <target name="antlr" unless="antlr.uptodate">
        <java classname="org.antlr.Tool" classpathref="antlr.class.path" fork="true">
            <arg value="${antlr.src.dir}/${antlr.grammar}.g" />
        </java>
    </target>

    <target name="-pre-compile" depends="antlr" />

    <!-- Stuff dealing with adding coverage to JUnit execution -->

    <target name="coverage" description="Enables coverage for junit test targets">
        <property name="do.coverage" value="true"/>
    </target>
    
    <target name="cobertura-taskdefs">
        <taskdef classpathref="cobertura.class.path" resource="tasks.properties"/>
    </target>

    <target name="conditional-instrument" if="do.coverage" depends="cobertura-taskdefs">
        <mkdir dir="${build.instrumented.dir}"/>
        <cobertura-instrument todir="${build.instrumented.dir}">
            <fileset dir="${build.classes.dir}" includes="**/*.class"/>
            <classpath refid="cobertura.class.path"/>
        </cobertura-instrument>
    </target>

    <target name="conditional-clean-instrument" unless="do.coverage">
        <delete dir="${build.instrumented.dir}"/>
    </target>

    <target name="conditional-coverage-report" if="do.coverage" depends="cobertura-taskdefs">
        <mkdir dir="${dist.coverage.dir}"/>
        <cobertura-report srcdir="${src.classes.dir}" destdir="${dist.coverage.dir}">
            <classpath>
                <path location="${build.classes.dir}"/>
            </classpath>
        </cobertura-report>
        <cobertura-report format="xml" srcdir="${src.classes.dir}" destdir="${build.dir}"/>
    </target>

    <target name="-pre-test-hook" depends="conditional-instrument,conditional-clean-instrument">
        <mkdir dir="${build.test.results.dir}"/>
    </target>

    <target name="-post-test-hook" depends="conditional-coverage-report"/>

    <!-- End stuff dealing with adding coverage to JUnit execution -->

    <target name="-post-jar" description="Copy command wrappers to dest/bin directory.">
        <copy todir="dist/bin">
            <fileset dir="bin"/>
        </copy>
        <chmod dir="dist/bin" perm="755" includes="**/javafxc*"/>
    </target>
    
    <target name="-post-clean" description="Delete ANTLR-generated files">
        <delete dir="src/share/classes/com/sun/tools/javafx"
                includes="**/v2*.*" excludes="**/v2.g"/>
    </target>        

    <target name="spec" description="Build JavaFX Script specification.">
        <ant antfile="doc/build.xml" target="spec" inheritAll="false"/>
        <copy todir="dist/doc">
            <fileset dir="build/doc/html"/>
        </copy>
    </target>

    <target name="findbugs" depends="compile">
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
                 classpathref="findbugs.class.path" />
        <mkdir dir="${dist.findbugs.dir}"/>
        <findbugs output="xml" outputFile="${build.dir}/findbugs.xml" home="${findbugs.dir}" jvmargs="-Xmx512m"
                  excludeFilter="findbugs-exclude.xml">
            <class location="${build.classes.dir}"/>
            <auxclasspath path="${javac.classpath}"/>
            <sourcepath path="${src.classes.dir}"/>
        </findbugs>
        <exec executable="sh">
            <arg value="${findbugs.dir}/bin/convertXmlToText"/>
            <arg value="-longBugCodes"/>
            <arg value="-html:${findbugs.dir}/src/xsl/fancy.xsl"/>
            <arg value="${build.dir}/findbugs.xml"/>
            <redirector output="${dist.findbugs.dir}/findbugs.html"/>
        </exec>
    </target>

    <target name="svnstat">
        <mkdir dir="${dist.svnstat.dir}"/>
        <java classname="de.agentlab.svnstat.SvnStat" fork="true" classpathref="svnstat.class.path">
            <env key="PATH" path="${env.PATH}:${svn.path}" />
            <arg value="-r" />
            <arg value="${svn.repository}" />
            <arg value="-d" />
            <arg value="${dist.svnstat.dir}" />
        </java>
    </target>

    <!-- Runs only if export.dir is set, which should only be set from the continuous build.
         Publishes build results to ${export.dir}.
         Depends on Hudson environment params JOB_NAME and SVN_REVISION.
         Publishes result of findbugs analysis, where it can later be combined into
         a multi-version bug database. -->
    <target name="hudson" depends="init" if="export.dir">
        <property environment="env"/>
        <mkdir dir="${export.dir}/findbugs"/>
        <exec executable="sh">
            <arg value="${findbugs.dir}/bin/setBugDatabaseInfo"/>
            <arg value="-name"/>
            <arg value="${env.JOB_NAME}-${env.SVN_REVISION}"/>
            <arg value="${build.dir}/findbugs.xml"/>
            <redirector output="${export.dir}/findbugs/${env.JOB_NAME}-${env.SVN_REVISION}.xml"/>
        </exec>
        <delete dir="${export.dir}/docroot/current-build" />
        <copy todir="${export.dir}/docroot/current-build">
            <fileset dir="${dist.dir}"/>
        </copy>
    </target>

    <target depends="init,compile-test,-pre-test-run,-do-test-run,-post-test-hook" if="have.tests"
            name="-post-test-run">
        <!-- Don't explicitly call fail task, so Hudson reports an UNSTABLE build instead of FAILURE -->
    </target>

</project>
