<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">



<chapter id="types"><title>Variables and Basic Data Types</title>



<sect2 id="variable"><title>Variables</title>

<para>
As discussed in <ulink url="overview.html"><emphasis>Chapter 1</emphasis></ulink>, the <code>var</code> keyword is used to introduce a new variable into your program. 
A variable's type can be specified in its declaration, but doing so is optional. If a variable's type is omitted from the declaration, 
the type can be inferred from its use.</para>

<para>A variable declaration takes the following form:</para>

<programlisting>
var <emphasis>variableName : type = initializer;</emphasis>
</programlisting>

<para><emphasis role="bold">Examples: </emphasis></para>


<programlisting>
var num = 1; // inferred type 
var num : Number = 2;
var firstName = "John"; // inferred type
var lastName : String = "Doe";
</programlisting>



<para>
Variable naming conventions are identical to the conventions in the <trademark>Java</trademark> programming language. Classes should capitalize the first letter of each word (<code>MyClass</code>). Function names should begin in lowercase but capitalize the first letter of each subsequent word (<code>myFunctionName</code>. Constants should appear in all uppercase with words separated by the underscore character (<code>MY_CONSTANT</code>).</para>


<para>
Any sequence of characters (including white space) contained in double angle brackets 
&lt;&lt;&gt;&gt; is treated as an identifier. This enables the use of <trademark>JavaFX</trademark> Script programming language keywords (or other normally illegal identifiers) as class, variable, function, or attribute names.
</para>


<para><emphasis role="bold">Example:</emphasis></para>
<programlisting>
var &lt;&lt;delete&gt;&gt; = 100;
</programlisting>

<para>
This also makes it possible to invoke methods (written in the Java programming language) whose names are the same as JavaFX Script programming language keywords.
</para>

<programlisting>
import javax.swing.JTextArea;

var textArea = new JTextArea();
textArea.&lt;&lt;insert&gt;&gt;("Hello", 0);
</programlisting>


<para>
The lifetime of a variable is at least the lifetime of the containing block. </para>


</sect2>
<sect2 id="datatype"><title>Basic Data Types</title>

<para>The JavaFX Script programming language does not use the term
<emphasis>primitive types</emphasis>. Instead, the language defines five <emphasis>basic data types</emphasis>, which are always available to your application code. </para>

<para>The five basic data types map to the Java programming language as follows:</para>


<!-- ************** BEGIN DATA TYPES TABLE **************** -->
    
    <table class="data" border="0">
		 
<caption style="margin-bottom: 9pt;">Basic Types</caption>
		 
<tbody>
  <tr>
<th style="text-decoration: underline;">JavaFX Script Programming Language</th>

<th style="text-decoration: underline;">Java Programming Language</th>


 </tr>

 <tr>
<td>
  <code>String</code>
</td>
 
<td>
  <code>java.lang.String</code>
</td>


  </tr>  

  <tr>
<td>
  <code>Boolean</code>
</td>
		
		<td>
  <code>java.lang.Boolean</code>
</td>
		</tr>
		
		<tr>

<td><code>Number</code></td>

<td> <code>java.lang.Number</code> </td>
  </tr>

	  		<tr>

<td><code>Integer</code></td>

<td>
  <code>byte,short,int,long,BigInteger</code>
</td>
  </tr>
	  
	  <tr>

<td><code>Duration</code></td>

<td>
  <code>N/A</code>
</td>
  </tr>

</tbody>
  </table>
    
    
<!-- ****************** END DATA TYPES TABLE ******************************* -->




<para>
The first four data types should already be familiar to most developers 
  because they are frequently used in the Java programming language.  
The <code>Duration</code> type, however, 
 is a new specific to the JavaFX Script programming language. The <code>javafx.lang.Duration</code> class represents a unit of time 
(millisecond, second, minute, or hour.) The language also supports time literals, a shorthand for instantiating
the 
<code>Duration</code> class. </para>


<programlisting>
5ms; // 5 milliseconds
10s; // 10 seconds
30m; // 30 minutes
1h;  // 1 hour
</programlisting>

<para>
For the integral types, coercions are automatically performed when passing arguments or returning values to or from methods written in the Java programming language.
</para>

<para>
For character strings, you can specify a string literal using 
either single or double quotes:</para>


<programlisting>
var s1 = 'Hello';
var s2 = "Hello";
</programlisting>


<para> 
Single and double quotes are symmetrical: you can embed single quotes within double 
quotes, and double quotes within single quotes. You can also
embed expressions within either using curly braces "<code>{}</code>":
</para>

<programlisting>
var name = 'Joe';
var s = "Hello {name}"; // s = 'Hello Joe'
</programlisting>

<para>The embedded expression can itself contain quoted strings, which, in turn, can contain further embedded expressions:</para>

<programlisting>
var answer = true;
var s = "The answer is {if (answer) "Yes" else "No"}"; // s = 'The answer is Yes'
</programlisting>

<para>
Unlike the Java programming language, a JavaFX Script programming language String literal can contain newlines.
</para>

<para>
To concatenate Strings, use curly braces inside the quotes:
</para>

<programlisting>
import java.lang.System;

var one = "This example ";
var two = "demonstrates string concatenation.";
var three = "{one}{two}";
System.out.println(three);
</programlisting>

<para>You also can control how numbers and dates are converted to character 
strings by providing an additional formatting prefix in a string expression. 
 This additional formatting prefix follows the specification of <code>java.util.Formatter</code>:</para>



<programlisting>
import java.util.Date;

var hexStr = "hex of 13 is 0x{%02X 13}"; // hexStr = "hex of 13 is 0x0D"        
var date = new Date(107, 10, 11);
var dateStr = "{%tc date}" // dateStr = "Sun Nov 11 00:00:00 PST 2007"
</programlisting>

</sect2> </chapter>



