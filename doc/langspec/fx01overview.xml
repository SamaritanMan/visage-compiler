<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:mml="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook"
	 id="introduction">
  <title>Introducing the <trademark>JavaFX</trademark> Script Programming Language</title>

  <sect1 id="overview">
    <title>Overview</title>         
    
<!-- ************ API LINK ***************** -->
    
<!-- http://openjfx.java.sun.com/current-build/javadoc/  -->  
    
<!-- ************ API LINK ***************** -->

    <para>This chapter provides an overview of the <trademark>JavaFX</trademark> Script programming language. It describes -- at a high level -- its main features, saving detailed coverage of specific constructs for subsequent chapters. This book is intended for designers and de1velopers of rich Internet client applications and elements, which run in web pages, as Java Web Start software, or as traditional desktop applications. It assumes the reader to be familiar with JavaScript and/or the Java programming language. While this book does not define a formal language specification, it can be considered a complete reference for all currently supported language features.</para>

    <para>The JavaFX Script programming language:</para>

    <itemizedlist>
      <listitem> <para>Uses a declarative syntax for specifying Graphical User Interface (GUI) components, allowing a developer's code to closely match the actual layout of the GUI.</para> </listitem> 
      
      <listitem> <para>Uses declarative data binding and incremental evaluation, making it possible to easily create and configure individual components. Application data and GUI components are automatically synchronized.</para> </listitem>

      <listitem> <para>Is statically typed, having most of the same code structuring, reuse, and encapsulation features that make it possible to create and maintain very large programs in the Java programming language.</para>
      </listitem>

      <listitem>
        <para>Works with all major IDEs, including the NetBeans IDE, the reference implementation IDE for software development with the Java programming language.</para>
      </listitem>

      <listitem>
        <para>Is capable of supporting GUIs of any size or complexity.</para>
      </listitem>

      <listitem>
        <para>Makes it easier to use Swing.</para>
      </listitem>
      
  
    </itemizedlist>
    
<!-- ************ API LINK ***************** -->
    
<!-- http://openjfx.java.sun.com/current-build/javadoc/  -->  
    
<!-- ************ API LINK ***************** -->

    <para>The best way to learn any new language is to start programming in
    it. The following short tutorial illustrates GUI creation from object
    literals and easy data binding.</para>
  </sect1>

  <sect1 id="tutorial">
    <title>A Quick Tutorial</title>

    <para>This section presents a brief demo application that gathers a
    customer's contact information. Its GUI consists of simple text labels,
    text fields, and buttons. The JavaFX Script programming language is
    capable of generating sophisticated "flash-like" animations, but our goal
    in this section is only introduce you to the new language syntax; the
    layout is therefore intentionally kept basic. We will discuss GUI design
    recommendations in a separate document.</para>

   

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata fileref="figure1.png"></imagedata>
        </imageobject>
      </mediaobject>
    </screenshot>

    <para>Figure One: Customer Contact Information Screen<informalfigure>
   
      </informalfigure>Figure one shows the first screen of this application.
    The<code> javafx.u</code>i package provides a number of classes that
    encapsulate the standard Swing components; in this simple example we have
    instantiated the <code>Frame</code>, <code>SimpleLabel</code>,
    <code>TextField</code>, and <code>Button</code> classes. The syntax for
    <code>package</code> and <code>import</code> statements is the same as it
    is in the Java programming language:</para>



    <programlisting>package ch1demo;

import javafx.ui.Frame;
import javafx.ui.SimpleLabel;
import javafx.ui.TextField;
import javafx.ui.Button;
</programlisting>



    <para>Creating an object, however, is quite different. In the JavaFX
    Script programming language, the recommended way to instantiate a class is
    by using an <emphasis>object literal.</emphasis> The following code uses
    an object literal to instantiate the <code>javafx.ui.Frame</code> class,
    setting its title, width, height, and visibility:</para>

    
    <programlisting>// Create a Frame object
Frame {
    title: "Ch1 Demo"
    width: 300
    height: 250
    visible: true
}</programlisting>



    <para>If needed, the object reference can be assigned to a variable using
    the <code>var</code> keyword:</para>



    <para><programlisting>// Create a Frame object and assign it to variable myFrame
var myFrame = Frame {
    title: "Ch1 Demo"
    width: 300
    height: 250
    visible: true
}; // Note the use of semicolon when ending this statement</programlisting></para>

    <para>We say that <code>title</code>, <code>width</code>, <code>height</code>, and <code>visible</code> are all <emphasis>attributes</emphasis> of the <code>Frame</code> class. The attributes shown here accept basic type values 
    
    <!--  (TBD: provide link here to the section describing the basic types), 
    
    <emphasis><ulink
    url="http://openjfx.java.sun.com/current-build/javadoc/">Frame</ulink></emphasis>

    -->  
    
    but you can nest object literals if the expected type is something more complex. For example, many of the GUI classes contain an attribute called <code>"content" </code>whose type is <code>Widget</code> (the bass class of all <code>javafx.ui</code> GUI components.) It is possible to assign an instance of any <code>Widget</code> subclass to <code>content</code> using the same object literal syntax:</para>



    <para><programlisting>Frame {
    title: "Ch1 Demo"
    width: 300
    height: 250
    visible: true
    content: Label { // Create a Label
        text: "I am a Label added to the Frame."
    }
}</programlisting></para>

    <para>You will find that this pattern of nested object literals repeats over and over again. The API documentation for the <code>javafx.ui</code> package <!-- <emphasis role="bold">(TBD: insert hyperlink to the API docs for the javafx.* packages)</emphasis> 
    
    <emphasis><ulink
    url="http://openjfx.java.sun.com/current-build/javadoc/javafx.ui">javafx.ui</ulink></emphasis>
    -->
    makes it possible to determine the type of any attribute. As you might expect, lines of code can wrap according to your own programming style. The following lines of code are identical to the above:</para>



    <programlisting>Frame {
    title: "Ch1 Demo"
    width: 300
    height: 250
    visible: true
    content: Label{ text: "I am a Label added to the Frame." }
}

Frame {
    title: "Ch1 Demo"
    width: 300
    height: 250
    visible: true
    content: 
    Label { 
        text: "I am a Label added to the Frame."
    }
}
</programlisting>



    <para>The JavaFX Script programming language also supports easy data binding with the <code>bind</code> operator. <emphasis>Data binding</emphasis> makes it possible to express relationships between data that are automatically updated when items involved in the relationship change. </para>
    
    <para>For example, consider a scenario in which there is a <code>String</code> object called <code>firstName</code>, a <code>TextField</code> object called <code>firstNameTF</code>, and a <code>Label</code> object called <code>firstNameLabel</code> (the string variable holds the person's first name, the text field allows the user to enter their first name, and the label is how the GUI displays this name.) In traditional Swing programming, keeping these three objects in sync requires a certain amount of boilerplate model-view-controller (MVC) code:</para>



    <para><programlisting>// SWING EXAMPLE

// Declare Variables
private String firstName; // holds the name data; not a part of the GUI
private JTextField firstNameTF; // GUI text field; user enters data here to set the first name
private JLabel firstNameLabel;  // GUI label, diaplays first name; must be in sync with firstName string

...

// Register Action Listener
firstNameTF.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
       firstName = firstNameTF.getText();
       firstNameLabel.setText(firstName);       
    }
});


...</programlisting></para>



    <para>In this scenario the user enters a first name into the text field; a registered action listener detects this activity and sets the value of both the string and the label. But in a real application this code might become even more complex; it might, for example, use JavaBeans PropertyChangeEvents to notify other objects of any state change in the firstName string, requiring even more boilerplate event listener code. But in the JavaFX Script programming language, this is all accomplished with the <code>bind</code> operator:</para>



    <para><programlisting>// Easy data binding
var firstName = "";
var firstNameTF = TextField {value: bind firstName};
var firstNameLabel = SimpleLabel {text: bind firstName};</programlisting></para>



    <para>In three lines of code, the objects are now bound to each other.
    Typing a new value in the text field will change the value of the other
    two objects. Likewise, changing the value of the <code>firstName</code>
    string will also change the content of the text field and the label. We
    use this technique in the customer contact demo: the user enters their
    information into the text fields of screen #1; this sets the values of the
    internal <code>String</code> variables (<code>firstName</code>,
    <code>lastName</code> etc.); because the GUI text labels are also bound to
    those variables, each label will automatically display the correct text
    when the user arrives at the confirmation page: </para>

    <para><code></code></para>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata fileref="figure2.png"></imagedata>
        </imageobject>
      </mediaobject>
    </screenshot>

    <para><code> </code> Figure Two: Customer Contact Confirmation Page</para>

    

    <para>The following code listing shows the customer contact application in
    its entirety. Even with only this brief introduction to the language, you
    already know enough to understand this code.</para>

    <para><programlisting continuation="restarts">/*
 * Main.fx
 */

package ch1demo;

import javafx.ui.*;
import javafx.animation.*;
import java.lang.System;

////////////////////////
// State Information ///
////////////////////////
var firstName = "";
var lastName = "";
var streetAddress = "";
var city = "";
var state = "";
var zip = "";
var workPhone = "";
var homePhone = "";
var email = "";
var currScreen = 0;

function reset() {
    firstName = "";
    lastName = "";
    streetAddress = "";
    city = "";
    state = "";
    zip = "";
    workPhone = ""; 
    homePhone = ""; 
    email = "";
}

function submit() {
    currScreen=2;
    // Timeline to simulate database or web service submission
    var timer = Timeline { 
        keyFrames: KeyFrame { 
            time: 1s
            action: function() {
                reset();
                currScreen=0;
            }
        }
    };
    timer.start();
}

/////////////////////////////
// GUI SCREEN 1 /////////////
/////////////////////////////
var left = Alignment { name: "left" }
var screen1 = GridPanel {
    rows: 11
    columns: 1 
    cells: [
        FlowPanel { 
            content: SimpleLabel{ text: "Customer Contact Information", font: Font{size:14}},                          
        },
        FlowPanel { 
            content: [
                SimpleLabel{text:"First Name: "},
                TextField{columns:30, value: bind firstName with inverse}
            ],
            alignment: left 
        },
        FlowPanel { 
            content: [
                SimpleLabel{text:"Last Name: "},
                TextField{columns:30, value: bind lastName with inverse}
            ],
            alignment: left
        },                                               
        FlowPanel { 
            content: [
                SimpleLabel{text:"Street Address: "},  
                TextField{columns:30, value: bind streetAddress with inverse}
            ], 
            alignment: left 
        },
        FlowPanel { 
            content: [
                SimpleLabel{text:"City: "},
                TextField{columns:30, value: bind city with inverse}
            ],
            alignment: left
        },
        FlowPanel { 
            content: [
                SimpleLabel{text:"State: "},          
                TextField{columns:30, value: bind state with inverse}
            ],         
            alignment: left 
        },
        FlowPanel { 
            content: [
                SimpleLabel{text:"Zip Code: "},            
                TextField{columns:30, value: bind zip with inverse}
            ],           
            alignment: left 
        },
        FlowPanel { 
            content: [
                SimpleLabel{text:"Work Phone: "},      
                TextField{columns:30, value: bind workPhone with inverse}
            ],     
            alignment: left 
        },                              
        FlowPanel { 
            content: [
                SimpleLabel{text:"Home Phone: "},      
                TextField{columns:30 value: bind homePhone with inverse}
            ],     
            alignment: left 
        },
        FlowPanel { 
            content: [
                SimpleLabel{text:"Email: "},          
                TextField{columns:30 value: bind email with inverse}
            ],         
            alignment: left 
        },
        FlowPanel { 
            content: [
                Button {text:"Submit" action: function(){ currScreen = 1; } }, 
                Button {text:"Reset" action: function() { reset(); } }
            ]
        }
    ]
}

/////////////////////////////
// GUI SCREEN 2 /////////////
/////////////////////////////
                                
var screen2 = GridPanel {
    rows: 11 
    columns: 1 
    cells: [
        FlowPanel { content: SimpleLabel{text: "Confirmation Page" font: Font{size:14}} },
        FlowPanel { 
            content: [ 
                SimpleLabel{text:"First Name: "}, 
                SimpleLabel{ text: bind firstName } 
            ],
            alignment: left
        },
        FlowPanel {
            content: [ 
                SimpleLabel{text:"Last Name: "}, 
                SimpleLabel{ text: bind lastName } 
            ],
            alignment: left
        },
        FlowPanel {
            content: [ 
                SimpleLabel{text:"Street Address: "}, 
                SimpleLabel { text: bind streetAddress } 
            ],
            alignment: left
        },
        FlowPanel {
            content: [ 
                SimpleLabel{text:"City: "}, 
                SimpleLabel { text: bind city } 
            ],
            alignment: left
        },
        FlowPanel {
            content: [ 
                SimpleLabel{text:"State: "}, 
                SimpleLabel { text: bind state } 
            ],
            alignment: left
        },
        FlowPanel { 
            content: [ 
                SimpleLabel{text:"Zip Code: "}, 
                SimpleLabel{ text: bind zip } 
            ],
            alignment: left
        },                             
        FlowPanel { 
            content: [ 
                SimpleLabel{text:"Work Phone: "}, 
                SimpleLabel { text: bind workPhone } 
            ],
            alignment: left
        },
        FlowPanel { 
            content: [ 
                SimpleLabel{text:"Home Phone: "}, 
                SimpleLabel { text: bind homePhone } 
            ],
            alignment: left
        },                                                              
        FlowPanel { 
            content: [ 
                SimpleLabel{text:"Email: "}, 
                SimpleLabel { text: bind email } 
            ],
            alignment: left
        },
        FlowPanel {
            content: [
                Button {
                    text:"Submit" 
                    action: function() { submit(); }
                },
                Button { 
                    text: "Back" 
                    action: function() { currScreen = 0; }
                }
            ]
        }                 
    ]
};

var screen3 = FlowPanel { 
    content: SimpleLabel {
        font: Font { size:14 } 
        text:"Thank You!"
    }
};

// Application Frame
Frame {
    title: "Ch1 Demo"
    content: CardPanel {
        cards: [ screen1, screen2, screen3 ],
        selection: bind currScreen
    },
    visible: true
}</programlisting></para>
  </sect1>
</chapter>
