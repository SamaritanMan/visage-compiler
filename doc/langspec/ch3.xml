<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">



<chapter id="functions"><title>Member Variables and Functions</title>


<sect2 id="attribute"><title>Member Variables</title>

<para>Member variables define the state of an object. The are declared within a class definition using the <code>var</code> keyword followed by the variable's name, a colon (optional), the variable's type (optional) terminated with a semicolon. </para>


<programlisting>
var <emphasis>MemberVariableName</emphasis> : <emphasis>MemberVariableType </emphasis> ;
</programlisting>

<para>It is possible to declare default values for member variables (which can later be overridden by values provided in object literals.) The initializers are evaluated in the order the member variables are specified in the class declaration in the context of the newly created object: </para>

<programlisting>
import java.lang.System;

class X {
     var a: Number = 10;
     var b: Number = -1;
}

var x = X { };
System.out.println(x.a); // prints 10.0
System.out.println(x.b); // prints -1.0
</programlisting>


<para>
In the absence of explicit initialization, each variable is assigned a reasonable default:</para>

<programlisting>
import java.lang.System;

class DefaultValuesDemo {
     var a: Number;
     var b: Integer;
     var c: Boolean;
     var d: String;
}

var demo = DefaultValuesDemo {};
System.out.println("Default Value: {demo.a}");
System.out.println("Default Value: {demo.b}");
System.out.println("Default Value: {demo.c}");
System.out.println("Default Value: {demo.d}");
</programlisting>


<para>
The above prints the following default values to the screen. (Note: The last line prints an empty string.)
</para>
<programlisting>
Default Value: 0.0
Default Value: 0
Default Value: false
Default Value: 
</programlisting>


<para>Data types are covered in   

<ulink
    url="types.html"><emphasis>Chapter 4</emphasis></ulink>.
</para>

</sect2>

<sect2 id="function"><title>Member Functions</title>

<para>
Member functions define the behavior of an object. A member function takes the following form: </para>


<programlisting>
function <emphasis>name</emphasis> (<emphasis>parameterName</emphasis> : <emphasis>parameterType</emphasis>, ...): <emphasis>returnType body</emphasis>
</programlisting>

<para>where <emphasis>body</emphasis> can be any expression.</para>

<para>
Member functions are first-class objects (they can, for example, be assigned to variables, or passed as parameters to other functions.)</para>


<para>
Chapter one presented a simple example, defining a <code>grow</code> function 
 that accepts no arguments and returns no values:</para>


<programlisting>
...

function grow(): Void {
     grow(1);
}

...
</programlisting>

<para>It also provided an overloaded version that allowed the user to specify a particular amount: </para>

<programlisting>

...

function grow(amount: Integer): Void {
     width += amount;
     height += amount;
}

...
</programlisting>

<para>Functions can also be anonymous. Anonymous functions are often used to 
assign behavior to the <code>action</code> member variable of a GUI 
component:
</para>

<programlisting>

// in GUI 

...

action: function() {
     System.out.println("Click!");
}

...

</programlisting>

</sect2> </chapter>



