<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<?xml-stylesheet href="docbook.css" type="text/css"?>
<chapter id="StringLiterals">
<title>String Literals</title>
<para>
A String literal evaluates to a <classname>String</classname> value.  It is written with
single or double quotes.  If it is written with single quotes, then
a double quote can be included without quoting it, and vice versa.</para>
<productionset>
<production xml:id="syntax.StringLiteral">
<lhs>StringLiteral</lhs>
<rhs>
         <quote><code>"</code></quote> (<nonterminal def="#syntax.StringContent">StringContent</nonterminal>|"<code>'</code>")* '<code>"</code>'
       | <code>"'"</code> (<nonterminal def="#syntax.StringContent">StringContent</nonterminal>|<code>'""</code>)* <code>"'"</code>
</rhs>
</production>
<production xml:id="syntax.StringContent">
<lhs>StringContent</lhs>
<rhs>
         <code>StringCharacter</code>
       | <nonterminal def="#syntax.LineSeparator">LineSeparator</nonterminal>
       | <nonterminal>EscapeSequence</nonterminal>
       | "{" <nonterminal def="#syntax.EnclosedExpression">EnclosedExpression</nonterminal> }"
       | <code>"{"</code> <nonterminal def="#syntax.FormatSpecifier">FormatSpecifier</nonterminal> [Space+ <nonterminal def="#syntax.EnclosedExpression">EnclosedExpression</nonterminal>]<code>"}"</code>
</rhs>
</production>
<production xml:id="syntax.EnclosedExpression">
<lhs>EnclosedExpression</lhs>
<rhs>Expression</rhs>
</production>
<production xml:id="syntax.FormatSpecifier">
<lhs>FormatSpecifier</lhs>
<rhs>"%"argument_index"$"][flags][width]\
            ["."precision]ConversionCharacter</rhs>
</production>
<production xml:id="syntax.LineSeparator">
<lhs>LineSeparator</lhs>
<rhs>CR | LF | CR LF | LS</rhs>
</production>
</productionset>
<para>
A <nonterminal def="#syntax.StringLiteral">StringLiteral</nonterminal> is first translated to a format string, then that
format string is optionally used as a key for localization.  If a
translation for the format string exists (using Resources or other
mechanisms to be determined later), that yields a localized
format string, otherwise the untranslated format string is used as
an EffectiveFormatString.</para>
<para>
The value of the <code>StringLiteral</code> is defined as the result of
the Java expression:</para>
<programlisting>
String.format(EffectiveFormatString [, EnclosedExpression]*)
</programlisting>
<para>where any <nonterminal def="#syntax.EnclosedExpression">EnclosedExpression</nonterminal> in the <code>StringLiteral</code> becomes an
argument to <code>String.format</code>.</para>
<para>
A StringCharacter is any Java RawInputCharacter, except for
'"', '\'', '{', '}' or a LineSeparator, or
an EscapeSequence (which starts with '\\').
It becomes the same character in the format string,
except that '%' is quoted to yield '%%'.</para>
<para>
A <nonterminal def="#syntax.LineSeparator">LineSeparator</nonterminal> appends
<code>'%n'</code> to the format
string.  This effectively (assuming no change during localization)
adds <code>System.getProperty("line.separator")</code> to the result string
(using the run-time, not compile-time, <code>line.separator</code>).</para>
<para>
An EscapeSequence is as in Java, with the following additions:
  <code>\{</code>    is replaced by <code>'{'</code> in the format string.
  <code>\}</code>    is replaced by <code>'}'</code> in the format string.
  <code>\</code> followed by optional horizontal whitespace, followed by
    a LineSeparator, followed by optional horizontal whitespace
    is replaced by nothing.
(Note the latter might also be done by an earlier phase, so it
works outside string literals.)</para>
<para>
(Handling of Unicode escapes is presumably done by an
earlier pass.  However, we should add support for characters
that are outside the Basic 16-bit plane, perhaps using a \U
escape sequence, analogous to \u escape sequences.  We defer
this issue for now.)</para>
<para>
The content
    "{" FormatSpecifier [Space+ EnclosedExpression]"}"
adds
    FormatSpecifier
to the format string.</para>
<para>
The content</para>
<programlisting>
"{" EnclosedExpression "}"
</programlisting>
<para>is equivalent to:</para>
<programlisting>
"{%s " EnclosedExpression "}"
</programlisting>
<para>and therefore adds <code>"%s"</code> to the format string. 
</para>
</chapter>
