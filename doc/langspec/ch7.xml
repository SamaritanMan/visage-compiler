<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="comprehensions"><title>Using Sequences</title>

<sect2 id="iterate"><title>Sequence Iteration With <code>for</code></title>



<para>The <trademark>JavaFX</trademark> Script programming language supports sequence comprehensions with the <code>for</code> operator. A sequence comprehension consists of one or more input sequences, an optional filter, and an expression. Each input sequence is associated with a variable. The result of the sequence comprehension is a new sequence which is the
result of applying the expression to the combination of the source
sequences' elements that satisfy the filter.
</para>

<para>
The following program demonstrates this syntax,  using the <code>for</code> operator to identify the title tracks in a list of albums:</para>

<programlisting>

class Album {
     var title: String;
     var artist: String;
     var tracks: String[];
}

var albums =
     [Album {
          title: "A Hard Day's Night"
          artist: "The Beatles"
          tracks:
               ["A Hard Day's Night",
                "I Should Have Known Better",
                "If I Fell",
                "I'm Happy Just To Dance With You",
                "And I Love Her",
                "Tell Me Why",
                "Can't Buy Me Love",
                "Any Time At All",
                "I'll Cry Instead",
                "Things We Said Today",
                "When I Get Home",
                "You Can't Do That"]
     },
     Album {
          title: "Circle Of Love"
          artist: "Steve Miller Band"
          tracks:
               ["Heart Like A Wheel",
                "Get On Home",
                "Baby Wanna Dance",
                "Circle Of Love",
                "Macho City"]
     }];


for (album in albums, track in album.tracks)  {
    if (album.title == track)
        java.lang.System.out.println("TITLE TRACK = {track}")
    else
        java.lang.System.out.println("Track = {track}")
  } 
    

</programlisting>

<para><emphasis role="bold">Output:</emphasis></para>

<programlisting>
TITLE TRACK = A Hard Day's Night
Track = I Should Have Known Better
Track = If I Fell
Track = I'm Happy Just To Dance With You
Track = And I Love Her
Track = Tell Me Why
Track = Can't Buy Me Love
Track = Any Time At All
Track = I'll Cry Instead
Track = Things We Said Today
Track = When I Get Home
Track = You Can't Do That
Track = Heart Like A Wheel
Track = Get On Home
Track = Baby Wanna Dance
TITLE TRACK = Circle Of Love
Track = Macho City
</programlisting>


<para>
Here is another example that uses a filter. This example defines a function that takes a number and returns a list of all its factors:
</para>


<programlisting>
function factors(n:Number) {
     return for (i in [1 .. n/2] where n mod i == 0) i;
}
</programlisting>

<para>Within a for-comprehension, the <code>indexof</code> operator can be used; its syntax is <code>indexof <emphasis>name</emphasis>  </code> where <emphasis>name</emphasis> is the name of an iteration variable. The value is the "index" of the iteration within in the base sequence.</para>

<!-- delete for now 
<programlisting role="red">
TBD: CODE SAMPLE
</programlisting>-->

<para>The <emphasis>indexof</emphasis> operator can also be used in sequence selection, as shown in the following example: </para>

<programlisting>
var nums = [1..5];
var numsExceptTheFirstTwo = nums[n|indexof n > 1]; // returns 3,4,5
</programlisting>


</sect2>  

<sect2 id="specifier"><title>Modifying Sequence Variables</title>

<!-- <para>
In addition to the <code>for</code> operator shown above, 
the following <emphasis>sequence comprehension specifiers</emphasis> provide a convenient and simple mechanism for accessing or modifying 
the elements of a sequence:
</para> -->

<para>
<code>insert</code> inserts a new element into a sequence:
</para>

<programlisting>
insert x into seq
insert x before seq[idx]
insert x after seq[idx]
</programlisting>


<para>
<code>delete</code> removes an element from a sequence:
</para>

<programlisting>
delete seq
delete x from seq
delete seq[idx]
delete seq[a..b] // and all other slice forms  
<!--  a..&gt;b a.. -->
</programlisting>

<!--
<para>
<code>sizeof</code> returns the number of elements in a sequence:
</para>

<programlisting>
sizeof seq
</programlisting>



<para>
<code>indexof</code> returns the ordinal position of an element within a sequence:
</para>

<programlisting>
indexof seq[idx]
</programlisting>


<para>
<code>reverse</code> reverses the sequence:
</para>

<programlisting>
reverse seq
</programlisting>
-->

<para>The following code provides examples of both inserting and deleting
 elements:</para>

<programlisting>
// INSERT EXAMPLES

var nums = [1..5];
var x = 6;
insert x into nums; // result is [1,2,3,4,5,6]
x++;
insert x before nums[0]; // result is [7,1,2,3,4,5,6]
x++;
insert x after nums[3]; // result is [7,1,2,3,8,4,5,6]

// DELETE EXAMPLES

nums = [1..5];
delete 2 from nums; // result is [1,3,4,5]
delete nums[0];// result is [3,4,5]
nums = [1..10]; // result is [1,2,3,4,5,6,7,8,9,10]
delete nums[3..7]; // result is [1,2,3,9,10]
delete nums; // result is []
nums = [1..10];
delete nums[5..]; // result is [1,2,3,4,5]
delete nums[0..&gt;]; // result is [5]

<!--

// SIZEOF EXAMPLES 

nums = [1..5];
sizeof nums; // returns 5

// INDEXOF EXAMPLES

nums = [1..5];
var numsExceptTheFirstTwo = nums[n|indexof n > 1]; // returns 3,4,5

// REVERSE EXAMPLES 

nums = [1..5];
reverse nums; // returns 5,4,3,2,1 
-->
</programlisting>

<para>
Elements of a sequence also can be reversed:
</para>

<programlisting>
var nums = [1..5];
reverse nums; // returns 5,4,3,2,1
</programlisting>

</sect2>

</chapter>



