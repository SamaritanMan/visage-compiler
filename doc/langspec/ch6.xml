<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">




<chapter id="sequences"><title>Declaring Sequences</title>


<para>In addition to the five basic types previously described, the 
<trademark>JavaFX</trademark> Script programming language also provides  data structures known as <emphasis>sequences</emphasis>. Sequences are similar to Java programming language arrays, but some differences are notable. 

</para>

<para>
The following code presents some examples:
</para>


<programlisting>
var weekDays = ["Mon","Tue","Wed","Thur","Fri"];
var days = [weekDays, ["Sat","Sun"]];
</programlisting>

<para>Sequences represent ordered lists of objects. Sequences are not themselves objects, however, and do not nest. Sequences are compared for equality by value. If their lengths are equal and their elements are equal, they are equal. Expressions that produce nested sequences (like the previous initialization of <code>days</code>) are automatically flattened.
</para>

<programlisting>

days == ["Mon","Tue","Wed","Thur","Fri","Sat","Sun"]; // returns true
</programlisting>

<para>
In addition, a single object is equal to a sequence of one object:</para>

<programlisting>
1 == [1]; // returns true
</programlisting>


<para>
Sequence types are declared with the <code>[]</code> annotation:
</para>


<programlisting>
var xs:Number[]; // sequence of Number
var strs:String[]; // sequence of String
</programlisting>

<para>
The elements of a sequence must have a common type, which might be <code>Object</code>. Sequences can be indexed like Java programming language arrays:
</para>


<programlisting>

var wednesday = days[2];
</programlisting>


<para>
Also a shorthand notation uses ".." for sequences that contain elements forming an arithmetic series, for example:
</para>


<programlisting>
var nums = [1..100];
</programlisting>


<para>
This shorthand eliminates the need to type out each element manually.
</para>

<para>The <code>[]</code> operator also expresses selection in the 
form of predicates. Predicates take the following form:</para>


<programlisting>
sequence[variableName| booleanExp]
</programlisting>


<para><emphasis role="bold">Example:</emphasis></para>

<programlisting>
var nums = [1,2,3,4];
var numsGreaterThanTwo = nums[n|n > 2];
</programlisting>

<para>
This type of expression returns a new sequence consisting of those elements of the original sequence that satisfy the predicate.
</para>

<para>Finally, sequence <emphasis>slices</emphasis> provide access to portions of a sequence:</para>

<programlisting>
seq[a..b]  // the sequence between the indexes a and b inclusive
seq[a..&lt;b] // the sequence between the indexes a inclusive and b exclusive
seq[a..]  // same as seq[a..&lt;sizeof seq]
seq[a..&lt;] // for consistancy.  This is the same as seq[a..&lt;sizeof seq-1] 
</programlisting>

<para>You can access and/or modify a sequence or sequence slice in many different ways, as described in the next chapter.</para>
 

</chapter>




