<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="overview">
  <title>Language Overview</title>

  <para>This chapter provides an overview of the <trademark>JavaFX</trademark>
  Script programming language. At a high level, this chapter describes the
  programming language's main features, saving detailed coverage of specific
  constructs for subsequent chapters. This book is intended for designers and
  developers of rich Internet client applications and elements, that run in
  web pages, as <trademark>Java</trademark> Web Start software, or as
  traditional desktop applications. Its content assumes the reader is familiar
  with either the JavaScript or <trademark>Java</trademark> programming
  language, or both. While this document does not define a formal language
  specification, it can be considered a complete reference for all currently
  supported language features.</para>

  <para>The JavaFX Script programming language has the following
  distinctions:</para>

  <itemizedlist>
    <listitem>Uses a declarative syntax for specifying Graphical User
    Interface (GUI) components, enabling a developer's code to closely match
    the actual layout of the GUI.</listitem>

    <listitem>Uses declarative data binding and incremental evaluation,
    enabling easy creation and configuration of individual components.
    Application data and GUI components are automatically
    synchronized.</listitem>

    <listitem>Is statically typed, having most of the same code structuring,
    reuse, and encapsulation features that enable creating and maintaining
    very large programs in the Java programming language.</listitem>

    <listitem>Is capable of supporting GUIs of any size or
    complexity.</listitem>

    <listitem>Makes it easier to use Swing.</listitem>
  </itemizedlist>

  <para>The following sections present a quick tour of the JavaFX Script
  programming language. These sections provide a general introduction to its
  core syntax and capabilities, comparing and contrasting to the Java
  programming language where appropriate. Each topic is then covered in
  greater detail in subsequent chapters.</para>

  <sect3 id="scripts">
    <title>Scripts</title>

    <para>In the JavaFX Script programming language, a "script" is one or more
    declarations or expressions. Evaluating the script evaluates the
    declarations or expressions, in order:</para>

    <programlisting>var ten : Integer = 10;
java.lang.System.out.println("Twice {ten} is {2 * ten}.");   </programlisting>

    <para>This prints out:</para>

    <programlisting>Twice 10 is 20.</programlisting>

    <para>Unlike an application written in the Java programming language, a
    script need not contain any class definitions or functions.</para>
  </sect3>

  <sect3 id="classes">
    <title>Classes</title>

    <para>Class definitions share many similarities with the Java programming
    language, but some differences are notable.


    The following example defines a simple <code>Rectangle</code> class:
    </para>

    <programlisting>class Rectangle {
     
     def sides: Integer = 4;
     var width: Integer;
     var height: Integer;

     function grow(): Void {
          grow(1);
     }

     function grow(amount: Integer): Void {
          width += amount;
          height += amount;
     }

}
</programlisting>


    <para>Classes are covered in detail in <ulink url="classintro.html">
        <emphasis>Chapter 2</emphasis>
      </ulink></para>

    <para>Instance variables and functions are covered in detail in <ulink
        url="functions.html">
        <emphasis>Chapter 3</emphasis>
      </ulink></para>
  </sect3>

  <sect3 id="objects">
    <title>Objects</title>

    <para><emphasis>Object literals</emphasis> provide a simple syntax for
    class instantiation. The following code creates a single instance of the
    <code>Rectangle</code> class defined previously, initializing its
    <code>width</code> and <code>height</code> instance variables to <code>100</code>.
    (Note that <code>new</code> is not needed.)</para>

    <programlisting>Rectangle {

     width: 100
     height: 100

}</programlisting>

    <para>Used in this context, the <code>var</code>
    keyword can also be used to store a reference to the newly created object:</para>

    <programlisting>var myRect = Rectangle {
     
     width: 100
     height: 100
}</programlisting>

    <para>Objects are covered in detail in <ulink url="classintro.html">
        <emphasis>Chapter 2</emphasis>
      </ulink>.</para>

    <para>Variables and basic data types are covered in detail in <ulink
        url="types.html">
        <emphasis>Chapter 4</emphasis>
      </ulink></para>
  </sect3>

  <sect3 id="expressions">
    <title>Expressions and Operators</title>

    <para>Like other programming languages, the JavaFX Script programming
    language supports expressions and operators.</para>

    <para><ulink url="expressions.html">
        <emphasis>Chapter 5</emphasis>
      </ulink> discusses the expressions and operators available in the JavaFX
    Script programming language.</para>
  </sect3>

  <sect3 id="sequences">
    <title>Sequences</title>

    <para>A <emphasis>sequence</emphasis> holds an ordered list of objects.
    This is roughly analogous to Java programming language arrays. Both hold
    multiple values and are accessed by index starting at 0.</para>

    <programlisting>var week = ["Monday","Tuesday","Wednesday","Thursday",
                  "Friday","Saturday","Sunday"];
var mon = week[0];
var wed = week[2];
var fri = week[4];
</programlisting>

    <para>Sequence <emphasis>slices</emphasis> are also supported:</para>

    <programlisting>var week = ["Monday","Tuesday","Wednesday","Thursday",
                  "Friday","Saturday","Sunday"];
var weekdays = week[0..4]; // first slice
var weekend = week[5..6]; // second slice
</programlisting>

    <para><ulink url="sequences.html">
        <emphasis>Chapter 6</emphasis>
      </ulink> covers the basics of declaring sequences, while <ulink
        url="comprehensions.html">
        <emphasis>Chapter 7</emphasis>
      </ulink> focuses on <emphasis>using</emphasis> them.</para>
  </sect3>

  <sect3 id="databinding">
    <title>Data Binding</title>

    <para><emphasis>Data binding</emphasis> provides a simple syntax for
    synchronizing the state of multiple objects. When two objects are
    <emphasis>bound</emphasis>, the second object's value
    automatically changes whenever the first object is updated. A common use
    of data binding is to keep GUI components synchronized with their
    underlying data.</para>

    <programlisting>import javafx.application.Frame;
import javafx.application.Stage;
import javafx.scene.text.Text;

var myString = "Hello World!";

Frame {
     width: 50
     height: 50
     visible: true
     stage: Stage {
          content: Text {
               content: bind myString
          }
     }
}

// If some other part of code changes myString
// then the GUI's text will automatically change
// as well.
</programlisting>

    <para>Data Binding is covered in detail in <ulink url="binding.html">
        <emphasis>Chapter 8</emphasis>
      </ulink>.</para>
  </sect3>

  <sect3 id="triggers">
    <title>Triggers</title>

    <para><emphasis>Triggers</emphasis> are blocks of code that run when
    certain conditions are true. For example, you may want to be alerted if an
    variable's value has been set to something that is inappropriate. The
    following example shows the basic trigger syntax:</para>

    <programlisting>import java.lang.System;

ReplaceDemo {
     
     mySensitiveData: "Will anyone notice?"

}

class ReplaceDemo {
     var mySensitiveData: String
          on replace {
               System.out.println("I noticed a change!");                      
          };
}
</programlisting>

    <para>Triggers are covered in detail in <ulink url="triggers.html">
        <emphasis>Chapter 9</emphasis>
      </ulink>.</para>
  </sect3>
</chapter>
