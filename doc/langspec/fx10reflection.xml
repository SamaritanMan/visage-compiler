<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<?xml-stylesheet href="docbook.css" type="text/css"?>
<chapter id="Reflection">
<title>Reflection</title>


<sect1 id="reflect">
<title>Reflection Overview</title>


<sect1 id="refintro"><title>Reflection Introduction</title>
<para>
<emphasis>
This Chapter will list and explain JavaFX Script exception handling. 
</emphasis>

</para>


<sect2 id="rquestions"><title>Questions</title>
<para>
<emphasis>
We need a complete briefing that covers the way JavaFX handles exceptions, how JFX handles Java exceptions, and what the keywords syntactical forms and programming mechanisms are.  
</emphasis>

</para></sect2>
</sect1>


<sect1 id="refl">
              <title>Reflection</title>

              <para>JavaFX classes, attributes, and operations are reflected
              as follows:</para>
	      
	      </sect1>

              <programlisting>        public class Class {
            public attribute Name: String;
            public attribute Documentation:String?;
            public attribute Superclasses: Class* inverse Class.Subclasses;
            public attribute Subclasses: Class* inverse Class.Superclasses;
            public attribute Attributes: Attribute* inverse Attribute.Scope;
            public attribute Operations: Operation* inverse Operation.Target;
            public function instantiate();
        }

        public class Operation extends Class {
            public attribute Target: Class? inverse Class.Operations;
        }

        public class Attribute {
            public attribute Name: String;
            public attribute Documentation: String?;
            public attribute Scope: Class? inverse Class.Attributes;
            public attribute Type: Class?;
            public attribute Inverse: Attribute* inverse Attribute.Inverse;
            public attribute OneToOne: Boolean;
            public attribute ManyToOne: Boolean;
            public attribute OneToMany: Boolean;
            public attribute ManyToMany: Boolean;
            public attribute Optional: Boolean;
        }
</programlisting>

              <para>JavaFX supports reflective access to classes, attributes,
              and member functions and operations, through the
              <code>class</code> operator, for example:</para>

              <programlisting>        import java.lang.System;

        System.out.println(1.class.Name) // prints "Number"

        System.out.println("Hello".class.Name); // prints "String"

        class X {
            attribute a: Number;
        }
        var x = new X();
        System.out.println(x.class.Name); // prints "X"
        System.out.println(sizeof x.class.Attributes); // prints 1
        System.out.println(x.class.Attributes[0].Name); // prints "a"</programlisting>

              <para>Reflective access to the <emphasis>value</emphasis> of an
              attribute is provided by the <code>[]</code> operator when its
              operand is of type <code>Attribute</code>, for example</para>

              <programlisting>        import java.lang.System;

        class X {
            attribute a: Number;
        }
        var x = new X();
        x.a = 2;
        System.out.println(x[x.class.Attributes[Name == 'a']]); // prints 2
        // the above statement is equivalent to this non-reflective code:
        System.out.println(x.a);
</programlisting>

              <para>In JavaFX, the member functions and operations of a class
              are themselves modeled as classes in which the target class,
              formal parameters, and return value are represented as
              attributes. The name of the attribute representing the target
              object is 'this'. The name of the attribute representing the
              return value is 'return'. The attributes representing the formal
              parameters have the same names as the formal parameters.</para>

              <para>You obtain such reflected operations from the
              <code>Class</code> object.</para>

              <para>Reflected JavaFX operations can be called like functions
              by passing the target object as the first argument and any
              parameters as subsequent arguments, e.g:</para>

              <programlisting>        import java.lang.System;

        class X {
            operation foo(n: Number): Number;
        }

        var x = new X();
        var op = x.class.Operations[Name == 'foo'];
        System.out.println(op(x, 100));

        // the above code is equivalent to the following non-reflective code:
        System.out.println(x.foo(100));
</programlisting>

              <para>Currently, the bean properties and public fields of Java
              classes are reflected as JavaFX attributes. However, Java
              methods are not reflected as JavaFX operations. If you want to
              call a Java method reflectively you can simply use the normal
              Java API's.</para>

              <para>Note that, unlike Java, in JavaFX the <code>class</code>
              operator is applied to an expression rather than to a type name.
              JavaFX supports the following syntax to obtain the reflected
              class object from a type name:</para>

              <programlisting>           :<emphasis>TypeName</emphasis>
</programlisting>

              <para>For example:</para>

              <programlisting>           import java.lang.System;
           System.out.println(:System.Name); // prints "java.lang.System"
           System.out.println(:System.class.Name); // prints "Class"
</programlisting>
           
</sect1>



</chapter> 
