<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter>
  <title>Operators and Expressions</title>

  <section>
    <title>Operators</title>

    <para></para>

    <para>JavaFX script supports the following operators:</para>

    <para></para>

    <para><emphasis role="bold">[TO-DO: Copy the big operators chart
    here]</emphasis></para>

    <para><emphasis></emphasis></para>

    <para>Examples:</para>

    <para></para>

    <programlisting>import java.lang.System;
import java.lang.Math;

var x = 2;
var y = 4;
var a = true;
var b = false;
System.out.println(x == y);  // prints false
System.out.println(x &lt;&gt; y);  // prints false
System.out.println(x &lt; y);   // prints true
System.out.println(x &gt; y);   // prints true
System.out.println(x &gt;= y);  // prints false
System.out.println(x &lt;= y);  // prints true
System.out.println(x + y);   // prints  6
System.out.println(x - y);   // prints  -2
System.out.println(x * y);   // prints  8
System.out.println(x / y);   // prints  0 
System.out.println(x % y);   // prints  2
System.out.println(a and b); // prints  false
System.out.println(a or b);  // prints  true
System.out.println(not a);   // prints  false
System.out.println(sizeof [x,y]);   // prints  2
System.out.println([x,y][e | indexof e == 0]);   // prints  2
System.out.println(if (a) x else y); // prints 2
System.out.println(for(q in [x, y] where q &lt; 3) q); // prints 2
System.out.println(Math.max(x, y)); // prints 4
System.out.println("abc".toUpperCase()); // prints ABC
<!--
System.out.println(x instanceof Number); // prints true
x = 10;  -->
System.out.println(x); // prints 10
</programlisting>

    <para></para>

    <para><emphasis role="bold">Bind </emphasis></para>

    <para></para>

    <para>JavaFX script supports dependency-based evaluation of expressions
    with the bind keyword.</para>

    <para></para>

    <para><emphasis role="bold">TO-DO: This section may move to its own
    chapter (JFXC-448.) Is bind an operator or just a
    keyword?</emphasis></para>

    <para></para>

    <para>For example:</para>

    <para></para>

    <programlisting>var x = 100;
var y = bind x + 100;
x = 50;
y == 150; // true
</programlisting>

    <para></para>

    <para>Whenever the inputs to a bound expression are updated, the result is
    recalculated and automatically updated. In the above example whenever
    <code>x</code> is updated, <code>y</code> is correspondingly updated
    according to the expression given.</para>

    <para></para>

    <para>Binding is one of JavaFX script's main distinguishing features that
    makes it possible to express complex dynamic data relationships.</para>

    <para></para>

    <para>Any expression of any complexity may be bound - including
    conditionals, loops, blocks, function calls, and even calls to methods and
    constructors written in the Java programming language.</para>

    <para></para>

    <para>For example:</para>

    <para></para>

    <programlisting>import java.lang.Math;

var a = 0;
var x = bind Math.cos(Math.toRadians(a));
println(x); // prints 1.0
a = 180;
println(x); // prints -1.0;
</programlisting>

    <para></para>

    <para><emphasis role="bold">Querying Sequences with
    foreach</emphasis></para>

    <para>[TO-DO: Make above a section heading]</para>

    <para></para>

    <para>JavaFX script supports sequence comprehensions with a familiar
    syntax that should be easily understood by those familiar with the Java
    programming language, namely the <code>foreach</code> operator.<emphasis
    role="bold"></emphasis></para>

    <para><emphasis></emphasis></para>

    <para>Here is an example:</para>

    <para><emphasis></emphasis><programlisting>class Album {
     attribute title: String;
     attribute artist: String;
     attribute tracks: String*;
}

var albums =
[Album {
     title: "A Hard Day's Night"
     artist: "The Beatles"
     tracks:
     ["A Hard Day's Night",
      "I Should Have Known Better",
      "If I Fell",
      "I'm Happy Just To Dance With You",
      "And I Love Her",
      "Tell Me Why",
      "Can't Buy Me Love",
      "Any Time At All",
      "I'll Cry Instead",
      "Things We Said Today",
      "When I Get Home",
       "You Can't Do That"]
     },
     Album {
          title: "Circle Of Love"
          artist: "Steve Miller Band"
          tracks:
          ["Heart Like A Wheel",
           "Get On Home",
           "Baby Wanna Dance",
           "Circle Of Love",
           "Macho City"]
     }];

     // Get the track numbers of the albums' title tracks

     titleTracks =
          foreach (album in albums,
                    track in album.tracks
                        where track == album.title)
               indexof track + 1;  // yields [1,4]
</programlisting></para>

    <para><emphasis></emphasis></para>

    <para>A sequence comprehension consists of one or more input sequences, an
    optional filter, and an expression. Each input sequence is associated with
    a variable. The result of the sequence comprehension is a new sequence
    which is the result of applying the expression to the subset of the
    cartesian product of the source sequences' elements that satisfy the
    filter.</para>

    <para><emphasis></emphasis></para>

    <para>Sequence comprehensions give a concise syntax for a rather general
    class of iterations over sequences.<emphasis></emphasis></para>

    <para><emphasis></emphasis></para>

    <para>Another simple example of a sequence comprehension is:</para>

    <para><emphasis></emphasis><programlisting>foreach (n in [1..100]) n * n</programlisting></para>

    <para><emphasis></emphasis></para>

    <para>This is a sequence containing (in order) the squares of all the
    numbers from 1 to 100. Note that "n" is a local variable of the above
    expression.</para>

    <para><emphasis></emphasis></para>

    <para>The use of a filter is shown by the following definition of a
    function which takes a number and returns a list of all its
    factors:</para>

    <para><emphasis></emphasis><programlisting>function factors(n:Number) {
     return foreach (i in [1 .. n/2] where n % i == 0) i;
}
</programlisting></para>

    <para><emphasis role="bold"></emphasis></para>

    <para><emphasis role="bold">Modifying Sequences with insert and
    delete</emphasis></para>

    <para>[TO-DO: make above a section heading]</para>

    <para></para>

    <para>In addition to the assignment operator <code>=</code>, JavaFX script
    provides data modification operators, <code>insert</code> and
    <code>delete</code>.</para>

    <para></para>

    <para><emphasis role="bold">Insert Operator</emphasis></para>

    <para></para>

    <para>The <code>insert</code> operator can take any of the following
    forms:</para>

    <para></para>

    <programlisting>insert Expression1 [as first | as last] into Expression2
insert Expression1 before Expression2
insert Expression1 after Expression2
</programlisting>

    <para></para>

    <para>The <code>insert</code> operator inserts the items returned by
    evaluating Expression1 into the location indicated by remainder of the
    statement as follows:</para>

    <para></para>

    <para><emphasis role="bold">into</emphasis></para>

    <para></para>

    <para>Expression2 must refer to an attribute or variable. If Expression2
    refers to a single valued attribute then the effect of the insert is the
    same as if the assignment operator were used.</para>

    <para></para>

    <para>If <code>as first</code> is specified, the insertion location is
    before the first element of the list indicated by Expression2. If <code>as
    last</code> is specified, the insertion location is after the last element
    of the list indicated by Expression2. If neither <code>as first</code> nor
    <code>as last</code> is specified explicitly, then <code>as last</code> is
    used as the default.</para>

    <para></para>

    <para>Examples:</para>

    <para></para>

    <programlisting>var x = [1,2,3];
insert 12 into x; // yields [1,2,3,12]
insert 10 as first into x; // yields [10,1,2,3,12]
insert [99,100] as last into x; // yields [10,1,2,3,12,99,100]
</programlisting>

    <para></para>

    <para><emphasis role="bold">before, after</emphasis></para>

    <para></para>

    <para>Expression2 must be a selection expression over an attribute or
    variable. If <code>before</code> is specified, the insertion location is
    before the selected elements. If <code>after</code> is specified the
    insertion location is after the selected elements.</para>

    <para></para>

    <para>Examples:</para>

    <para></para>

    <programlisting>var xs = [1,2,3];
insert 10 after xs[x | x == 10]; // yields [1,2,3,10]
insert 12 before xs[1]; // yields [1,12,2,3,10]
insert 13 after xs[x | x == 2]; // yields [1, 12, 2, 13, 3, 10];
</programlisting>

    <para></para>

    <para><emphasis role="bold">Delete Operator</emphasis></para>

    <para>[TO-DO: Make above a section header]</para>

    <para></para>

    <para>The <code>delete</code> operator takes one of the following
    forms:</para>

    <para></para>

    <programlisting>delete variable
delete Expression.attribute
delete variable[predicate]
delete Expression.attribute[predicate]
</programlisting>

    <para></para>

    <para>The first two forms remove all elements from a variable or attribute
    - which is equivalent to assigning <code>[]</code> or <code>null</code> to
    the variable or attribute. The latter two forms remove only those elements
    that match the predicate.</para>

    <para></para>

    <para>Examples:</para>

    <para></para>

    <programlisting>var xs = [1,2,3];
insert 10 into xs; // yields [1,2,3,10]
insert 12 before xs[1]; // yields [1,12,2,3,10]
delete xs[x | x == 12]; // yields [1,2,3,10]
delete xs[x | x &gt;= 3]; // yields [1,2]
insert 5 after xs[ x | x == 1]; // yields [1,5,2];
insert 13 as first into xs; // yields [13, 1, 5, 2];
delete xs; // yields []
</programlisting>

    <para></para>
  </section>

  <section>
    <title>Expressions</title>

    <para></para>

    <para>Unlike the Java programming language, JavaFX script is an expression
    language. All executable statements are expressions which consist of zero
    or more inputs and a single output. This includes conditionals, loops, and
    even blocks.</para>

    <para></para>

    <para>For example:</para>

    <para></para>

    <programlisting>import java.lang.Math;

var rand = (Math.random() * 100).intValue();
var s:String = null;
if (rand % 2 == 0) {
     s = "rand is even";
} else {
     s = "rand is odd";
}
System.out.println(s);
</programlisting>

    <para></para>

    <para>In the above example the then and else clauses of the conditional
    "if" are expressions in their own right, namely block expressions
    <emphasis role="bold">[to-do, link to block expressions section
    below]</emphasis></para>

    <para></para>

    <para></para>

    <para></para>

    <para></para>

    <para>=========================================</para>

    <para><emphasis role="bold">[TO-DO: COPY EXISTING LOGICAL EXPRESSIONS
    SECTION HERE]</emphasis></para>

    <para>=========================================</para>

    <para></para>

    <para></para>

    <para></para>

    <para></para>

    <para></para>

    <para></para>

    <para></para>

    <para></para>

    <para><emphasis role="bold">Block Expressions</emphasis></para>

    <para></para>

    <para>A block expression consists of a list of statements (which can be
    declarations or expressions) surrounded by curly braces and separated by
    semicolons. If the last statement is an expression, then the value of a
    block expression is the value of the last expression; otherwise the block
    expression has void type.<emphasis></emphasis></para>

    <para></para>

    <para>So, the above example from the top of this section could also be
    written as follows:</para>

    <para></para>

    <programlisting>import java.lang.Math;

var rand = (Math.random() * 100).intValue();
var s:String =
if (rand % 2 == 0) {
     "rand is even";
} else {
     "rand is odd";
};
System.out.println(s);
</programlisting>

    <para></para>

    <para>Alternatively the braces can be omitted:</para>

    <para></para>

    <programlisting>import java.lang.Math;

var rand = (Math.random() * 100).intValue();
var s:String = if (rand % 2 == 0) "rand is even" else "rand is odd";
System.out.println(s);
</programlisting>

    <para></para>

    <para>The Java programming language contains both an "if" statement, and a
    conditional expression, e.g, <code>a &lt; b ? a : b</code>.</para>

    <para>Thanks to block expressions, the JavaFX "if" expression takes the
    place of both.</para>

    <para></para>

    <para><emphasis role="bold">Range Expressions</emphasis></para>

    <para></para>

    <para>As mentioned in chapter two <emphasis role="bold">[TO-DO: confirm
    that location and provide link]</emphasis> it is possible to define a
    sequence of numeric values forming an arithmetic series using the
    following syntax:</para>

    <para></para>

    <programlisting>[number1..number2]
</programlisting>

    <para></para>

    <para>Such an expression defines an sequence whose elements consist of the
    integers from <emphasis>number1</emphasis> to <emphasis>number2</emphasis>
    (inclusive).</para>

    <para></para>

    <para>For example:</para>

    <para></para>

    <programlisting>var nums = [0..3];
System.out.println(nums == [0,1,2,3]); // prints true
</programlisting>

    <para></para>

    <para>By default the interval between the values is 1 but it's also
    possible to specify a different interval by including the next number in
    the sequence after number1 separated by a comma. For example, the
    following expression defines an sequence consisting of the odd numbers
    between 1 and 10:</para>

    <para></para>

    <programlisting>[1,3..10]
</programlisting>

    <para></para>

    <para>If <emphasis>number1</emphasis> is greater than
    <emphasis>number2</emphasis> a descending series is created:</para>

    <para></para>

    <programlisting>var nums = [3..0];
System.out.println(nums == [3,2,1,0]); // prints true
</programlisting>

    <para></para>
  </section>
</chapter>