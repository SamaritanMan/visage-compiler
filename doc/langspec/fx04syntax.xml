<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
"http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<?xml-stylesheet href="docbook.css" type="text/css"?>
<chapter id="types">
  <title>Types</title>

  <sect1 id="types">
    <title>Overview</title>

    <para><emphasis> This Chapter describes syntax for lexical structure,
    types, strings and string formatting. </emphasis></para>
  </sect1>


  <sect1 id="lex">
    <title>Lexical Structure</title>

    <itemizedlist>
      <listitem>
        <para><emphasis>Character set, whitespace?</emphasis></para>

        <para><emphasis>(No whitespace discussion yet)</emphasis></para>
      </listitem>

      <listitem>
        <para><emphasis>Comments (like Java comments)</emphasis></para>
      </listitem>

      <listitem>
        <para><emphasis>Reserved Words (elsewhere)</emphasis></para>
      </listitem>

      <listitem>
        <para><emphasis>Identifiers (partly done)</emphasis></para>
      </listitem>

      <listitem>
        <para><emphasis>Literals (partly done)</emphasis></para>
      </listitem>

      <listitem>
        <para><emphasis>Punctuation?</emphasis></para>

        <para><emphasis>(Use of punctuation as tokens. We define two groups of
        punctuation: Operators and separators)</emphasis></para>
      </listitem>

      <listitem>
        <para><emphasis>How do we support other Java basic
        types?</emphasis></para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="types"><title>Types</title>
    
  <para><emphasis>Intro to come. A type is a property of a data item  that associates a legal range of values, a set of legal operators and a data format to that data item. jfx script provides several basic types and supports user-defined types. </emphasis></para>
  
  
  
  <sect2 id="basictypes">
  
  <title>Basic Types</title>

    <para>The JavaFX™ Script programming language defines four basic types:
    <code> String, Boolean, Number,</code> and <code>Integer.</code> JavaFX
    Script also supports complex types such as classes and interfaces. <para>
        <para>You can use types to declare new variables. In the JavaFX Script
        programming language, <code>var</code> is a keyword used to introduce
        a new variable declaration.</para>

        <para>JavaFX Script types to correspond to the Java™ programming
        language (TM) types listed on the table below:</para>

        <table cellpadding="5" cellspacing="5" style="border: medium groove ;">
          <tbody>
            <tr>
              <th style="text-decoration: underline;">JavaFX</th>

              <th style="text-decoration: underline;">Java</th>
            </tr>

            <tr>
              <td>
                <code>String</code>
              </td>

              <td>
                <code>java.lang.String</code>
              </td>
            </tr>

            <tr>
              <td>
                <code>Boolean</code>
              </td>

              <td>
                <code>java.lang.boolean</code>
              </td>
            </tr>

            <tr>
              <td>
                <code>Number</code>
              </td>

              <td>
                <code>java.lang.Number</code>
              </td>
            </tr>

            <tr>
              <td>
                <code>Integer</code>
              </td>

              <td>
                <code>byte,short,int,long,BigInteger</code>
              </td>
            </tr>
          </tbody>
        </table>

        <para>The complete syntax for creating a new variable is:</para>

        <programlisting> var <emphasis>variableName</emphasis> : typename [?, +, *] = <emphasis>initial value </emphasis> </programlisting>

        <para><emphasis role="bold">NOTE:  </emphasis> If you do not specify
        type using the syntax <code>: typeName, </code> the interpreter infers
        the type of the variable from its use.</para>

        <!-- QUESTIONS: 
    What interpreter? Should we now say 'compiler? 
    Does the compiler behave the same way the interpreter does? 
    Will the interpreter go away once the compiler comes online?
    
    -->

        <para>
          <emphasis role="bold">Example:</emphasis>
        </para>

        <programlisting>var s : String = "Hello": // type explicitly stated
    var s = "hello";      // type inferred
    s.toUpperCase();      // yields HELLO
    s.substring(1);       //  yields  ello
    
    var n : Number = 1.5; //type explicitly stated
    var n = 1/5;          //type inferred
    n.intValue; //yields 1</programlisting>

        <!-- QUESTIONS
    
    Is it OK to use calls to toUpperCase(), substring(), intValue() 
    at this point when we haven'ty talked about functions or calling 
    Java classes and methods from JavaFX Script itself:
    
    -->

        <programlisting>var b :boolean = true;  // type explicitly stated
    var b = true;           //type inferred
    b instanceof Boolian    // yields true </programlisting>

        <!-- QUESTIONS
    
    This content on coercions will be moved to the section on methods and argument passing. Makes no sense here. 
   
    -->

        <para>JavaFX Script automatically performs coercions on numeric types
        when passing arguments or return values to or from Java methods.
        JavaFX Script also performs implicit truncating coercions when
        converting Numbers to Integers.</para>

        <!--
    <para><emphasis>How does JavaFX Script perform coercions?</emphasis></para>
    -->

        <!-- **********  Variables, functions, operations, arrays ******* -->
	
	</para></para></sect2></sect1>

        <sect1 id="vars">
          <title>Variables</title>

          <!--
    <para><emphasis>We need to have discussed keywords before this point, because var is a keyword. </emphasis></para>
-->

          <para>The <code>var</code> keyword introduces a new variable. You
          can optionally specify the type of a variable in its declaration. If
          you do not specify the type, the interpreter infers the variable
          type from its use. A variable declaration takes the form</para>

          <programlisting>        var variableName : typeName [?,+,*] = initializer;
</programlisting>

          <para>You can use one of the <code> ?, +, </code> or <code> *
          </code> operators to denote the cardinality of the variable, as
          follows:</para>

          <programlisting>Operator   Meaning
   ?       Optional (can be null)
   +       One or more
   *       Zero or more
</programlisting>

          <para>
            <emphasis role="bold">Example:</emphasis>
          </para>

          <programlisting>        var nums:Number* = [1,2,3];	
</programlisting>

          <para>This example declares a new variable named <code>nums</code> ,
          holding a value defined to consist of zero or more instances of type
          <code>Number</code> and holding an initial value of
          <code>[1,2,3].</code></para>

          <!--
    <para><emphasis>Why does JFX Script support this [?+*] feature? </emphasis></para>
    -->

          <para>
            <emphasis>I'm sure that this syntax simplifies coding for some
            applications. Can we provide an example or two here? String
            handling? Returning tables from a database?</emphasis>
          </para>

          <para>The <code>:typeName, [?,+,*],</code> and <code> =</code>
          initializer portions of the declaration are optional, so the
          following code snippet is equivalent to the above:</para>

          <programlisting>        var nums = [1,2,3];
</programlisting>
        </sect1>

        <sect1 id="stringsintro">
          <title>Strings</title>

          <para>
            <emphasis>Introduction to come</emphasis>
          </para>


        <sect2 id="strings">
          <title>String Literals and String Expressions</title>

          <para>JavaFX Script specifies a literal character string with either
          single or double quotes:</para>

          <programlisting>        var s = 'Hello';
       var s = "Hello"; // equivalent statement
</programlisting>

          <para>When using double quotes, you can embed JavaFX Script
          expressions using curly bracket operators: <code>{}</code>:</para>

          <programlisting>        var name = 'Joe';
        var s = "Hello {name}"; // s = 'Hello Joe'
</programlisting>

          <para>You can nest quoted strings. Your embedded expression can
          itself contain quoted strings (which, in turn, can contain further
          embedded expressions):</para>

          <programlisting>        var answer = true;
        var s = "The answer is {if answer then "Yes" else "No"}"; // s = 'The answer is Yes'
</programlisting>

          <para>Unlike Java, JavaFX Script double-quoted String literals
          <emphasis>can</emphasis> contain newlines:</para>

          <programlisting>        var s = "This
                 contains
                 new lines";
</programlisting>
        </sect2>

        <sect2 id="sformatting">
          <title>String, Number, and Date Formatting</title>

          <para>JavaFX Script provides the String formatting operator
          (<code>format as</code>), which has the following syntax:</para>

          <programlisting>        <emphasis>expr</emphasis> format as <emphasis>directive</emphasis>
</programlisting>

          <para>The <code>format as </code>operator supports
          <code>java.text.DecimalFormat</code>,
          <code>java.text.SimpleDateFormat</code>, and
          <code>java.util.Formatter</code> formatting directives. If the
          formatting directive starts with <code>%</code>, then
          <code>java.util.Formatter</code> is used, otherwise if <code>
              <emphasis>expr</emphasis>
            </code> is of type <code>Number</code> then
          <code>java.text.DecimalFormat</code> is used, otherwise if <code>
              <emphasis>expr</emphasis>
            </code> is of type <code>java.util.Date</code> then
          <code>java.text.SimpleDateFormat</code> is used.</para>

          <para>The <code>
              <emphasis>directive</emphasis>
            </code> operand is syntactically an identifier, not an expression.
          This allows the content of <code>
              <emphasis>directive</emphasis>
            </code> to be statically checked for correctness at compile
          time.</para>

          <para>
            <emphasis role="bold">Examples:</emphasis>
          </para>

          <programlisting>        import java.util.Date;

        100.896 format as &lt;&lt;%f&gt;&gt;; // yields '100.896000'
        31.intValue() format as &lt;&lt;%02X&gt;&gt;; // yields '1F'
        var d = new Date();
        d format as &lt;&lt;yyyy-MM-dd'T'HH:mm:ss.SSSZ&gt;&gt;; // yields '2005-10-31T08:04:31.323-0800'
        0.00123 format as &lt;&lt;00.###E0&gt;&gt;; // yields '12.3E-4'
</programlisting>

        </sect2>
	
	</sect1>
	
 
    <!-- VERY SIMPLE INTRODUCTORY DEFINITIONS 
 
    ... these are meant to quickly define terms the reader should
    already know, before introducing syntax and presenting snippets.
    
    
    Expression:  A combination of keywords, operators, variables, and literals that yield a string, number, or object. An expression can perform a calculation, manipulate characters, call a function, or test data.
    
    An expression in a programming language is a combination of values, variables, operators, and functions that are interpreted (evaluated) according to the particular rules of precedence and of association for a particular programming language, which computes and then produces (returns, in a stateful environment) another value. 
    
    
    Statement: 
    
    An entity in a programming language which is typically the smallest indivisible unit of execution.
    
    An instruction to carry out some action; a single step within a program.
    
    In computer programming a statement can be thought of as the smallest standalone element of an imperative programming language. A program is formed by a sequence of one or more statements. A statement will have internal components (eg, expressions).
    
    Many languages (eg, C) make a distinction between statements and definitions, with a statement only containing executable code and a definition declaring an identifier.
    
    In most languages statements contrast with expressions in that statements do not return results and are executed solely for their side effects, while expressions always return a result and often do not have side effects at all. Among imperative programming languages, Algol 68 is one of the few in which a statement can return a result. In languages which mix imperative and functional styles, such as the Lisp family, the distinction between expressions and statements is not made: even expressions executed in sequential contexts solely for their side effects and whose return values are not used are considered 'expressions'.
    
    The syntax and semantics of statements is specified by the definition of the programming language.
    
    
    Syntax:  software language rules which determine what is and is
    not acceptable to the compiler. In jfxScript, 'syntax' is the
    literal text that invokes those rules.
      
    bind: to associate a name with a value. 
    
    
    trigger:  an event that makes a transition eligible to fire. 
    A transition is a relationship between two states in a state
    machine, like a running software application.
    
    
    type:  A declared classifier that the value of a variable,
    parameter or attribute must hold. The actual value must be an
    instance of that type or one of its descendants.
    
    (not good enough for jfx).
    A variable is a name that refers to a value. 
    A variable is a memory location. 
    
   
    
    A statement is an instruction that the interpreter can execute. 

    When you type a statement on the command line, the interpreter
    executes it and displays the result. 

    A script usually contains a sequence of statements. If there is
    more than one statement, the results appear one at a time as the
    statements execute.
    
  
    
    
    An expression is a combination of values, variables, and
    operators. If you type an expression on the command line, the
    interpreter evaluates it and displays the result.
    
    The evaluation of an expression produces a value, which is why
    expressions can appear on the right hand side of assignment
    statements. 
    
     
    
    Operators are symbols that represent computations like addition
    and multiplication. The values the operator uses are called
    operands. They can be data values, variables, objects or other
    carefully defined program elements. 
    
    In JavaFX Script, an operator can also be a keyword that defines a
    computation, a relationship between two data elements, or a
    reference to an object. 
    
    Operators specify a computation the interpreter performs on one or
    more operands. Operators are usually part of a statement or method
    that returns the result of a computation
    
     
    
    more here. 
    
    -->

  
  
  
  
</chapter>