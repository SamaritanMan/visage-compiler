<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<?xml-stylesheet href="docbook.css" type="text/css"?>
<chapter id="Objects">
<title>Objects</title>


<sect1 id="obj"><title>Object-Oriented Programming Overview </title>
<para>
<emphasis>This Chapter describes object oriented programming. 
</emphasis>  
</para>

<sect2 id="objquestions"><title>Questions</title>
<para>
<emphasis>
We need a complete briefing that covers the way JavaFX handles classes and objects; how JFX ties into Swing classes and calls custom classes.   
</emphasis>

<title>Example itemizedlist</title>

<itemizedlist mark='opencircle'>
<listitem>
<para><emphasis>Syntax for defining a class?
</emphasis></para>
</listitem>
<listitem override='bullet'>
<para><emphasis>How do I define fields and methods in a class, 
or do I?
</emphasis></para>
</listitem>
<listitem>
<para><emphasis>How do we instantiate objects? Are Java classes 
different from JavaFX classes? How can I call a custom class that I have written? Can I call a core class that isn't in the library that wraps swing classes? Can I subclass a javafx script class? What do we do instead of a constructor? Nested classes? Interfaces? 
</emphasis></para>
</listitem>

<listitem override='bullet'>
<para><emphasis>How do we handle generic types; enumerated types and annotations? 
</emphasis></para>
</listitem>

<listitem override='bullet'>
<para><emphasis>
</emphasis></para>
</listitem>

</itemizedlist>
<!--

<title>Example itemizedlist</title>

<itemizedlist mark='opencircle'>
<listitem>
<para>TeX and LaTeX
</para>
</listitem>
<listitem override='bullet'>
<para>Troff
</para>
</listitem>
<listitem>
<para>Lout
</para>
</listitem>
</itemizedlist>

-->

</para></sect2>

</sect1>


    <sect1 id="obj">
      <title>Calling Java Objects</title>

      <para>JavaFX programs can import Java classes, create new Java objects,
      call their methods, and implement Java interfaces. The following code
      snippet provides an example:</para>

      <programlisting>        import javax.swing.JFrame;
        import javax.swing.JButton;
        import java.awt.event.ActionListener;
        import java.lang.System;

        var frame = new JFrame();
        var button = new JButton("Press me");
        frame.getContentPane().add(button);
        button.addActionListener(new ActionListener() {
                operation actionPerformed(event) {
                    System.out.println("You pressed me");
                }
            });
        frame.pack();
        frame.setVisible(true);</programlisting>

      <para>Running the above program displays the following on the screen:
      Image of simple frame window with Press me button.</para>

      <para>Of course, this isn't the preferred way of creating GUI's in
      JavaFX. The following JavaFX code achieves the same effect:</para>

      <programlisting>         Frame {
              content: Button {
                   text: "Press Me"
                   action: operation() {
                        System.out.println("You pressed me");
                   }
              }
              visible: true
         }</programlisting>
    </sect1>
    
    
    <sect1 id="classes">
             <title>Classes and Objects</title>

            <para>The JavaFX syntax for specifying a class is the
            <code>class</code> keyword followed by the class name, optionally
            the <code>extends</code> keyword, and a comma separated list of
            the names of base classes, an open curly brace, a list of
            attributes, functions, and operations that each end in a
            semicolon, and a closing curly brace.</para>

            <para>Here is an example:</para>

            <programlisting>        class Person {
           attribute name: String;
           attribute parent: Person inverse Person.children;
           attribute children: Person* inverse Person.parent;
           function getFamilyIncome(): Number;
           function getNumberOfChildren(): Number;
           operation marry(spouse: Person);
        }         </programlisting>

            <para>Attributes are declared using the <code>attribute</code>
            keyword followed by the attribute's name, a colon, the attribute's
            type, optionally a cardinality specification (<code>?</code>
            meaning optional, <code>*</code> meaning zero or more, or
            <code>+</code> meaning one or more), and an optional
            <code>inverse</code> clause specifying a bidirectional
            relationship to another attribute in the class of the attributes'
            type, and terminated with a semicolon.</para>

            <programlisting>        attribute <emphasis>AttributeName</emphasis> : <emphasis>AttributeType</emphasis> <emphasis>Cardinality</emphasis> inverse <emphasis>ClassName</emphasis>.<emphasis>InverseAttributeName</emphasis>;

</programlisting>

            <para>If the <code>inverse</code> clause is present the JavaFX
            interpreter will automatically perform updates (insert or delete
            or replace depending on the kind of update and cardinalities of
            the attributes) on the inverse attribute whenever the attribute's
            value is modified.</para>

            <para>Multi-valued attributes (i.e. those declared with the
            <code>*</code> or <code>+</code> cardinality specifiers) are
            represented as arrays, and can be accessed via the <code>[]</code>
            operator and updated with the <code>insert</code> and
            <code>delete</code> operators.</para>

            <para>Unlike Java methods, the bodies all JavaFX member operations
            and member functions are defined outside of the class declaration,
            for example, like this:</para>

            <programlisting>       function Person.getNumberOfChildren() {
            return sizeof this.children;
       }         </programlisting>

            <para>Parameter and return types are required in the declaration
            of operations and functions in the class declaration but may be
            omitted in their definitions.</para>

            <sect2 id="attributes">
              <title>Attribute Declarations</title>

              <para>In JavaFX, it's possible to declare initial values for
              attributes. The initializers are evaluated in the order the
              attributes are specified in the class declaration in the context
              of the newly created object:</para>

              <programlisting>       import java.lang.System;

       class X {
            attribute a: Number;
            attribute b: Number;
       }
<emphasis>
       attribute X.a = 10;
       attribute X.b = -1;
</emphasis>
       var x = new X();
       System.out.println(x.a); // prints 10
       System.out.println(x.b); // prints -1
         </programlisting>

              <para>It is also possible to declare an incrementally evaluated
              expression as the value of an attribute using the
              <code>bind</code> operator:</para>

              <programlisting>       import java.lang.System;

       class X {
            attribute a: Number;
            attribute b: Number;
            attribute c: Number;
       }

       attribute X.a = 10;
<emphasis>
       attribute X.b = bind a + 10;
       attribute X.c = bind lazy b + 10;
</emphasis>

       var x = new X();
       System.out.println(x.a); // prints 10
       System.out.println(x.b); // prints 20
       System.out.println(x.c); // prints 30
       x.a = 5;
       System.out.println(x.a); // prints 5
       System.out.println(x.b); // prints 15
       System.out.println(x.c); // prints 25         </programlisting>
            </sect2>

            <sect2 id="literals">
              <title>Object Literals</title>

              <para>JavaFX objects may be allocated using a declarative syntax
              consisting of the name of the class followed by a curly brace
              delimited list of attribute initializers. Each initializer
              consists of the attribute name followed by a colon, followed by
              an expression which defines its value (but see below regarding
              JavaFX's support for incremental evaluation in this context).
              Here is an example:</para>

              <programlisting>         var chris = Person {
             name: "Chris"
             children:
             [Person {
                 name: "Dee"
             },
             Person {
                 name: "Candice"

             }]
       };         </programlisting>

              <para>Java object allocation syntax is also supported. In the
              case of Java classes, you can pass arguments to the class's
              constructor as in Java:</para>

              <programlisting>        import java.util.Date;
        import java.lang.System;

        var date1 = new Date(95, 4, 23); // call a java constructor
        var date2 = Date { // create the same date as an object literal
             month: 4
             date: 23
             year: 95
        };
        System.out.println(date1 == date2);  // prints true
         </programlisting>

              <para>In JavaFX, it's possible to declare local variables inside
              an object literal. Such variables are only visible within the
              scope of the object literal itself. In addition, a variable
              referring to the object being initialized may be declared by
              using the <code>var</code> keyword as a pseudo-attribute, for
              example:</para>

              <programlisting>        var chris = Person {
             var: me
             name: "Chris"
             var child1 = Person {
                  name: "Dee"
                  parent: me
             }
             var child2 = Person { name: "Candice" }
             children: [child1, child2]
       };         </programlisting>
            </sect2>

            </sect1>       
    
    
    
</chapter>
