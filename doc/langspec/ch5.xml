<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="expressions"><title>Expressions and Operators</title>

<sect2 id="expr"><title>Expressions</title>
<para>
Unlike the <trademark>Java</trademark> programming language, the <trademark>JavaFX</trademark> Script programming language is an expression language. All executable statements are expressions that consist of zero or more inputs followed by  zero (or one) outputs. This includes conditionals, loops, and even blocks. </para>

<para>The following demo provides an example:
</para>

<programlisting>
import java.lang.Math;
import java.lang.System;

var rand = (Math.random() * 100).intValue();
var s:String = null;
if (rand mod 2 == 0) {
     s = "rand is even"
} else {
     s = "rand is odd"
};

System.out.println(s);
</programlisting>


<sect3 id="blockexpr"><title>Block Expressions</title>

<para>A block expression consists of a list of statements (which can be declarations or expressions) surrounded by curly braces and separated by semicolons. If the last statement is an expression, the value of a block expression is the value of the last expression; otherwise the block expression has <code>Void</code>
 type.</para>

<para>
The following block expression adds a few numbers and stores 
the result in a variable named <code>total</code>:
</para>

<programlisting>
import java.lang.System;

var nums = [5, 7, 3, 9];
var total = {
     var sum = 0;
     for (a in nums) { sum += a };
     sum;
}

System.out.println("Total is {total} ");
</programlisting>



</sect3><sect3 id="range"><title>Range Expressions</title>

<para>

<emphasis>Range expressions</emphasis> 
 define a sequence of values that form an arithmetic series using the following 
syntax: </para>


<programlisting>
[number1..number2]
</programlisting>


<para>
Such an expression defines a sequence that contains elements consisting of the integers from <code>number1</code> to <code>number2</code> (inclusive).
</para>

<para>
A simple example of a range expression could be the following: 
</para>

<programlisting>
import java.lang.System;

var nums = [0..3];
System.out.println(nums == [0,1,2,3]); // prints true
</programlisting>



<para>By default the interval between the values is 1 but you also can specify a different interval. For example, the following expression defines a sequence consisting of the odd numbers between 1 and 10:
</para>

<programlisting>
[1..10 step 2]
</programlisting>

<para>To create a <emphasis>descending range</emphasis>, make sure the second value is less than the first, and specify a negative step value:
</para>

<programlisting>
import java.lang.System;

var nums = [3..0 step -1];
System.out.println(nums == [3,2,1,0]); // prints true
</programlisting> 

<para>
Note that the following declarations actually declare empty sequences:
</para>

<programlisting>
var nums1 = [3..0 ]; 
var nums2 = [3..0 step 1]; 
</programlisting>


</sect3><sect3 id="conditional"><title>Conditional Expressions</title>

<para>The <code>if</code> expression is similar to <code>if</code> in the <trademark>Java</trademark> programming language:</para>


<programlisting>
if (condition1) {
     System.out.println("Condition 1");
} else if (condition2) {
     System.out.println("Condition2");
} else {
     System.out.println("not Condition 1 or Condition 2");
}
</programlisting>


<para>The Java programming language contains both an <code>if</code> expression  
and a conditional expression: <code>a &lt; b ? a : b</code>.
 The JavaFX Script programming language <code>if</code> expression takes the place of both.</para>




</sect3><sect3 id="loop"><title>Looping Expressions</title>
<para>
<sect4 id="for"><title>The <code>for</code> Expression</title> 

The <code>for</code> expression is 
 used with sequences, and is therefore discussed in <ulink url="comprehensions.html"><emphasis>Chapter 7</emphasis>.</ulink></sect4></para>

<para>

<sect4 id="while"><title>The <code>while</code> Expression</title> 

<para>The while expression is the same as in the Java programming language, but curly braces
are always required around the body.</para>

<para><emphasis role="bold">Example:</emphasis></para>

<programlisting>import java.lang.System;

var i = 0;
while (i &lt; 10) {
    if (i &gt; 5) {
         break;
    }
    System.out.println("i = {i}");
    i += 1;
} </programlisting>

</sect4></para>



</sect3></sect2>

<sect2 id="state"><title>Other Expressions</title>


<para>
The <code>return</code> Expression
is the same as found in the Java programming language:
</para>

<programlisting>
function add(x, y) {
     return x + y;
}
</programlisting>


<para>
The <code>throw</code> expression is similar to that of 
the Java Programming language, but 
 only objects extending 
<code>java.lang.Throwable</code> may be thrown and caught:</para>

<programlisting>
import java.lang.Exception;

function foo() {
     throw new Exception("this is a java exception");
}

function bar() {
     throw "just a string";
}
</programlisting>

<para>
The <code>try</code> and <code>catch</code> expressions
 are similar to those of the Java programming language, but 
 use JavaFX Script programming language variable declaration syntax:
</para>

<programlisting>

try {
     throw "Hello";
} catch (s:String) {
     System.out.println("caught a String: {s}");
} catch (any) {
     System.out.println("caught something not a String: {any}");
} finally {
     System.out.println("finally...");
}
</programlisting>



<para>
The <code>break</code> and <code>continue</code> expressions are 
 similar to those of the Java Programming language, but labels are 
not supported. </para>

<para><emphasis role="bold">Examples:</emphasis></para>

<programlisting>import java.lang.System;

function foo() {
    for (i in [0..10]) {
         if (i > 5) {
              break;
         }
         if (i mod 2 == 0) {
              continue;
         }
         System.out.println(i);
    }
}

function bar() {
    var i = 0;
    while (i &lt; 10) {
         if (i &gt; 5) {
              break;
         }
         if (i mod 2 == 0) {
              continue;
         }
         System.out.println(i);
         i += 1;
    }
} </programlisting>

</sect2>
<sect2 id="oper"><title>Operators</title>
<para>
The JavaFX Script programming language provides standard operators similar to
 those found in the Java programming language. The following chart lists these operators by precedence, comparing to their Java programming language equivalent.
</para>

<!-- *********** operator table ************************* -->

                                       

	
<table class="oper" border="0">

<caption style="margin-bottom: 9pt;">Operator Precedence </caption>

<tbody>

    <tr style="padding-top: 9pt; padding-bottom: 9pt;">

      <th width="50" valign="top" >Priority</th>
      <th width="105" valign="top" >JavaFX Script Programming Language Operator</th>
      <th width="98" valign="top" >Operation</th>
      <th width="100" valign="top" >Java Programming Language  Operator</th>
      <th width="107" valign="top" >Order of Evaluation</th>
    </tr>
	
	
<!-- ***************** New table below *************** -->	
<!-- ************************************************* -->
<!-- ************************************************* -->
	
	
		<tr>
	<td rowspan="4" valign="top">1</td>
	<td class="style1 ">function()</td>
	<td>JavaFX function </td>
	<td>function()</td>
	<td>Class</td>
	</tr>
	
	<tr>
	<td class="style1">() </td>
	<td>An expression in brackets </td>
	<td>&nbsp;</td>
	<td>n/a</td>
	</tr>

			<tr>
	<td class="style1">new </td>
	<td>Instantiate a new object </td>
	<td>&nbsp;</td>
	<td>Class</td>
	</tr>
	
				<tr>
	<td class="style1"> {Object literal} </td>
	<td>Instantiate and initialize a new object </td>
	<td>&nbsp;</td>
	<td>Class</td>
	</tr>
	
    <tr style="border-top: thin solid black;">
      <td rowspan="2" valign="top">2</td>
      <td><code class="style1">++ (suffixed)</code></td>
      <td>Post-increment assign</td>
      <td><code class="style1">++</code></td>
      <td rowspan="2" valign="top">Right to Left </td>
    </tr>
    <tr>
      <td><code class="style1">-- (suffixed)</code></td>
      <td>Post-decrement assign</td>
      <td><code class="style1">--</code></td>
    </tr>
	
	  <tr style="border-top:thin solid black;">
      <td rowspan="6" valign="top">3</td>
      <td><code class="style1">++ (prefixed)</code></td>
      <td>Pre-increment assign</td>
      <td><code class="style1">++</code></td>
      <td rowspan="2" valign="top">Right to Left </td>
    </tr>	
	
	<tr >
      
      <td><code class="style1">-- (prefixed)</code></td>
      <td>Pre-decrement assign</td>
      <td><code class="style1">--</code></td>
	      </tr>
	
	
	<tr><td class="style1">not</td>
    <td>Logical negation </td>
    <td>!</td>
    <td>Boolean</td>
	</tr>	
	
	<tr><td class="style1">sizeof</td>
    <td>Size of a sequence </td><td>&nbsp;</td>
    <td rowspan="3" valign="top">Sequence</td>
	</tr>	
	
	<tr><td class="style1">reverse</td>
    <td>Reverse of a sequence </td><td>&nbsp;</td></tr>	
		<tr><td class="style1">indexof</td>
	    <td>Index of a sequence element </td><td>&nbsp;</td></tr>	
		
			<tr><td></td><td class="style1">--></td>
    <td>tween</td>
    <td>&nbsp;</td>
	<td>&nbsp;</td>
			</tr>	
		
		
		
		
	<tr style="border-top:thin solid black;">
      <td rowspan="3" valign="top">4</td>
      <td><code class="style1">*</code></td>
      <td>Multiplication</td>
      <td><code class="style1">*</code></td>
      <td rowspan="3" valign="top">Left to Right  </td>
    </tr>
	
	
		<tr>
      
      <td><code class="style1">/</code></td>
      <td>Division</td>
      <td><code class="style1">/</code></td>
    </tr>
		<tr>
      
      <td><code class="style1">mod</code></td>
      <td>Remainder</td>
      <td><code class="style1">%</code></td>
    </tr>		
		
		
		
<!-- *** 5 **** -->	
<!-- ********** -->		

		<tr style="border-top:thin solid black;">
      <td rowspan="2" valign="top">5</td>
      <td><code class="style1">+</code></td>
      <td>Addition</td>
      <td><code class="style1">+</code></td>
      <td rowspan="2" valign="top">Left to Right  </td>
    </tr>
	
	
<tr>
      
      <td><code class="style1">-</code></td>
      <td>Subtraction </td>
      <td><code class="style1">-</code></td>
    </tr>
	
<!-- *** 6 **** -->
<!-- ********** -->
		
<tr style="border-top:thin solid black;">
      <td rowspan="6" valign="top">6</td>
      <td><code class="style1">==</code></td>
      <td>Equality</td>
      <td><code class="style1">== </code></td>
      <td rowspan="5" valign="top">Left to Right </td>
    </tr>
	
	
						<tr>
     
      <td><code class="style1">!= </code></td>
      <td>Inequality</td>
      <td><code class="style1">!=</code></td>
    </tr>
	
	
	
	<tr>
      
      <td><code class="style1"> &lt;</code></td>
      <td>Less than  </td>
      <td><code class="style1">&lt;</code></td>
    </tr>
	
						<tr>
      
      <td><code class="style1"> &lt;=</code></td>
      <td>Less than or equal </td>
      <td><code class="style1">&lt;=</code></td>
    </tr>
	
	
	
						<tr>
      
      <td><code class="style1">&gt;</code></td>
      <td>Greater than</td>
      <td><code class="style1">&gt;</code></td>
    </tr>
	
	
	
						<tr>
      
      <td><code class="style1">=&gt;</code></td>
      <td>Greater than  or equal to</td>
      <td><code class="style1">=&gt; </code></td>
    </tr>
	
<!-- *** 7 **** -->
<!-- ********** -->
							
							
							<tr style="border-top:thin solid black;">
      <td rowspan="2" valign="top">7</td>
      
      <td><code class="style1">instanceof</code></td>
      <td>Type checking  </td>
      <td><code class="style1">instanceof </code></td>
	  <td colspan="2">Class </td>
    </tr>		
		
		
	<tr><td>as</td>	
	<td>Cast</td>
	<td>&nbsp;</td> 
	<td>Class</td>
	</tr>
		
	
		
<!-- *** 8 **** -->
<!-- ********** -->


	<tr style="border-top:thin solid black;">
<td valign="top">8</td>
<td><code class="style1">or</code></td>
      <td>Logical OR </td>
      <td><code class="style1">||</code></td>
      <td valign="top">Right to Left </td>
    </tr>

<!-- *** 9 **** -->
<!-- ********** -->


		<tr style="border-top:thin solid black;">
<td valign="top">9</td>
<td><code class="style1">and</code></td>
      <td>Logical AND </td>
      <td><code class="style1">&amp;&amp;</code></td>
      <td valign="top">Right to Left </td>
    </tr>
		

<!-- *** 10 **** -->
<!-- ********** -->		

	<tr style="border-top:thin solid black;">

      <td rowspan="4" valign="top">10</td>
      <td><code class="style1">+=</code></td>
      <td>Add and assign </td>
      <td>+=</td>
    </tr>
	
	<tr>

      <td><code class="style1">-=</code></td>
      <td>Subtract and assign </td>
      <td><code class="style1">-+</code></td>
    </tr>
	
	<tr>

      <td><code class="style1">*=</code></td>
      <td>Multiply and assign </td>
      <td><code class="style1">*=</code></td>
    </tr>
	
	<tr>

      <td><code class="style1">/=</code></td>
      <td>Divide and assign </td>
      <td><code class="style1">/=</code></td>
    </tr>
	


	<tr style="border-top:thin solid black;">
<td valign="top">11</td>
<td><code class="style1">=</code></td>
      <td>Assignment </td>
      <td><code class="style1">=</code></td>
      <td valign="top">(all) </td>
    </tr>


<!-- ************************************************* -->
<!-- ************************************************* -->
	
	
	</tbody>
	</table>
   
               
	                            
<!-- *********** operator table ************************* -->


<para>
Examples:
</para>   

<programlisting>
import java.lang.System;
import java.lang.Math;

var x = 2;
var y = 4;
var a = true;
var b = false;
System.out.println(x == y); // prints false 
System.out.println(x != y); // prints true
System.out.println(x &lt; y);  // prints true
System.out.println(x &gt; y);  // prints false
System.out.println(x &gt;= y); // prints false
System.out.println(x &lt;= y);  // prints true
System.out.println(x + y);  // prints 6
System.out.println(x - y);  // prints -2
System.out.println(x * y);  // prints 8
System.out.println(x / y);   // prints 0
System.out.println(x mod y);   // prints 2
System.out.println(a and b); // prints false
System.out.println(a or b);  // prints true
System.out.println(not a);  // prints false
System.out.println(sizeof [x,y]); // prints 2 
System.out.println([x,y][e | indexof e == 0]); // prints [ 2 ]  
System.out.println(if (a) x else y); // prints 2
System.out.println(for(q in [x, y] where q &lt; 3) q); // prints [ 2 ]
System.out.println(Math.max(x, y)); // prints 4
System.out.println("abc".toUpperCase()); // prints ABC 
System.out.println(x); // prints 2
</programlisting>
</sect2> </chapter>
