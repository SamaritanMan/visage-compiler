<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="expressions"><title>Expressions, Statements, and Operators</title>

<sect2 id="expr"><title>Expressions</title>
<para>
Unlike the Java programming language, the JavaFX Script programming language is an expression language. All executable statements are expressions which consist of zero or more inputs followed by a single output. This includes conditionals, loops, and even blocks. </para>

<para>The following demo provides an example:
</para>

<programlisting>
import java.lang.Math;
import java.lang.System;

var rand = (Math.random() * 100).intValue();
var s:String = null;
if (rand % 2 == 0) {
     s = "rand is even"
} else {
     s = "rand is odd"
};

System.out.println(s);
</programlisting>

<para>In the above example the <code>then</code> and <code>else</code> clauses of the conditional "if" are expressions in their own right, namely <emphasis>block expressions</emphasis></para>


<sect3 id="blockexpr"><title>Block Expressions</title>

<para>A block expression consists of a list of statements (which can be declarations or expressions) surrounded by curly braces and separated by semicolons. If the last statement is an expression, then the value of a block expression is the value of the last expression; otherwise the block expression has <code>void</code>
 type.</para>

<para>
Therefore, the previous example could also be written as: 
</para>

<programlisting>
import java.lang.Math;
import java.lang.System;

var rand = (Math.random() * 100).intValue();
var s:String =
if (rand % 2 == 0) {
     "rand is even";
} else {
     "rand is odd";
};

System.out.println(s);
</programlisting>


<para>Alternately the braces can be omitted:</para>

<programlisting>
import java.lang.Math;
import java.lang.System; 

var rand = (Math.random() * 100).intValue();
var s:String = if (rand % 2 == 0) "rand is even" else "rand is odd";

System.out.println(s);
</programlisting>


<para>The Java programming language contains both an <code>if</code> statement, 
and a conditional expression: <code>a &lt; b ? a : b</code>.</para>

<para>Thanks to block expressions, the JavaFX Script programming language <code>if</code> expression takes the place of both.</para>


</sect3><sect3 id="range"><title>Range Expressions</title>

<para>

<emphasis>Range expressions</emphasis> 
 define a sequence of values forming an arithmetic series using the following 
syntax: </para>


<programlisting>
[number1..number2]
</programlisting>


<para>
Such an expression defines a sequence whose elements consist of the integers from <code>number1</code> to <code>number2</code> (inclusive).
</para>

<para>
A simple example of a range expression could be: 
</para>

<programlisting>
import java.lang.System;

var nums = [0..3];
System.out.println(nums == [0,1,2,3]); // prints true
</programlisting>



<para>By default the interval between the values is 1 but it is also possible to specify a different interval. For example, the following expression defines an sequence consisting of the odd numbers between 1 and 10:
</para>

<programlisting>
[1..10 step 2]
</programlisting>

<para>To create a <emphasis>descending range</emphasis>, make sure the second value is less than the first, and specify a negative step value:
</para>

<programlisting>
import java.lang.System;

var nums = [3..0 step -1];
System.out.println(nums == [3,2,1,0]); // prints true
</programlisting> 

<para>
Note that the following declarations actually declare empty sequences:
</para>

<programlisting>
var nums1 = [3..0 ]; 
var nums2 = [3..0 step 1]; 
</programlisting>


</sect3><sect3 id="conditional"><title>Conditional Expressions</title>

<para>The <code>if</code> expression is like the expression in the <trademark>Java</trademark> programming language, except that curly braces are always required around the <code>then</code> and <code>else</code> clauses, unless the the <code>else</code> clause is another <code>if</code> expression.</para>


<programlisting>
if (condition1) {
     System.out.println("Condition 1");
} else if (condition2) {
     System.out.println("Condition2");
} else {
     System.out.println("not Condition 1 or Condition 2");
}
</programlisting>


</sect3><sect3 id="loop"><title>Looping Expressions</title>
<para>
The <code>for</code> Expression <!-- **** <FONT COLOR="RED">TBD</FONT> *** --> <emphasis role="red">TBD</emphasis>
</para>
<para>
The <code>while</code> Expression <!-- **** <FONT COLOR="RED">TBD</FONT> *** --><emphasis role="red">TBD</emphasis>
</para>

</sect3></sect2>

<sect2 id="state"><title>Statements</title>


<para>
The <code>return</code> statement
is the same as found in the Java programming language:
</para>

<programlisting>
function add(x, y) {
     return x + y;
}
</programlisting>


<para>
The <code>throw</code> statement is similar to that of 
the Java Programming language, but 
 only objects extending 
<code>java.lang.Throwable</code> may be thrown and caught:</para>

<programlisting>
import java.lang.Exception;

function foo() {
     throw new Exception("this is a java exception");
}

function bar() {
     throw "just a string";
}
</programlisting>

<para>
The <code>try</code> and <code>catch</code> statements
 are similar to those of the Java programming language, but 
 use JavaFX Script programming language variable declaration syntax:
</para>

<programlisting>

try {
     throw "Hello";
} catch (s:String) {
     System.out.println("caught a String: {s}");
} catch (any) {
     System.out.println("caught something not a String: {any}");
} finally {
     System.out.println("finally...");
}
</programlisting>



<para>
The <code>break</code> and <code>continue</code> statements are 
 similar to those of the Java Programming language; however labels are 
not supported. The <code>break</code> and <code>continue</code> statements must appear inside the body of a <code>while</code> or <code>for</code> loop:</para>
<!--
&nbsp;                                    
- **** <FONT COLOR="RED"> code EXAMPLE TBD </FONT>
-->
<programlisting>
<emphasis>      CODE EXAMPLE TBD </emphasis>
</programlisting> 



</sect2>
<sect2 id="oper"><title>Operators</title>
<para>
The JavaFX Script programming language provides standard operators similar to
 those found in the Java programming language. The following chart lists these operators by precedence, comparing to their Java programming language equivalent.
</para>

<!-- *********** operator table ************************* -->

                                       
<!-- 
    <table cellpadding="5" cellspacing="5" style="border: medium groove ;">
      <tbody>
        <tr>
          <th style="text-decoration: underline;">Operator</th>

          <th style="text-decoration: underline;">Meaning</th>

          <th style="text-decoration: underline;">Javaâ„¢ Equivalent</th>
        </tr>

        <tr>
          <th />
        </tr>

        <tr>
          <td colspan="2">
            <emphasis>Relational Operators</emphasis>
          </td>
        </tr>

        <tr>
          <td>
            <code>==</code>
          </td>

          <td>equality</td>

          <td>
            <code>==</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>&lt;&gt;</code>
          </td>

          <td>inequality</td>

          <td>
            <code>!=</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>&lt;</code>
          </td>

          <td>less than</td>

          <td>
            <code>&lt;</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>&gt;</code>
          </td>

          <td>greater than</td>

          <td>
            <code>&gt;</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>&lt;=</code>
          </td>

          <td>less than or equal</td>

          <td>
            <code>&lt;=</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>&gt;=</code>
          </td>

          <td>greater than or equal</td>

          <td>
            <code>&gt;=</code>
          </td>
        </tr>

        <tr>
          <th />
        </tr>

        <tr>
          <td colspan="2">
            <emphasis>Boolean Operators</emphasis>
          </td>

          <td />
        </tr>

        <tr>
          <td>
            <code>and</code>
          </td>

          <td>logical and</td>

          <td>
            <code>&amp;&amp;</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>or</code>
          </td>

          <td>logical or</td>

          <td>
            <code>||</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>not</code>
          </td>

          <td>logical negation</td>

          <td>
            <code>!</code>
          </td>
        </tr>

        <tr>
          <th />
        </tr>

        <tr>
          <td colspan="2">
            <emphasis>Arithmetic Operators</emphasis>
          </td>
        </tr>

        <tr>
          <td>
            <code>+</code>
          </td>

          <td>addition</td>

          <td>
            <code>+</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>-</code>
          </td>

          <td>subtraction; unary negation</td>

          <td>
            <code>-</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>*</code>
          </td>

          <td>multiplication</td>

          <td>
            <code>*</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>/</code>
          </td>

          <td>division</td>

          <td>
            <code>/</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>%</code>
          </td>

          <td>remainder</td>

          <td>
            <code>%</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>+=</code>
          </td>

          <td>add and assign</td>

          <td>
            <code>+=</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>-=</code>
          </td>

          <td>subtract and assign</td>

          <td>
            <code>-=</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>*=</code>
          </td>

          <td>multiply and assign</td>

          <td>
            <code>*=</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>/=</code>
          </td>

          <td>divide and assign</td>

          <td>
            <code>/=</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>%=</code>
          </td>

          <td>remainder and assign</td>

          <td>
            <code>%=</code>
          </td>
        </tr>

        <tr>
          <th />
        </tr>

        <tr>
          <td colspan="2">
            <emphasis>Other Operators</emphasis>
          </td>
        </tr>

        <tr>
          <td>
            <code>sizeof</code>
          </td>

          <td>array length</td>

          <td>
            <code>n/a</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>indexof</code>
          </td>

          <td>ordinal position</td>

          <td>
            <code>n/a</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>if <emphasis>e1</emphasis> then <emphasis>e2</emphasis> else
            <emphasis>e3</emphasis></code>
          </td>

          <td>conditional expression</td>

          <td>
            <code><emphasis>e1</emphasis> ? <emphasis>e2</emphasis> :
            <emphasis>e3</emphasis></code>
          </td>
        </tr>

        <tr>
          <td>
            <code>select</code>
          </td>

          <td>list comprehension</td>

          <td>
            <code>n/a</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>foreach</code>
          </td>

          <td>list comprehension</td>

          <td>
            <code>n/a</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>new</code>
          </td>

          <td>allocation</td>

          <td>
            <code>new</code>
          </td>
        </tr>

        <tr>
          <td>
            <code><emphasis>op</emphasis>()</code>
          </td>

          <td>function call</td>

          <td>
            <code>
              <emphasis>n/a</emphasis>
            </code>
          </td>
        </tr>

        <tr>
          <td>
            <code><emphasis>x</emphasis>.<emphasis>op</emphasis>()</code>
          </td>

          <td>member function/operation call</td>

          <td>
            <code><emphasis>x</emphasis>.<emphasis>op</emphasis>()</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>instanceof</code>
          </td>

          <td>type check</td>

          <td>
            <code>instanceof</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>this</code>
          </td>

          <td>self access</td>

          <td>
            <code>this</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>.</code>
          </td>

          <td>attribute access, context access</td>

          <td>
            <code>., n/a</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>bind [lazy]</code>
          </td>

          <td>incremental [lazy] evaluation</td>

          <td>
            <code>n/a</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>:</code>
          </td>

          <td>eager initialization</td>

          <td>
            <code>n/a</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>[]</code>
          </td>

          <td>array selection</td>

          <td>
            <code>[]</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>format as</code>
          </td>

          <td>String formatting</td>

          <td>
            <code>n/a</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>&lt;&lt;&gt;&gt;</code>
          </td>

          <td>Identifier quotes</td>

          <td>
            <code>n/a</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>{}</code>
          </td>

          <td>String expression</td>

          <td>
            <code>n/a</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>(<emphasis>expr</emphasis>)</code>
          </td>

          <td>grouping</td>

          <td>
            <code>(<emphasis>expr</emphasis>)</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>reverse</code>
          </td>

          <td>reverses a list</td>

          <td>
            <code>n/a</code>
          </td>
        </tr>

        <tr>
          <td>
            <code>[<emphasis>number1</emphasis>,<emphasis>next</emphasis>..<emphasis>number2</emphasis>]</code>
          </td>

          <td>numeric range</td>

          <td>
            <code>n/a</code>
          </td>
        </tr>
      </tbody>
    </table>
                                         <table class="oper" border="0">

<caption style="margin-bottom: 9pt;">Operator Precedence Table </caption>

<tbody>

    <tr style="padding-top: 9pt; padding-bottom: 9pt;">

      <th width="50" valign="top" >Priority</th>
      <th width="105" valign="top" >JavaFX Operator</th>
      <th width="98" valign="top" >Operation</th>
      <th width="100" valign="top" >Java Operator</th>
      <th width="107" valign="top" >Order of Evaluation</th>
    </tr>
	
	
	<tr style="border-top:thin solid black;">

      <td valign="top">1</td>
      <td><code class="style1">=</code></td>
      <td>assign operator</td>
      <td>=</td>
      <td rowspan="7" valign="top" >Right to Left </td>
    </tr>
	
	<tr style="border-top:thin solid black;">

      <td rowspan="6" valign="top">2</td>
      <td><code class="style1">+=</code></td>
      <td>add and assign </td>
      <td>+=</td>
	  
	  
    </tr>
	
	<tr>

      <td><code class="style1">-=</code></td>
      <td>subtract and assign </td>
      <td><code class="style1">-+</code></td>
    </tr>
	
	<tr>

      <td><code class="style1">*=</code></td>
      <td>multiply and assign </td>
      <td><code class="style1">*=</code></td>
    </tr>
	
	<tr>

      <td><code class="style1">/=</code></td>
      <td>divide and assign </td>
      <td><code class="style1">/=</code></td>
    </tr>
	
		<tr>

      <td><code class="style1">%=</code></td>
      <td>remainder and assign </td>
      <td><code class="style1">%=</code></td>
    </tr>
	
	
	<tr>

      <td><code class="style1">/=</code></td>
      <td>divide and assign </td>
      <td><code class="style1">/=</code></td>
    </tr>
	
	
	
		<tr style="border-top:thin solid black;">
<td valign="top">3</td>
<td><code class="style1">and</code></td>
      <td>logical and </td>
      <td><code class="style1">&amp;&amp;</code></td>
      <td valign="top">Right to Left </td>
    </tr>
	
	
	<tr style="border-top:thin solid black;">
<td valign="top">4</td>
<td><code class="style1">or</code></td>
      <td>logical or </td>
      <td><code class="style1">||</code></td>
      <td valign="top">Right to Left </td>
    </tr>
	
	<tr style="border-top:thin solid black;">
      <td rowspan="7" valign="top">5</td>
      <td><code class="style1">instanceof</code></td>
      <td>inheritance operator </td>
      <td><code class="style1">instanceof</code></td>
      <td rowspan="7" valign="top">Right to Left </td>
    </tr>
	
	
    <tr>
      
      <td><code class="style1">as</code></td>
      <td>cast operator </td>
      <td><code class="style1">n/a</code></td>
    </tr>
    <tr>
	<td><code class="style1">sizeof</code></td>
	<td>array length </td>
	<td><code class="style1">n/a</code></td>
  </tr>
	<tr>
	<td><code class="style1">indexof</code></td>
	<td>ordinal position </td>
	 <td><code class="style1">n/a</code></td>
  </tr>
	<tr>
	<td><code class="style1">new</code></td>
        <td>instantiation</td>
					  <td><code class="style1">new</code></td>
  </tr>
					<tr>
					  <td><code class="style1">op()</code></td>
					  <td>function call </td>
					  <td><code class="style1">n/a</code></td>
  </tr>
					<tr>
					  <td><code class="style1">x.op()</code></td>
					  <td>member function  call </td>
					  <td><code class="style1"></code></td>
  </tr>
	
	
	
	
<tr style="border-top:thin solid black;">
      <td rowspan="5" valign="top">6</td>
      <td><code class="style1">= =</code></td>
      <td>equality</td>
      <td><code class="style1">= = </code></td>
      <td rowspan="5" valign="top">Left to Right </td>
    </tr>
	
	
						<tr>
     
      <td><code class="style1">&lt; &gt; </code></td>
      <td>inequality</td>
      <td><code class="style1">!=</code></td>
    </tr>
	
	
						<tr>
      
      <td><code class="style1"> &lt;=</code></td>
      <td>less than or equal </td>
      <td><code class="style1">&lt;=</code></td>
    </tr>
	
	
	
						<tr>
      
      <td><code class="style1">&lt;-</code></td>
      <td>&nbsp;</td>
      <td><code class="style1"></code></td>
    </tr>
	
	
	
						<tr>
      
      <td><code class="style1">&lt; &gt;</code></td>
      <td>less than / greater than </td>
      <td><code class="style1">&lt; &gt; </code></td>
    </tr>
	
	
	
	
						<tr style="border-top:thin solid black;">
      <td rowspan="2" valign="top">7</td>
      <td><code class="style1">+</code></td>
      <td>addition</td>
      <td><code class="style1">+</code></td>
      <td rowspan="2" valign="top">Right to Left </td>
    </tr>
	
	
<tr>
      
      <td><code class="style1">-</code></td>
      <td>subtraction; uniary negation </td>
      <td><code class="style1">-</code></td>
    </tr>
	



	
	<tr style="border-top:thin solid black;">
      <td rowspan="3" valign="top">8</td>
      <td><code class="style1">*</code></td>
      <td>multiplication</td>
      <td><code class="style1">*</code></td>
      <td rowspan="3" valign="top">Right to Left </td>
    </tr>
	
	
		<tr>
      
      <td><code class="style1">/</code></td>
      <td>division</td>
      <td><code class="style1">/</code></td>
    </tr>
		<tr>
      
      <td><code class="style1">%</code></td>
      <td>remainder</td>
      <td><code class="style1"></code></td>
    </tr>
	
	
  <tr style="border-top:thin solid black;">
      <td rowspan="2" valign="top">9</td>
      <td><code class="style1">++ (prefixed)</code></td>
      <td>assign</td>
      <td><code class="style1">++</code></td>
      <td rowspan="2" valign="top">Right to Left </td>
    </tr>	
	
	<tr >
      
      <td><code class="style1">xx (prefixed)</code></td>
      <td>assign</td>
      <td><code class="style1">xx</code></td>
	  
	      </tr>
	
	
	
			<tr style="border-top: thin solid black;">
			
      <td rowspan="2" valign="top">10</td>
      <td><code class="style1">++ (suffixed)</code></td>
      <td>assign</td>
      <td><code class="style1">++</code></td>
      <td rowspan="2" valign="top">Right to Left </td>
    </tr>	
	
	<tr>
      
      <td><code class="style1">xx (suffixed)</code></td>
      <td>assign</td>
      <td><code class="style1">xx</code></td>
    </tr>
	
	
	</tbody>
	</table>
	
	-->
	
<table class="oper" border="0">

<caption style="margin-bottom: 9pt;">Operator Precedence Table </caption>

<tbody>

    <tr style="padding-top: 9pt; padding-bottom: 9pt;">

      <th width="50" valign="top" >Priority</th>
      <th width="105" valign="top" >JavaFX Operator</th>
      <th width="98" valign="top" >Operation</th>
      <th width="100" valign="top" >Java Operator</th>
      <th width="107" valign="top" >Order of Evaluation</th>
    </tr>
	
	
	<tr style="border-top:thin solid black;">

      <td valign="top">1</td>
      <td><code class="style1">=</code></td>
      <td>assign operator</td>
      <td>=</td>
      <td rowspan="7" valign="top" >Right to Left </td>
    </tr>
	
	<tr style="border-top:thin solid black;">

      <td rowspan="6" valign="top">2</td>
      <td><code class="style1">+=</code></td>
      <td>add and assign </td>
      <td>+=</td>
	  
	  
    </tr>
	
	<tr>

      <td><code class="style1">-=</code></td>
      <td>subtract and assign </td>
      <td><code class="style1">-+</code></td>
    </tr>
	
	<tr>

      <td><code class="style1">*=</code></td>
      <td>multiply and assign </td>
      <td><code class="style1">*=</code></td>
    </tr>
	
	<tr>

      <td><code class="style1">/=</code></td>
      <td>divide and assign </td>
      <td><code class="style1">/=</code></td>
    </tr>
	
		<tr>

      <td><code class="style1">%=</code></td>
      <td>remainder and assign </td>
      <td><code class="style1">%=</code></td>
    </tr>
	
	
	<tr>

      <td><code class="style1">/=</code></td>
      <td>divide and assign </td>
      <td><code class="style1">/=</code></td>
    </tr>
	
	
	
		<tr style="border-top:thin solid black;">
<td valign="top">3</td>
<td><code class="style1">and</code></td>
      <td>logical and </td>
      <td><code class="style1">&amp;&amp;</code></td>
      <td valign="top">Right to Left </td>
    </tr>
	
	
	<tr style="border-top:thin solid black;">
<td valign="top">4</td>
<td><code class="style1">or</code></td>
      <td>logical or </td>
      <td><code class="style1">||</code></td>
      <td valign="top">Right to Left </td>
    </tr>
	
	<tr style="border-top:thin solid black;">
      <td rowspan="7" valign="top">5</td>
      <td><code class="style1">instanceof</code></td>
      <td>inheritance operator </td>
      <td><code class="style1">instanceof</code></td>
      <td rowspan="7" valign="top">Right to Left </td>
    </tr>
	
	
    <tr>
      
      <td><code class="style1">as</code></td>
      <td>cast operator </td>
      <td><code class="style1">n/a</code></td>
    </tr>
    <tr>
	<td><code class="style1">sizeof</code></td>
	<td>array length </td>
	<td><code class="style1">n/a</code></td>
  </tr>
	<tr>
	<td><code class="style1">indexof</code></td>
	<td>ordinal position </td>
	 <td><code class="style1">n/a</code></td>
  </tr>
	<tr>
	<td><code class="style1">new</code></td>
        <td>instantiation</td>
					  <td><code class="style1">new</code></td>
  </tr>
					<tr>
					  <td><code class="style1">op()</code></td>
					  <td>function call </td>
					  <td><code class="style1">n/a</code></td>
  </tr>
					<tr>
					  <td><code class="style1">x.op()</code></td>
					  <td>member function  call </td>
					  <td><code class="style1"></code></td>
  </tr>
	
	
	
	
<tr style="border-top:thin solid black;">
      <td rowspan="5" valign="top">6</td>
      <td><code class="style1">= =</code></td>
      <td>equality</td>
      <td><code class="style1">= = </code></td>
      <td rowspan="5" valign="top">Left to Right </td>
    </tr>
	
	
						<tr>
     
      <td><code class="style1">&lt; &gt; </code></td>
      <td>inequality</td>
      <td><code class="style1">!=</code></td>
    </tr>
	
	
						<tr>
      
      <td><code class="style1"> &lt;=</code></td>
      <td>less than or equal </td>
      <td><code class="style1">&lt;=</code></td>
    </tr>
	
	
	
						<tr>
      
      <td><code class="style1">&lt;-</code></td>
      <td>&nbsp;</td>
      <td><code class="style1"></code></td>
    </tr>
	
	
	
						<tr>
      
      <td><code class="style1">&lt; &gt;</code></td>
      <td>less than / greater than </td>
      <td><code class="style1">&lt; &gt; </code></td>
    </tr>
	
	
	
	
						<tr style="border-top:thin solid black;">
      <td rowspan="2" valign="top">7</td>
      <td><code class="style1">+</code></td>
      <td>addition</td>
      <td><code class="style1">+</code></td>
      <td rowspan="2" valign="top">Right to Left </td>
    </tr>
	
	
<tr>
      
      <td><code class="style1">-</code></td>
      <td>subtraction; uniary negation </td>
      <td><code class="style1">-</code></td>
    </tr>
	



	
	<tr style="border-top:thin solid black;">
      <td rowspan="3" valign="top">8</td>
      <td><code class="style1">*</code></td>
      <td>multiplication</td>
      <td><code class="style1">*</code></td>
      <td rowspan="3" valign="top">Right to Left </td>
    </tr>
	
	
		<tr>
      
      <td><code class="style1">/</code></td>
      <td>division</td>
      <td><code class="style1">/</code></td>
    </tr>
		<tr>
      
      <td><code class="style1">%</code></td>
      <td>remainder</td>
      <td><code class="style1"></code></td>
    </tr>
	
	
  <tr style="border-top:thin solid black;">
      <td rowspan="2" valign="top">9</td>
      <td><code class="style1">++ (prefixed)</code></td>
      <td>assign</td>
      <td><code class="style1">++</code></td>
      <td rowspan="2" valign="top">Right to Left </td>
    </tr>	
	
	<tr >
      
      <td><code class="style1">-- (prefixed)</code></td>
      <td>assign</td>
      <td><code class="style1">--</code></td>
	  
	      </tr>
	
	
	
			<tr style="border-top: thin solid black;">
			
      <td rowspan="2" valign="top">10</td>
      <td><code class="style1">++ (suffixed)</code></td>
      <td>assign</td>
      <td><code class="style1">++</code></td>
      <td rowspan="2" valign="top">Right to Left </td>
    </tr>	
	
	<tr>
      
      <td><code class="style1">-- (suffixed)</code></td>
      <td>assign</td>
      <td><code class="style1">--</code></td>
    </tr>
	
	
	</tbody>
	</table>
   
               
	
	
	
	
	
	
	
	
	
	
<!-- *********** operator table ************************* -->


<para>
Because these operators provide standard functionality, a simple example of their use should be all that is required:
</para>   

<programlisting>
import java.lang.System;
import java.lang.Math;

var x = 2;
var y = 4;
var a = true;
var b = false;
System.out.println(x == y); // prints false 
System.out.println(x &lt;&gt; y); // prints true
System.out.println(x &lt; y);  // prints true
System.out.println(x &gt; y);  // prints false
System.out.println(x &gt;= y); // prints false
System.out.println(x &lt;= y);  // prints true
System.out.println(x + y);  // prints 6
System.out.println(x - y);  // prints -2
System.out.println(x * y);  // prints 8
System.out.println(x / y);   // prints 0
System.out.println(x % y);   // prints 2
System.out.println(a and b); // prints false
System.out.println(a or b);  // prints true
System.out.println(not a);  // prints false
System.out.println(sizeof [x,y]); // prints 2 
System.out.println([x,y][e | indexof e == 0]); // prints [ 2 ]  
System.out.println(if (a) x else y); // prints 2
System.out.println(for(q in [x, y] where q &lt; 3) q); // prints [ 2 ]
System.out.println(Math.max(x, y)); // prints 4
System.out.println("abc".toUpperCase()); // prints ABC 
System.out.println(x); // prints 2
</programlisting>


<!-- 
<para>
The demo above produces the following output:
</para>

<programlisting>

false
true
true
false
false
true
6
-2
8
0
2
false
true
false
2
[ 2 ]
2
[ 2 ]
4
ABC
2
</programlisting>

-->


</sect2> </chapter>


