<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<?xml-stylesheet href="docbook.css" type="text/css"?>
<chapter id="Logic">
<title>Expressions</title>


<sect1 id="lintro"><title>Introduction</title>
<para>
<emphasis>This Chapter explains general expressions and logical expressions. 
</emphasis>  
</para>

<!--
<sect2 id="lquestions"><title>Questions</title>
<para>
<emphasis>We need to explain all statement forms, starting with expression statements. Control flow statement section should follow a general intro and a brief bulleted list of other statement forms.
</emphasis>
</para>

<para><emphasis>The section below should really discuss methods, functions and operations. </emphasis></para>

<para><emphasis>Where should we discuss packages, JavaFX Script file structure, and how to call my own custom Java classes? </emphasis></para>


</sect2>  -->

</sect1>
<!--
        <sect1 id="operations">
          <title>Operations and Functions</title>
	  
	  <para><emphasis role="bold">An operation is NOT an expression (below)</emphasis></para>
	  
	  <para><emphasis>This section really should discuss methods, functions and operations. </emphasis></para>

          <para>In JavaFX, procedures are declared with the
          <code>operation</code> keyword. For example:</para>

          <programlisting>        import java.lang.StringIndexOutOfBoundsException;

        operation substring(s:String, n:Number): String {
              try {
                  return s.substring(n);
              } catch (e:StringIndexOutOfBoundsException) {
                  throw "sorry, index out of bounds";
              }
        }
</programlisting>

          <para>The above example defines a new procedure called
          "<code>substring</code>" with two arguments, the first named "s" of
          type "String", the second named "n" of type "Number", returning type
          "String".</para>

          <para>In addition to the <code>assignment</code>,
          <code>delete</code>, and <code>insert</code> statements mentioned
          above, the following statements are possible inside the body of an
          operation :</para>
	  
</sect1>
       
	 
<sect1 id="statem">
          <title>Statements</title>
	  
	  <para><emphasis>Introduction to Statements. </emphasis></para>

         
        
	  
</sect1>
	 -->

  <sect1 id="expr">
    <title>Overview</title>

    <para>An expression is a combination of values, variables, and operators that returns a new value. If you type an
    expression on the command line, the interpreter evaluates it and displays
    the result.</para>

    <para>Expressions use operators to associate entities of some type in order to 
    produce the resulting value.</para>

          <note>You can use a primary expression as a statement. </note>
	  
	  <para><emphasis role="bold">
          Example:</emphasis></para>

          <programlisting>       System.out.println("Hello World!");
</programlisting>


</sect1>


<!-- 


Block Expression

A block expression consists of a list of expressions surrounded by curly braces and separated by semicolons. The value of a block expression is the value of its last expression. So, the above example could also be written like this, in JavaFX script:

        import java.lang.Math;

        var rand = (Math.random() * 100).intValue();
        var s:String =
           if (rand % 1 == 0) {
              "rand is odd";
           } else {
              "rand is even";
           };
        System.out.println(s);

Or, alternatively the braces can be omitted:

        import java.lang.Math;

        var rand = (Math.random() * 100).intValue();
        var s:String = if (rand % 1 == 0) "rand is odd" else "rand is even";
        System.out.println(s);

In Java, we have both an "if" statement, and a conditional expression, e.g, a < b ? a : b. As you can see, thanks to block expressions, the JavaFX "if" expression takes the place of both.



-->



<sect1 id="logical"><title>Logical Expressions</title>

<para>This section lists and defines JavaFX&trade; Script logical expressions. </para>
	
        <sect2 id="if">
          <title><code>if</code> Statement</title>

          <para>The <code>if</code> statement is like the statement in the Java&trade; programming language, except
          that curly braces are always required around the <code>then</code> and <code>else</code>
          clauses, unless the the <code>else</code> clause is another <code>if</code>
          statement.</para>

          <para><emphasis role="bold">Example:</emphasis></para>

          <programlisting>       if (condition1) {
           System.out.println("Condition 1");
       } else if (condition2) {
           System.out.println("Condition2");
       } else {
           System.out.println("not Condition 1 or Condition 2");
       }
</programlisting>
        
</sect2>
	
	
<sect2 id="while">
          <title><code>while</code> Statement</title>

          <para>The JavaFX Script <code>while</code> statement is like the statement in the Java Programming language, except
          that curly braces are always required around the body.</para>

          <para><emphasis role="bold">Example:</emphasis></para>

          <programlisting>       var i = 0;
       while (i &lt; 10) {
           if (i &gt; 5) {
              break;
           }
           System.out.println("i = {i}");
           i += 1;
       }
</programlisting>
        
</sect2>


<sect2 id="try">
          <title><code>try</code> Statement</title>

          <para>The JavaFX Script <code>try</code> statement is like the statement in the Java Programming language, but with
          JavaFX Script variable declaration syntax. </para>
	  
	  <note>In JavaFX Script any object can
          be thrown and caught, not just those that extend
          <code>java.lang.Throwable</code>.</note>

          <para><emphasis role="bold">Example:</emphasis></para>

          <programlisting>       try {
          throw "Hello";
       } catch (s:String) {
          System.out.println("caught a String: {s}");
       } catch (any) {
          System.out.println("caught something not a String: {any}");
       } finally {
          System.out.println("finally...");
       }
</programlisting>
        </sect2>

<sect2 id="for2">
     <title><code>for</code> Statement</title>

   <para>The body of a <code>for</code> statement is executed for each element generated by the list comprehension.</para>
	  
<para><emphasis role="bold">ToDo:  We need a new or expanded intro paragraph for this section.  </emphasis></para>

<para><emphasis role="bold">Examples:</emphasis></para>

<programlisting>        for (i in [0..10]) {
             System.out.println("i = {i}");
        }

        // print only the even numbers using a filter
        for (i in [0..10] where i % 2 == 0) {
             System.out.println("i = {i}");
        }

        // print only the odd numbers using a range expression
        for (i in [1,3..10]) {
             System.out.println("i = {i}");
        }

        // print the cartesian product
        for (i in [0..10], j in [0..10]) {
             System.out.println(i);
             System.out.println(j);
        }

</programlisting>

</sect2>

<sect2 id="return">
          <title><code>return</code> Statement</title>

          <para>The JavaFX Script <code>return</code> statement is like
          the statement in the Java Programming language:</para>

          <para><emphasis role="bold">Example:</emphasis></para>

          <programlisting>       operation add(x, y) {
           return x + y;
       }
</programlisting>
</sect2>

          <sect2 id="throw">
            <title><code>throw</code> Statement</title>

            <para>The JavaFX Script <code>throw</code> statement is like the statement in the Java Programming language.
            However; any object can be thrown, not just those that extend <code>java.lang.Throwable</code>.</para>

            <para>Examples:</para>

            <programlisting>       import java.lang.Exception;

       operation foo() {
           throw new Exception("this is a java exception");
       }

       operation bar() {
           throw "just a string";
       }
</programlisting>
          </sect2>

<sect2 id="break">
    <title><code>break</code> and <code>continue</code> Statements</title>

     <para>The JavaFX Script <code>break</code> and <code>continue</code>
     statements are like the statement in the Java Programming language; however labels are not supported. As
     in Java, <code>break</code> and <code>continue</code> must appear
     inside the body of a <code>while</code> or <code>for</code>
     statement.</para>

<para><emphasis role="bold">Examples:</emphasis></para>

<programlisting>       operation foo() {
          for (i in [0..10]) {
              if (i &gt; 5) {
                  break;
              }
              if (i % 2 == 0) {
                  continue;
              }
              System.out.println(i);
          }
       }

       operation bar() {
           var i = 0;
           while (i &lt; 10) {
               if (i &gt; 5) {
                   break;
               }
               if (i % 2 == 0) {
                   continue;
               }
               System.out.println(i);
               i += 1;
           }
       }
</programlisting>
          </sect2>

          <sect2 id="do">
            <title><code>do</code> Statement</title>

            <para>The JavaFX Script <code>do</code> statement allows you to execute a
            block of JavaFX Script code in a background thread while allowing the AWT
            Event Dispatch Thread to continue processing events. This prevents the UI from appearing to hang. </para>
	    
	    <para> Currently, this is
            implemented by using <code>java.awt.EventQueue</code> to handle
            events while the background thread is executing. Normally, all
            JavaFX Script code executes in the AWT Event Dispatch Thread. Only code
            contained in the body of a <code>do</code> statement is allowed to
            execute in another thread. <CODE>do</CODE> statement code must only access Java language objects
            (and those objects must handle their own thread synchronization,
            if necessary).</para>

            <para><emphasis role="bold">Example:</emphasis></para>

            <programlisting>        import java.net.URL;
        import java.lang.StringBuffer;
        import java.lang.System;
        import java.io.InputStreamReader;
        import java.io.BufferedReader;



        // in the AWT EDT
        var result = new StringBuffer();

        do {
             // now in a background thread
             var url = new URL("http://www.foo.com/abc.xml");
             var is = url.openStream();
             var reader = new BufferedReader(new InputStreamReader(is));
             var line;
             while (true) {
                  line = reader.readLine();
                  if (line == null) {
                       break;
                  }
                  result.append(line);
                  result.append("\n");
             }
        } 

        // now back in the EDT
        System.out.println("result = {result}"); 
</programlisting>

 <para>In the above example, the code which is executing in
 the EDT appears to be blocked during the execution of the body of
the <code>do</code> statement. However, the system creates a new event
dispatch loop on the stack while waiting for the background thread to complete. As a result, GUI events continue to be processed while the <code>do</code> statement executes.</para>
	    
<note>This isn't a perfect solution. It can cause many event dispatch loops to be placed on the stack, and this can cause a stack overflow exception.</note>
	    
	    
</sect2>

<sect2 id="dolater">
  <title><code>do later</code> Statement</title>

<para>The <code>do</code> statement has a second form (<code>do
later</code>) that allows for asynchronous execution of its body
in the EDT rather than synchronous execution in a background
thread. This mimics the functionality of
 <code>java.awt.EventQueue.invokeLater</code>) </para>
	    
<para><emphasis role="bold">Example:</emphasis></para>

 <programlisting>        import java.lang.System;
        var saying1 = "Hello World!";
        var saying2 = "Goodbye Cruel World!";
        do later {
             System.out.println(saying1);
        }
        System.out.println(saying2);
</programlisting>

            <para>Running this code produces the following output:</para>

            <programlisting>        Goodbye Cruel World!
        Hello World!
</programlisting>
          </sect2>

</sect1>

</chapter>



