<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter>
  <title>Objects and Classes</title>

  <section>
    <title>Objects</title>

    <para>The previous chapter presented a basic example of how to use
    objects. This section describes them in more detail. Because objects and
    classes (and their attributes, operations, and functions) are so closely
    related, there is a slight amount of cross referencing in the code samples
    contained in this chapter. </para>

    <para>Objects may be allocated using a declarative syntax consisting of
    the name of the class followed by a curly brace delimited list of
    attribute initializers. Each initializer consists of the attribute name
    followed by a colon, followed by an expression which defines its value
    (see <link linkend="???">Incremental and Lazy Evaluation</link> for JavaFX
    Script's support for incremental evaluation in this context).</para>

    <para></para>

    <para>Here is an example:</para>

    <para></para>

    <programlisting>var chris = Person {
     name: "Chris"
     children:
     [Person {
         name: "Dee"
     },
      Person {
         name: "Candice"
     }]
};</programlisting>

    <para></para>

    <para>It is also possible to declare local variables inside an object
    literal. Such variables are only visible within the scope of the object
    literal itself. In addition, a variable referring to the object being
    initialized may be declared by using the <code>var</code> keyword as a
    pseudo-attribute, for example:</para>

    <para></para>

    <programlisting>var chris = Person {
     var: me
     name: "Chris"
     var child1 = Person {
          name: "Dee"
          parent: me
     }
     var child2 = Person { name: "Candice" }
     children: [child1, child2]
};
</programlisting>

    <para></para>

    <para>Java programming language object allocation syntax is also
    supported. In such cases, it is possible to pass arguments to the class's
    constructor:</para>

    <para></para>

    <para><programlisting>import java.util.Date;
import java.lang.System;

var date1 = new Date(95, 4, 23); // invoke a constructor
var date2 = Date { // create the same date as an object literal
     month: 4
     date: 23
     year: 95
};
System.out.println(date1 == date2);  // prints true
</programlisting></para>

    <para>In fact, code written in JavaFX Script can interact with the Java
    programming language in a number of ways: it can import classes, create
    new objects, invoke methods, and implement interfaces. The following code
    snippet provides an example:</para>

    <para></para>

    <para><programlisting>import javax.swing.JFrame;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.lang.System;

var frame = new JFrame();
var button = new JButton("Press me");
frame.getContentPane().add(button);
button.addActionListener(new ActionListener() {
        operation actionPerformed(event) {
            System.out.println("You pressed me");
        }
     });
frame.pack();
frame.setVisible(true);
</programlisting></para>

    <para></para>

    <para>This code displays the following on screen:</para>

    <para></para>

    <screenshot>
      <mediaobject>
        <imageobject>
          <imagedata fileref="frame.png" />
        </imageobject>
      </mediaobject>
    </screenshot>

    <para></para>

    <para>Of course, this is not the preferred way to create GUIs in JavaFX
    Script. The following code uses object literals to produce the same
    result:</para>

    <para></para>

    <programlisting>Frame {
     content: Button {
          text: "Press Me"
          action: operation() {
          System.out.println("You pressed me");
          }
     }
     visible: true
}
</programlisting>

    <para></para>
  </section>

  <section>
    <title>Defining and Extending Classes</title>

    <para></para>

    <para>The syntax for specifying a class is the <code>class</code> keyword
    followed by the class name, optionally the <code>extends</code> keyword,
    and a comma separated list of the names of base classes, an open curly
    brace, a list of attributes, functions, and operations that each end in a
    semicolon, and a closing curly brace.</para>

    <para></para>

    <para>Here is an example:</para>

    <para></para>

    <programlisting>class Person {
     attribute name: String;
     attribute parent: Person inverse Person.children;
     attribute children: Person* inverse Person.parent;
     function getFamilyIncome(): Number;
     function getNumberOfChildren(): Number;
     operation marry(spouse: Person);
}</programlisting>

    <para></para>

    <para><link linkend="???"><emphasis role="bold">[to-do: Engineering to
    provide more details about defining and extending classes
    here]</emphasis></link></para>

    <para></para>
  </section>

  <section>
    <title>Attributes, Operations, and Functions</title>

    <para></para>

    <para><emphasis role="bold">Attributes</emphasis></para>

    <para>Attributes are declared using the <code>attribute</code> keyword
    followed by the attribute's name, a colon, the attribute's type,
    optionally a cardinality specification (<code>?</code> meaning optional,
    <code>*</code> meaning zero or more, or <code>+</code> meaning one or
    more), and an optional <code>inverse</code> clause specifying a
    bidirectional relationship to another attribute in the class of the
    attributes' type, and terminated with a semicolon.</para>

    <para></para>

    <para><programlisting>attribute AttributeName : AttributeType Cardinality inverse ClassName.InverseAttributeName;</programlisting></para>

    <para>If the <code>inverse</code> clause is present, the interpreter
    <ulink url="???"><emphasis role="bold">[question: do we still use the term
    "interpreter"?]</emphasis></ulink> automatically performs updates
    (<code>insert</code>, <code>delete</code> or <code>replace</code>
    depending on the kind of update and cardinalities of the attributes) on
    the inverse attribute whenever the attribute's value is modified.
    Multi-valued attributes (i.e. those declared with the <code>*</code> or
    <code>+</code> cardinality specifiers) are represented as arrays. You can
    access them using the <code>[]</code> operator and update them using the
    <code>insert</code> and <code>delete</code> operators.</para>

    <para></para>

    <para>It is also possible to declare initial values for attributes. The
    initializers are evaluated in the order the attributes are specified in
    the class declaration in the context of the newly created object:</para>

    <para></para>

    <programlisting>import java.lang.System;

class X {
     attribute a: Number;
     attribute b: Number;
}

attribute X.a = 10;
attribute X.b = -1;

var x = new X();
System.out.println(x.a); // prints 10
System.out.println(x.b); // prints -1
</programlisting>

    <para></para>

    <para>It is also possible to declare an incrementally evaluated expression
    as the value of an attribute using the <code>bind</code> operator:</para>

    <para></para>

    <programlisting>import java.lang.System;

class X {
     attribute a: Number;
     attribute b: Number;
     attribute c: Number;
}

attribute X.a = 10;

<emphasis role="bold">attribute X.b = bind a + 10;
attribute X.c = bind lazy b + 10;</emphasis>

var x = new X();
System.out.println(x.a); // prints 10
System.out.println(x.b); // prints 20
System.out.println(x.c); // prints 30
x.a = 5;
System.out.println(x.a); // prints 5
System.out.println(x.b); // prints 15
System.out.println(x.c); // prints 25       
</programlisting>

    <para></para>

    <para><emphasis role="bold">Operations</emphasis></para>

    <para></para>

    <para>Procedures are declared with the <code>operation</code> keyword. For
    example:</para>

    <para></para>

    <programlisting>import java.lang.StringIndexOutOfBoundsException;

operation substring(s:String, n:Number): String {
     try {
          return s.substring(n);
     } catch (e:StringIndexOutOfBoundsException) {
          throw "sorry, index out of bounds";
     }
}
</programlisting>

    <para></para>

    <para>The above example defines a new procedure called
    <code>substring</code> with two arguments, the first named <code>s</code>
    of type <code>String</code>, the second named <code>n</code> of type
    <code>Number</code>, returning type <code>String</code>. In addition to
    the <link linkend="???">assignment</link> (<code>=</code>), <code><link
    linkend="???">delete</link></code>, and <code><link
    linkend="???">insert</link></code> statements, the following statements
    are possible inside the body of an operation: <ulink url="???">[tbd:
    engineering must provide the content for this section]</ulink></para>

    <para></para>

    <para><emphasis role="bold">Functions</emphasis></para>

    <para><emphasis>Functions</emphasis> represent a pure functional subset of
    the JavaFX Script programming language. The body of a function may only
    contain a series of variable declarations and a <code>return</code>
    statement. The JavaFX Script programming language also provides procedures
    (called <emphasis>operations</emphasis>, see below) which may contain any
    number of statements including conditional statements, looping statements,
    try/catch, etc. Generally speaking, the order in which the functions are
    given is not significant <emphasis role="bold"><ulink url="???">[to-do:
    engineering to provide details for when ordering does
    matter]</ulink></emphasis> . Following is a very simple example of a
    functional program:</para>

    <para></para>

    <para><programlisting>
function z(a,b) {
     var x = a + b;
     var y = a - b;
     return sq(x) / sq (y);
}

function sq(n) {return n * n;}

function main() {
     return z(5, 10);
}
</programlisting></para>

    <para>There are no mandatory type declarations, although the language is
    statically typed. The most commonly used data structure is the array,
    described in section <ulink url="???"><emphasis role="bold">[to-do:
    provide link to section on arrays]</emphasis></ulink></para>
  </section>
</chapter>
