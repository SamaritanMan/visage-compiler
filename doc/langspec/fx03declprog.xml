<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="variable-types-sequences">
  <title>Variables, Data Types, and Sequences</title>

  <sect1 id="variables">
    <title>Variables</title>


    <para>As mentioned in Chapter 1, the <code>var</code> keyword is used to
    introduce a new variable into your program. A variable's type may be
    specified in its declaration, but doing so is optional. If a variable's
    type is omitted from the declaration, it may be inferred from its
    use.</para>
    
    <para>Variable naming conventions are the same as in the Java programming language. classes should capitalize the first letter of each word ( <code>MyClass</code> ); function names should begin in lowercase but capitalize the first letter of each subsequent word ( <code>myFunctionName</code> ); constants should appear in all uppercase with words separated by the underscore character ( <code>MY_CONSTANT</code> )</para>



    <para><emphasis role="bold">TBD: The rules for type inferencing have not
    yet been decided (JFXC-430.) </emphasis></para>



    <para>A variable declaration takes the form:</para>



    <para><programlisting>var <emphasis>variableName</emphasis> : type = <emphasis>initializer</emphasis>;</programlisting></para>



<para><emphasis role="bold">Example:</emphasis></para>



    <programlisting>var num:Number = 1;</programlisting>



    <para>This declares a new variable named <code><emphasis>num</emphasis></code> whose value is defined to
    consist of an instance of type <code>Number</code> and whose initial value
    is 1.</para>



    <para><emphasis role="bold">TO-DO: Discuss variable scope here
    (JFXC-441.)</emphasis></para>
    
    
<para> The lifetime of a variable is at least the lifetime of the containing block. It can be longer if the variable is captured by a closure. Top-level variables are visible inside functions and
classes. They act like private static fields of the module class. </para> 


    <para>Because the <emphasis>: typeName</emphasis> and <emphasis>=
    initializer</emphasis> portions of the declaration are optional, the
    following code is equivalent to the above:</para>



    <para><emphasis role="bold">TO-DO: Engineering suggests that this is not
    necessarily equivalent. Explain why here (JFXC-442.)</emphasis></para>



    <para><programlisting>var num = 1;</programlisting></para>



    <para>Any sequence of characters (including whitespace) contained in
    french quotes &lt;&lt;&gt;&gt; is treated as an identifier. This makes it
    possible to use JavaFX&trade; Script language keywords (or other normally illegal
    identifiers) as class, variable, function, or attribute names. </para>
    
    
    <para><emphasis role="bold">Example:</emphasis></para>

    <para><emphasis role="bold">TBD: The rules for what makes a valid
    identifier have not yet been decided (JFXC-360.)</emphasis></para>

    <para><programlisting>var &lt;&lt;delete&gt;&gt; = 100;</programlisting></para>


    <para>This also makes it possible to invoke methods (written in the Java
    programming language) whose names are the same as JavaFX Script language keywords.</para>
    
    <para><emphasis role="bold">Example:</emphasis></para>

    <programlisting>import javax.swing.JTextArea;

var textArea = new JTextArea();
textArea.&lt;&lt;insert&gt;&gt;("Hello", 0);</programlisting>

    <para><emphasis role="bold">TBD: The rules for default values have not yet
    been decided (JFXC-431.)</emphasis></para>

    <para><emphasis role="bold">TO-DO: Define variable terminology here
    (JFXC-444.)</emphasis></para>

    <para><emphasis role="bold">TO-DO: Discuss variable naming conventions
    here (same as in the Java programming language; JFXC-445.)
    </emphasis></para>

  </sect1>

  <sect1 id="datatypes">
    <title>Data Types</title>

    <para>The JavaFX Script programming language provides four built-in data types:
    <code>String</code>, <code>Boolean</code>, <code>Number</code>, and
    <code>Integer</code>. These types correspond to the Java&trade; programming
    language as follows:</para>

   
     <para>JavaFX Script programming language types to correspond to the Javaâ„¢ programming
          language types listed on the table below:</para>

          <table cellpadding="5" cellspacing="5" width="67%" style=" border-top: 1px solid black; border-bottom: 1px solid black;">

<caption>JavaFX Script Data Types</caption>


            <tbody>
              <tr>
                <th style="text-decoration: underline; font-family: sans-serif; margin-left: 3pt;">JavaFX</th>

                <th style="text-decoration: underline; font-family: sans-serif; margin-left: 3pt; ">Java</th>
              </tr>

              <tr>
                <td>
                  <code>String</code>
                </td>

                <td>
                  <code>java.lang.String</code>
                </td>
              </tr>

              <tr>
                <td>
                  <code>Boolean</code>
                </td>

                <td>
                  <code>java.lang.boolean</code>
                </td>
              </tr>

              <tr>
                <td>
                  <code>Number</code>
                </td>

                <td>
                  <code>java.lang.Number</code>
                </td>
              </tr>

              <tr>
                <td>
                  <code>Integer</code>
                </td>

                <td>
                  <code>byte,short,int,long,BigInteger</code>
                </td>
              </tr>
            </tbody>
          </table>
    




    <para><emphasis role="bold">TO-DO: Provide discuss</emphasis><emphasis
    role="bold">ion that Integer and Number are NOT java.lang.Integer and
    java.lang.Num</emphasis>ber;</para>

    <para><emphasis role="bold">String IS java.lang.String, Boolean MIGHT be
    java.lang.Boolean but it's still TBD (JFXC-446.)</emphasis></para>



    <para><emphasis role="bold">TO-DO: Describe how new types are constructed
    (creating classes; importing classes; </emphasis><emphasis
    role="bold">sequence of known types JFXC-447) </emphasis></para>


  <para><emphasis role="bold">Examples:</emphasis></para>

<programlisting>var s = "Hello";
s.toUpperCase(); // yields "HELLO";
s.substring(1);  // yields "ello";
var n = 1.5;
n.intValue();    // yields 1
(1.5).intValue();    // yields 1
s.substring(n);  // yields "ello"
var b = true;
b instanceof Boolean; // yields true
</programlisting>


<para>Coercions are automatically performed on numeric types when passing
arguments or return values to/from methods written in the Java programming language. In addition, implicit truncating coercions are performed when converting <code>Number</code>s to <code>Integer</code>s.</para>

    <para><emphasis role="bold">TBD: The rules for coercions have not yet been
    decided (JFXC-433.)</emphasis></para>

    <para><emphasis role="bold">TBD: The full range of Number is yet to be
    decided (JFXC-434.)</emphasis></para>
    
    <sect2 id="strliteral"><title>String Literals and String
    Expressions</title>


    <para>Specify a literal character string is specified with
    single quotes:</para>


    <programlisting>var s = 'Hello';
</programlisting>

    <para>or with double quotes:</para>

   <programlisting>var s = "Hello";</programlisting>

    <para>In the latter case, you can embed a JavaFX Script expression using
    curly brackets ( {} ):</para>


    <programlisting>var name = 'Joe';
var s = "Hello {name}"; // s = 'Hello Joe'
</programlisting>

    <para></para>

    <para>When using curly brackets, the compiler infers a type for the embedded
    expression that it can coerce to a String.</para>


    <para>The embedded expression can itself contain quoted strings, which, in
    turn, may contain further embedded expressions:</para>

    <programlisting>var answer = true;
var s = "The answer is {if (answer) "Yes" else "No"}"; // s = 'The answer is Yes'
</programlisting>

    <para>Unlike the Java programming language, a JavaFX Script programming language double-quoted
    String literal can contain newlines:</para>

    <programlisting> var s = "This
          contains
          new lines";</programlisting>
	  
</sect2>

<sect2 id="strformat"><title>String Formatting</title>


    <para>It is possible to control how Numbers and Dates are converted to
    character strings by providing an additional formatting prefix in a String
    expression. Such a prefix follows the specification of
    java.util.Formatter. </para>
    
    
    <para><emphasis role="bold">Example:</emphasis></para>

    <programlisting>import java.util.Date;
var hexStr = "hex of 13 is 0x{%02X 13}"; // hexStr = "hex of 13 is 0x0D"        
var date = new Date(107, 10, 11);
var dateStr = "{%tc date}" // dateStr = "Sun Nov 11 00:00:00 PST 2007"
</programlisting>

</sect2>

  </sect1>

   <sect1 id="sequences">
    <title>Sequences</title>



    <para>In addition to the basic types described above, the JavaFX Script programming language also
    supports data structures known as <emphasis>sequences</emphasis>.
    Sequences are similar to Java programming language arrays, but there are
    differences as well. The following code presents some examples:</para>

    <programlisting>var week_days = ["Mon","Tue","Wed","Thur","Fri"];
var days = [week_days, ["Sat","Sun"]];
</programlisting>


    <para>Sequences represent ordered lists of objects. Sequences are not
    themselves objects, however, and do not nest. Sequences are compared for
    equality by value; if their lengths are equal and their elements are
    equal, then they are equal. Expressions that produce nested sequences (as
    in the initialization of "days" above) are automatically flattened.</para>


<para><emphasis role="bold">Example:</emphasis></para>


    <programlisting>days == ["Mon","Tue","Wed","Thur","Fri","Sat","Sun"]; // returns true</programlisting>

    <para>In addition, a single object is equal to a sequence of one
    object:</para>

    <programlisting>1 == [1]; // returns true</programlisting>

    <para>As such, a single object may be used any time a sequence is
    expected.</para>

    <para>Sequence types are declared with the <code>[]</code>
    annotation:</para>

    <para><programlisting>var xs:Number[]; // sequence of Number
var strs:String[]; // sequence of String
</programlisting></para>

    <para>The elements of a sequence must have a common type, which may be
    <code>Object</code>. Sequences may be indexed like Java programming
    language arrays:</para>

    <programlisting>var wednesday = days[2];
</programlisting>


    <para>There is also a shorthand notation using ".." for sequences whose
    elements form an arithmetic series, as in:</para>

    <programlisting>var nums = [1..100];
</programlisting>

    <para>This shorthand eliminates the need to manually type out each
    element.</para>

    <para>The following example provides definitions of the factorial
    function, and of a number "result" which is the sum of the odd numbers
    between 1 and 100:</para>

    <para><programlisting>function fac(n:Number[]) {return product([1..n]);}
var result = sum([1..100 step 2]);
</programlisting></para>

    <para>The <code>[]</code> operator also expresses selection in the form of
    predicates. Predicates take the form:</para>

    <para><programlisting>sequence[variableName| booleanExp]</programlisting></para>

    <para>For example:</para>

    <para><programlisting>var nums = [1,2,3,4];
var numsGreaterThanTwo = nums[n|n &gt; 2];</programlisting></para>

    <para>Such an expression returns a new sequence consisting of those
    elements of the original sequence that satisfy the predicate.</para>

    <sect2 id="slice"><title>Sequence Slices and
    Operators</title>

    <para>Sequence <emphasis>slices </emphasis>provide access to portions of a
    sequence:</para>

     <programlisting>seq[a..b] // the sequence between the indicies a and b inclusive
seq[a..&lt;b] // the sequence between the indicies a inclusive and b exclusive
seq[a..] // same as seq[a..&lt;sizeof seq]
seq[a..&lt;] // for consistancy.  This is the same as seq[a..&lt;sizeof seq-1] 

</programlisting>


    <para><code>insert</code> inserts a new element into a
    sequence:</para>

    <programlisting>insert x into seq
insert x before seq[idx]
insert x after seq[idx]
</programlisting>

<para><emphasis role="bold">Examples:</emphasis></para>


    <programlisting>var nums = [1..5];
var x = 6;
insert x into nums; // result is [1,2,3,4,5,6]
x++;
insert x before nums[0]; // result is [7,1,2,3,4,5,6]
x++;
insert x after nums[3]; // result is [7,1,2,3,8,4,5,6]
</programlisting>


    <para><code>delete</code> removes an element from a
    sequence:</para>


    <programlisting>delete seq
delete x from seq
delete seq[idx]
delete seq[a..b] // and all other slice forms: a..&lt;b a..
</programlisting>


<para><emphasis role="bold">Examples:</emphasis></para>


    <programlisting>var nums = [1..5];
delete 2 from nums; // result is [1,3,4,5]
delete nums[0];// result is [3,4,5]
nums = [1..10]; // result is [1,2,3,4,5,6,7,8,9,10]
delete nums[3..7]; // result is [1,2,3,9,10]
delete nums; // result is []
nums = [1..10];
delete nums[5..]; // result is [1,2,3,4,5]
delete nums[0..&lt;]; // result is [5]</programlisting>


    <para>The <code>sizeof</code> operator returns the number of elements in a
    sequence.</para>

    <programlisting>var nums = [1..5]
sizeof nums // returns 5
</programlisting>


    <para>The <code>indexof</code> operator returns the ordinal position of an
    element within a sequence:</para>

    <programlisting>var nums = [1,2,3,4];
var numsExceptTheFirstTwo = nums[n|indexof n &gt; 1];</programlisting>


    <para>The <code>reverse</code> operator reverses the sequence:</para>


    <programlisting>reverse seq
</programlisting>

<para><emphasis role="bold">Example:</emphasis></para>


    <programlisting>var nums = [1..5];
reverse nums; // result is [5,4,3,2,1]</programlisting>
</sect2>

  </sect1>
</chapter>