<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">


<chapter id="classintro">

<title>Classes and Objects</title>


<sect2 id="class"><title>Classes</title>

<para>Classes allow for the creation of user-defined types.  
 The JavaFX Script programming language supports 
multiple inheritance, and as such, defines some new terminology and rules: </para>

<itemizedlist>
<listitem>A <emphasis>plain class</emphasis> is any class that directly or indirectly extends a class written in the Java programming language.</listitem>

<listitem>A <emphasis>compound class</emphasis> is any class that is not a plain class.</listitem>

<listitem>By default, classes written in the JavaFX Script programming language are compound classses.</listitem>

<listitem>Classes can extend, at most, one plain class; if it does, it becomes 
a plain class. It may also extend any number of compound classes, or Java programming language interfaces. </listitem>

<!--
<FONT SIZE="-1"><SUpara>
<A HREF="#foot1">1</A>
</SUpara></FONT>  -->

</itemizedlist>

<para>
The syntax for specifying a class is the <code>class</code> keyword followed by the class name, optionally the <code>extends</code> keyword, and a comma 
separated list of the names of base classes, an open curly brace, a list of attributes and functions that each end in a semicolon, and a closing curly brace.</para>

<programlisting>
&nbsp;

<!-- **** <FONT COLOR="RED">ENGINEERING TO FILL IN THIS BOX WITH A 
FORMAL SYNTAX LISTING</FONT> *** -->
</programlisting>

</sect2>
<sect2 id="importing"><title> Importing Classes</title> 

<para>
Import statements behave the same as in the Java programming language.
The syntax is: </para>


<programlisting>
import <emphasis>PackageName</emphasis>.<emphasis>ClassName</emphasis>;</programlisting>

or 

<programlisting>import <emphasis>PackageName</emphasis>.*;
</programlisting>

<para>
 If import statements are present, they must appear before 
any other application code. The JavaFX Script programming language defines its own namespace 
for its built-in library classes (packages <code>javafx.*</code>), but it is also possible to import standard Java programming language classes as well: 
</para>

<programlisting>
import java.lang.System;
import javafx.gui.*;

Frame {
     visible: true
     content: FlowPanel {
          content: Button {
               text: "Click Me"
               action: function() {
                    System.out.println("Click!");
               }
          }
     }
}
</programlisting>

<para>
Access modifiers on classes behave the same as in Java programming language. Classes may be declared as <code>public</code>, 
<code>protected</code>, or <code>private</code>, which allows them to be accessed anywhere, in the current package or in derived classes, or only in the 
current class, respectively. 
</para>

<para><emphasis role="bold">Note</emphasis>: The JavaFX Script programming language does not support constructors. To mimic the 
behavior of a constructor, define a <code>static</code> function that returns a new object,
 and invoke that function instead.</para>

 </sect2>
 
 
 
<sect2 id="defining"><title> Defining Classes</title> 

<para>The JavaFX Script programming language supports 
multiple inheritance, and as such, defines some new terminology and rules: </para>

<itemizedlist>
<listitem>A <emphasis>plain class</emphasis> is any class that directly or indirectly extends a class written in the Java programming language.</listitem>

<listitem>A <emphasis>compound class</emphasis> is any class that is not a plain class.</listitem>

<listitem>By default, classes written in the JavaFX Script programming language are compound classses.</listitem>

<listitem>Classes can extend, at most, one plain class; if it does, it becomes 
a plain class. It may also extend any number of compound classes, or Java programming language interfaces. </listitem>
</itemizedlist>



<para>
The syntax for specifying a class is the <code>class</code> keyword followed by the class name, optionally the <code>extends</code> keyword, and a comma 
separated list of the names of base classes, an open curly brace, a list of attributes and functions that each end in a semicolon, and a closing curly brace.

</para>

<programlisting>
<!-- 
<FONT COLOR="RED"> 
TO-DO: INSERT SYNTAX 
</FONT> -->
</programlisting>


<para>
By default a class 
may only be accessed within the same source file (also known as <emphasis>module</emphasis> scope), but declaring it as "public" will allow it to be accessed from anywhere.
Note that the JavaFX Script programming language does not support constructors. To mimic the 
behavior of a constructor, define a <code>static</code> function that returns a new object,
 and invoke that function instead.</para>

 <!--
<FONT COLOR="RED">
TBD: INSERT code SAMPLES FOR PLAIN CLASSES AND COMPOUND CLASSES
</FONT> -->

</sect2> 

 
 
 
 
<sect2 id="object"><title>Defining Objects</title>

<para>As described in the previous chapter, the 
preferred way to instantiate a class is with an <emphasis>object literal</emphasis>.
This form of object allocation uses a declarative syntax consisting of the name of the class followed by a curly brace delimited list of attribute initializers. Each initializer consists of the attribute name followed by a colon, followed by an expression which defines its value.</para>

<programlisting>
&nbsp;
<!-- **** <FONT COLOR="RED">ENGINEERING TO FILL IN THIS BOX WITH A
FORMAL SYNTAX LISTING</FONT> *** -->
</programlisting>


<para>
It is possible to use the <code>new</code> keyword when creating an object, 
 but this should be saved for cases where instantiating a Java programming 
language class is not possible via object literal s:  
</para>

<programlisting>
import java.io.File;

var tmpPath = "/home/users/docs/tmp.txt"
var myFile = new File("tmp.txt");
</programlisting>

<para> 1. A plain class is currently translated into a Java class, while a compound class is translated to a Java class and a Java interface. </para>

</sect2> </chapter>



