<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE book PUBLIC "-//Sun Microsystems//DTD SolBook-XML 3.5//EN"
"xsolbook.dtd">
<book id="bookid" label="alpha" lang="en">
  <title>JavaFX Language Reference</title>

  <bookinfo role="none">
    <authorgroup>
      <author>
        <firstname>Robert Field</firstname>

        <surname></surname>
      </author>
    </authorgroup>

    <pubsnumber></pubsnumber>

    <releaseinfo></releaseinfo>

    <pubdate></pubdate>

    <publisher>
      <publishername></publishername>
    </publisher>

    <copyright>
      <year></year>

      <holder></holder>
    </copyright>

    <abstract>
      <para></para>
    </abstract>

    <legalnotice>
      <para></para>
    </legalnotice>
  </bookinfo>

  <chapter id="chapterid">
    <title>Introduction</title>

    <highlights>
      <para>Discusses the what and why of JavaFX Script, and then provides
      examples to give you an overview.</para>
    </highlights>

    <sect1 id="sectionid">
      <title>Why JavaFX Script?</title>

      <para>There are thousands of programming languages, why use JavaFX? Two
      reasons: ubiquitous delivery and rapid development of graphical
      applications. JavaFX is built on the Java platform which is available on
      everything from cell phones to supercomputers. JavaFX is designed so
      that the developer can express their desired results succinctly and
      simply. Much can be expressed declaratively, including the interactive
      relationships between components, greatly easing development
      complexity.</para>
    </sect1>

    <sect1>
      <title>What is JavaFX Script?</title>

      <para>JavaFX Script is a scripting language which means it provides fast
      and easy development with less of the armor provided by conventional
      languages. It is thus tailored to moderately sized interactive graphical
      applications rather than programming in the large. It does, however,
      have one of the most important advantages of compile-time typing. That
      is, before your program even runs, it is checked for incompatible
      relationships between data.</para>
    </sect1>

    <sect1>
      <title>A Taste of JavaFX Script</title>

      <para>But the best way to get the idea of JavaFX Script is to see some
      examples. Don't worry if some of these don't make sense, the rest of
      this Reference will provide the details.</para>

      <para>JavaFX Script programs are written as one or more
      <emphasis>scripts</emphasis>. A script consists of expressions and
      declarations, typically in a file. The following is an expression and
      thus a valid script:</para>

      <programlisting>4</programlisting>

      <para>But it doesn't do anything. So, we could print it using the
      built-in function 'println':</para>

      <programlisting>println(4)</programlisting>

      <para>Which makes it irresistible to show the Hello World script:</para>

      <programlisting>println("Hello, World")</programlisting>

      <para>Which really isn't in the spirit of JavaFX since it isn't
      graphical. Refer to the graphics tutorial for that.</para>

      <para>You can, of course, have more complex expressions:</para>

      <programlisting>println("Circumference is { 2*3.1415*7 } ")</programlisting>

      <para>Note that the expression enclosed in braces is computed at runtime
      and inserted into the string. But this would be more interesting if we
      used variables:</para>

      <programlisting>def PI = 3.14159265; 
var r = 7; 
println("Circumference is { 2 * PI * r } ")</programlisting>

      <para>You can define a function:</para>

      <programlisting>def PI = 3.14159265; 
var r = 7; 
function circumference(radius) { 2 * PI * radius }
println("Circumference is { circumference(r) } ")</programlisting>

      <para>Note that JavaFX Script uses type inference to figure out the type
      of variables and function. Without type inference, this would be
      written:</para>

      <programlisting>def PI : Number = 3.14159265;  
var r : Number = 7; 
function circumference(radius : Number) : Number {
   2 * PI * radius 
} 
println("Circumference is { circumference(r) }")</programlisting>

      <para>You can define a class to represent a real or abstract entity. In
      this case, a point:</para>

      <programlisting>class Point { 
   var x : Integer; 
   var y : Integer; 
   function show() {
      println("Point {x}, {y}")
   } 
} </programlisting>

      <para>This class defines the x and y coordinates and a function to
      display the Point.</para>

      <para>We can create an instance of the Point and assign it to a variable
      like this:</para>

      <programlisting>var myPoint = Point { 
   x: 12
   y: 9
}</programlisting>

      <para>Note that the x and y instance variables are set during
      creation.</para>

      <para>Finally we can ask the point to show itself.</para>

      <programlisting>myPoint.show()</programlisting>

      <para>For an example-based introduction to JavaFX see the JavaFX Script
      Tutorial.</para>

      <para></para>
    </sect1>
  </chapter>

  <chapter>
    <title>Types and Values</title>

    <highlights>
      <para>Covers the data types and values which can be represented and
      manipulated in JavaFX Script</para>
    </highlights>

    <sect1>
      <title>JavaFX Script Data Types</title>

      <para>The Void type is an odd duck that is only used to indicate that a
      function does not return a value, expect for the section on Void, this
      chapter does not address Void.</para>

      <para>JavaFX Script Data Types, hereafter called JavaFX Types , consist
      of an <emphasis>element specifier</emphasis> and a
      <emphasis>cardinality</emphasis>. The element specifier determines what
      the type holds and the cardinality determines how many of them can be
      held. </para>

      <para></para>

      <sect2>
        <title>Element Specifier</title>

        <para>Element specifiers are classes or function signatures. Classes
        include both JavaFX classes and Java classes. A function signature
        consists of the parameter types and return type -- function signatures
        are unnamed and are not tied to particular functions which might
        implement the signature.</para>

        <para>[In formal type systems this would be called the
        <emphasis>ground type</emphasis>]</para>

        <para></para>
      </sect2>

      <sect2>
        <title>Cardinality</title>

        <para>The cardinality of a type determines how many elements can be
        held in a JavaFX type. The three cardinalities are
        <emphasis>optional</emphasis>, <emphasis>required</emphasis>, and
        <emphasis>sequence</emphasis>.</para>

        <para></para>

        <sect3>
          <title>Cardinality: Optional (0 or 1)</title>

          <para>Optional cardinality means there can be one element or no
          elements. This is the cardinality associated with most types,
          currently including all user defined classes. If you define a class
          Foo, then the JavaFX type "Foo" has class Foo as its element
          specifier and optional as its cardinality. For example:</para>

          <para>var x : Foo;</para>

          <para>Says that x can hold an instance of Foo (one element) or can
          hold null, the nonexistent value (no elements).</para>

          <para></para>
        </sect3>

        <sect3>
          <title>Cardinality: Required (1)</title>

          <para>Required cardinality means there must be one element. This is
          the cardinality associated with the built-in types String, Integer,
          Number, Boolean, and Duration. For example:</para>

          <para>var k : Integer;</para>

          <para>Says that k holds one Integer. </para>

          <para>The nonexistent value, null, is not a permitted value for
          types with required cardinality. Attempts to assign null to a type
          with required cardinality will be converted to the default value
          (see below). Attempts to convert null to a type with required
          cardinality will also be converted to the default value.</para>

          <para></para>
        </sect3>

        <sect3>
          <title>Cardinality: Sequence (0-n)</title>

          <para>Sequence cardinality means there can be any number of
          elements, including zero. This is the cardinality associated with
          explicitly declared sequences. For example:</para>

          <para>var seq : Integer[];</para>

          <para>Says that seq can hold any number of Integers.</para>

          <para></para>
        </sect3>
      </sect2>
    </sect1>

    <sect1>
      <title>Default Values</title>

      <para>Each JavaFX type has an associated default value. The default
      variable is the value of a variable before it is set. It is also the
      value of an expression of that type if an error is encountered For types
      with optional cardinality their default value is null. For
      example:</para>

      <para>var x : Foo; println(x);</para>

      <para>Will print "null" since x has not been set. </para>

      <para>For types with sequence cardinality their default value is the
      empty sequence of their element specifier. For example:</para>

      <para>var seq : Integer[]; println(sizeof seq);</para>

      <para>Will print zero since seq has not been set and its initial value
      will be an empty sequence of Integer. </para>

      <para>Each required type has its own default value, as shown in the
      table below. For example:</para>

      <para>var k : Integer; println(k);</para>

      <para>Will print zero since k has not been set and the default value for
      Integer is 0.</para>
    </sect1>

    <sect1>
      <title>Type Chart</title>

      <para></para>

      <table>
        <title></title>

        <tgroup cols="6">
          <colspec colname="t1" />

          <colspec colname="t2" />

          <colspec colname="decl" />

          <colspec colname="dflt" />

          <colspec colname="card" />

          <colspec colname="lit" />

          <thead>
            <row>
              <entry align="center">
                <para></para>
              </entry>

              <entry align="center">
                <para>Type</para>
              </entry>

              <entry align="center">
                <para>Declaration</para>
              </entry>

              <entry align="center">
                <para>Default Value</para>
              </entry>

              <entry align="center">
                <para>Cardinality</para>
              </entry>

              <entry align="center">
                <para>Literal or Creation Examples</para>
              </entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry morerows="6">
                <para>object types</para>
              </entry>

              <entry>
                <para><literal>Object</literal></para>
              </entry>

              <entry>
                <para><literal>: Object</literal></para>
              </entry>

              <entry>
                <para><literal>null</literal></para>
              </entry>

              <entry>
                <para>0-1</para>
              </entry>

              <entry>
                <para><literal>new Object</literal></para>
              </entry>
            </row>

            <row>
              <entry>
                <para><literal>String</literal></para>
              </entry>

              <entry>
                <para><literal>: String</literal></para>
              </entry>

              <entry>
                <para><literal>""</literal></para>
              </entry>

              <entry>
                <para>1</para>
              </entry>

              <entry>
                <para><literal>"Brownian"</literal></para>
              </entry>
            </row>

            <row>
              <entry>
                <para><literal>Integer</literal></para>
              </entry>

              <entry>
                <para><literal>: Integer</literal></para>
              </entry>

              <entry>
                <para><literal>0</literal></para>
              </entry>

              <entry>
                <para>1</para>
              </entry>

              <entry>
                <para><literal>1956</literal></para>
              </entry>
            </row>

            <row>
              <entry>
                <para><literal>Number</literal></para>
              </entry>

              <entry>
                <para><literal>: Number</literal></para>
              </entry>

              <entry>
                <para><literal>0.0</literal></para>
              </entry>

              <entry>
                <para>1</para>
              </entry>

              <entry>
                <para><literal>1.4142</literal></para>
              </entry>
            </row>

            <row>
              <entry>
                <para><literal>Boolean</literal></para>
              </entry>

              <entry>
                <para><literal>: Boolean</literal></para>
              </entry>

              <entry>
                <para><literal>false</literal></para>
              </entry>

              <entry>
                <para>1</para>
              </entry>

              <entry>
                <para><literal>true</literal></para>
              </entry>
            </row>

            <row>
              <entry>
                <para><literal>Duration</literal></para>
              </entry>

              <entry>
                <para><literal>: Duration</literal></para>
              </entry>

              <entry>
                <para><literal>0ms</literal></para>
              </entry>

              <entry>
                <para>1</para>
              </entry>

              <entry>
                <para><literal>47s</literal></para>
              </entry>
            </row>

            <row>
              <entry>
                <para><emphasis>other object types</emphasis></para>
              </entry>

              <entry>
                <para><literal>:
                </literal><emphasis>ClassName</emphasis></para>
              </entry>

              <entry>
                <para><literal>null</literal></para>
              </entry>

              <entry>
                <para>0-1</para>
              </entry>

              <entry>
                <para><literal>Point {x: 3 y: 9}</literal></para>
              </entry>
            </row>

            <row>
              <entry nameend="t2" namest="t1">
                <para>function types</para>
              </entry>

              <entry>
                <para><literal>:
                function(</literal><emphasis>name</emphasis><literal> :
                </literal><emphasis>ParamType</emphasis><literal>,
                </literal><emphasis>...</emphasis><literal>) : </literal>
                <emphasis>ReturnType</emphasis></para>
              </entry>

              <entry>
                <para><literal>null</literal></para>
              </entry>

              <entry>
                <para>0-1</para>
              </entry>

              <entry>
                <para><literal>function(x:Integer):String {" {x}
                "}</literal></para>
              </entry>
            </row>

            <row>
              <entry nameend="t2" namest="t1">
                <para>sequence types</para>
              </entry>

              <entry>
                <para><literal>:
                </literal><emphasis>ElementType</emphasis><literal>[]</literal></para>
              </entry>

              <entry>
                <para><literal>[]</literal></para>
              </entry>

              <entry>
                <para>0-n</para>
              </entry>

              <entry>
                <para><literal>[9, 14, 21, 4]</literal></para>
              </entry>
            </row>

            <row>
              <entry>
                <para></para>
              </entry>

              <entry>
                <para><literal>Void</literal></para>
              </entry>

              <entry>
                <para><literal>: Void</literal></para>
              </entry>

              <entry>
                <para><emphasis>n/a</emphasis></para>
              </entry>

              <entry>
                <para><emphasis>n/a</emphasis></para>
              </entry>

              <entry>
                <para><emphasis>n/a</emphasis></para>
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para></para>

      <para></para>

      <para></para>

      <para></para>
    </sect1>
  </chapter>
</book>
