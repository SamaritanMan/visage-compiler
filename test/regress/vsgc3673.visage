/*
 * Regression test: for VSGC-3673: Compile bind: umbrella bug to cover all cases of on invalidate misfiring.
 *
 * @test
 * @run
 */


//----------------------------------------
println("Replacing initial scalar value");

class A1 {
  var x = 10 on invalidate { println("A1") }
}

class B1 extends A1 {
  override var x on invalidate { println("B1") }
}

class C1 extends B1 {
  override var x on invalidate { println("C1") }
}

var c1 = C1{};

c1.x = 20;

//----------------------------------------
println("Replacing no initial scalar value");

class A2 {
  var x : Integer on invalidate { println("A2") }
}

class B2 extends A2 {
  override var x on invalidate { println("B2") }
}

class C2 extends B2 {
  override var x on invalidate { println("C2") }
}

var c2 = C2{};

c2.x = 20;

//----------------------------------------
println("Replacing bound initial scalar value");

class A3 {
  var w = 10;
  var x = bind w on invalidate { println("A3") }
}

class B3 extends A3 {
  override var x on invalidate { println("B3") }
}

class C3 extends B3 {
  override var x on invalidate { println("C3") }
}

var c3 = C3{};

c3.w = 20;

//----------------------------------------
println("Replacing bound no initial scalar value");

class A4 {
  var w : Integer;
  var x = bind w on invalidate { println("A4") }
}

class B4 extends A4 {
  override var x on invalidate { println("B4") }
}

class C4 extends B4 {
  override var x on invalidate { println("C4") }
}

var c4 = C4{};

c4.w = 20;

//----------------------------------------
println("Replacing initial scalar value - mixins");

mixin class A1M {
  var x = 10 on invalidate { println("A1M") }
}

class B1M extends A1M {
  override var x on invalidate { println("B1M") }
}

class C1M extends B1M {
  override var x on invalidate { println("C1M") }
}

var c1M = C1M{};

c1M.x = 20;

//----------------------------------------
println("Replacing no initial scalar value - mixins");

mixin class A2M {
  var x : Integer on invalidate { println("A2M") }
}

class B2M extends A2M {
  override var x on invalidate { println("B2M") }
}

class C2M extends B2M {
  override var x on invalidate { println("C2M") }
}

var c2M = C2M{};

c2M.x = 20;

//----------------------------------------
println("Replacing bound initial scalar value - mixins");

mixin class A3M {
  var w = 10;
  var x = bind w on invalidate { println("A3M") }
}

class B3M extends A3M {
  override var x on invalidate { println("B3M") }
}

class C3M extends B3M {
  override var x on invalidate { println("C3M") }
}

var c3M = C3M{};

c3M.w = 20;

//----------------------------------------
println("Replacing bound no initial scalar value - mixins");

mixin class A4M {
  var w : Integer;
  var x = bind w on invalidate { println("A4M") }
}

class B4M extends A4M {
  override var x on invalidate { println("B4M") }
}

class C4M extends B4M {
  override var x on invalidate { println("C4M") }
}

var c4M = C4M{};

c4M.w = 20;


//----------------------------------------
println("Replacing initial sequence value");

class A1Seq {
  var x = [1, 2, 3] on invalidate { println("A1Seq") }
}

class B1Seq extends A1Seq {
  override var x on invalidate { println("B1Seq") }
}

class C1Seq extends B1Seq {
  override var x on invalidate { println("C1Seq") }
}

var c1Seq = C1Seq{};

c1Seq.x = [10, 20, 30];

//----------------------------------------
println("Replacing no initial sequence value");

class A2Seq {
  var x : Integer[] on invalidate { println("A2Seq") }
}

class B2Seq extends A2Seq {
  override var x on invalidate { println("B2Seq") }
}

class C2Seq extends B2Seq {
  override var x on invalidate { println("C2Seq") }
}

var c2Seq = C2Seq{};

c2Seq.x = [10, 20, 30];

//----------------------------------------
println("Replacing bound initial sequence value");

class A3Seq {
  var w = [1, 2, 3];
  var x = bind w on invalidate { println("A3Seq") }
}

class B3Seq extends A3Seq {
  override var x on invalidate { println("B3Seq") }
}

class C3Seq extends B3Seq {
  override var x on invalidate { println("C3Seq") }
}

var c3Seq = C3Seq{};

c3Seq.w = [10, 20, 30];

var c3Dummy = c3Seq.x; // now we care, now fire invalidates
c3Seq.w = [30, 20, 10];

//----------------------------------------
println("Replacing bound no initial sequence value");

class A4Seq {
  var w : Integer[];
  var x = bind w on invalidate { println("A4Seq") }
}

class B4Seq extends A4Seq {
  override var x on invalidate { println("B4Seq") }
}

class C4Seq extends B4Seq {
  override var x on invalidate { println("C4Seq") }
}

var c4Seq = C4Seq{};

c4Seq.w = [10, 20, 30];

var c4Dummy = c4Seq.x; // now we care, now fire invalidates
c4Seq.w = [30, 20, 10];

//----------------------------------------
println("Replacing initial sequence value - mixins");

mixin class A1MSeq {
  var x = [1, 2, 3] on invalidate { println("A1MSeq") }
}

class B1MSeq extends A1MSeq {
  override var x on invalidate { println("B1MSeq") }
}

class C1MSeq extends B1MSeq {
  override var x on invalidate { println("C1MSeq") }
}

var c1MSeq = C1MSeq{};

c1MSeq.x = [10, 20, 30];

//----------------------------------------
println("Replacing no initial sequence value - mixins");

mixin class A2MSeq {
  var x : Integer[] on invalidate { println("A2MSeq") }
}

class B2MSeq extends A2MSeq {
  override var x on invalidate { println("B2MSeq") }
}

class C2MSeq extends B2MSeq {
  override var x on invalidate { println("C2MSeq") }
}

var c2MSeq = C2MSeq{};

c2MSeq.x = [10, 20, 30];

//----------------------------------------
println("Replacing bound initial sequence value - mixins");

mixin class A3MSeq {
  var w = [1, 2, 3];
  var x = bind w on invalidate { println("A3MSeq") }
}

class B3MSeq extends A3MSeq {
  override var x on invalidate { println("B3MSeq") }
}

class C3MSeq extends B3MSeq {
  override var x on invalidate { println("C3MSeq") }
}

var c3MSeq = C3MSeq{};

c3MSeq.w = [10, 20, 30];

var c3MDummy = c3MSeq.x; // now we care, now fire invalidates
c3MSeq.w = [30, 20, 10];

//----------------------------------------
println("Replacing bound no initial sequence value - mixins");

mixin class A4MSeq {
  var w : Integer[];
  var x = bind w on invalidate { println("A4MSeq") }
}

class B4MSeq extends A4MSeq {
  override var x on invalidate { println("B4MSeq") }
}

class C4MSeq extends B4MSeq {
  override var x on invalidate { println("C4MSeq") }
}

var c4MSeq = C4MSeq{};

c4MSeq.w = [10, 20, 30];

var c4MDummy = c4MSeq.x; // now we care, now fire invalidates
c4MSeq.w = [30, 20, 10];

//----------------------------------------
println("Replacing initial sequence value, detailed expression");

class A1DetailSeq {
  var x = [1, 2, 3] on invalidate { println("A1DetailSeq") }
}

class B1DetailSeq extends A1DetailSeq {
  override var x on invalidate { println("B1DetailSeq") }
}

class C1DetailSeq extends B1DetailSeq {
  override var x on invalidate { println("C1DetailSeq") }
}

var c1DetailSeq = C1DetailSeq{};

c1DetailSeq.x = [10, 20, 30];

//----------------------------------------
println("Replacing no initial sequence value, detailed expression");

class A2DetailSeq {
  var x : Integer[] on invalidate { println("A2DetailSeq") }
}

class B2DetailSeq extends A2DetailSeq {
  override var x on invalidate { println("B2DetailSeq") }
}

class C2DetailSeq extends B2DetailSeq {
  override var x on invalidate { println("C2DetailSeq") }
}

var c2DetailSeq = C2DetailSeq{};

c2DetailSeq.x = [10, 20, 30];

//----------------------------------------
println("Replacing bound initial sequence value, detailed expression");

class A3DetailSeq {
  var w = [1, 2, 3];
  var x = bind w on invalidate { println("A3DetailSeq") }
}

class B3DetailSeq extends A3DetailSeq {
  override var x on invalidate { println("B3DetailSeq") }
}

class C3DetailSeq extends B3DetailSeq {
  override var x on invalidate { println("C3DetailSeq") }
}

var c3DetailSeq = C3DetailSeq{};

c3DetailSeq.w = [10, 20, 30];

var c3DetailDummy = c3DetailSeq.x; // now we care, now fire invalidates
c3DetailSeq.w = [30, 20, 10];

//----------------------------------------
println("Replacing bound no initial sequence value, detailed expression");

class A4DetailSeq {
  var w : Integer[];
  var x = bind w on invalidate { println("A4DetailSeq") }
}

class B4DetailSeq extends A4DetailSeq {
  override var x on invalidate { println("B4DetailSeq") }
}

class C4DetailSeq extends B4DetailSeq {
  override var x on invalidate { println("C4DetailSeq") }
}

var c4DetailSeq = C4DetailSeq{};

c4DetailSeq.w = [10, 20, 30];

var c4DetailDummy = c4DetailSeq.x; // now we care, now fire invalidates
c4DetailSeq.w = [30, 20, 10];

//----------------------------------------
println("Replacing initial value, detailed expression - mixins");

mixin class A1MDetailSeq {
  var x = [1, 2, 3] on invalidate { println("A1MDetailSeq") }
}

class B1MDetailSeq extends A1MDetailSeq {
  override var x on invalidate { println("B1MDetailSeq") }
}

class C1MDetailSeq extends B1MDetailSeq {
  override var x on invalidate { println("C1MDetailSeq") }
}

var c1MDetailSeq = C1MDetailSeq{};

c1MDetailSeq.x = [10, 20, 30];

//----------------------------------------
println("Replacing no initial value, detailed expression - mixins");

mixin class A2MDetailSeq {
  var x : Integer[] on invalidate { println("A2MDetailSeq") }
}

class B2MDetailSeq extends A2MDetailSeq {
  override var x on invalidate { println("B2MDetailSeq") }
}

class C2MDetailSeq extends B2MDetailSeq {
  override var x on invalidate { println("C2MDetailSeq") }
}

var c2MDetailSeq = C2MDetailSeq{};

c2MDetailSeq.x = [10, 20, 30];

//----------------------------------------
println("Replacing bound initial value, detailed expression - mixins");

mixin class A3MDetailSeq {
  var w = [1, 2, 3];
  var x = bind w on invalidate { println("A3MDetailSeq") }
}

class B3MDetailSeq extends A3MDetailSeq {
  override var x on invalidate { println("B3MDetailSeq") }
}

class C3MDetailSeq extends B3MDetailSeq {
  override var x on invalidate { println("C3MDetailSeq") }
}

var c3MDetailSeq = C3MDetailSeq{};

c3MDetailSeq.w = [10, 20, 30];

var c3MDetailDummy = c3MDetailSeq.x; // now we care, now fire invalidates
c3MDetailSeq.w = [30, 20, 10];

//----------------------------------------
println("Replacing bound no initial value, detailed expression - mixins");

mixin class A4MDetailSeq {
  var w : Integer[];
  var x = bind w on invalidate { println("A4MDetailSeq") }
}

class B4MDetailSeq extends A4MDetailSeq {
  override var x on invalidate { println("B4MDetailSeq") }
}

class C4MDetailSeq extends B4MDetailSeq {
  override var x on invalidate { println("C4MDetailSeq") }
}

var c4MDetailSeq = C4MDetailSeq{};

c4MDetailSeq.w = [10, 20, 30];

var c4MDetailDummy = c4MDetailSeq.x; // now we care, now fire invalidates
c4MDetailSeq.w = [30, 20, 10];



