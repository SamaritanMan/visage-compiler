/*
 * Copyright (c) 2010-2011, Visage Project
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name Visage nor the names of its contributors may be used
 *    to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Feature test #31 - color literals
 *
 * @author Stephen Chin <steveonjava@gmail.com>
 * @test
 * @run
 */
import visage.lang.Color;

println("Black = {Color.BLACK}");
println(#000);
println(#000|F);
println(#000000);
println(#000000|FF);

println("MediumOrchid = {Color.MEDIUMORCHID}");
println(#b5d);
println(#b5d|f);
println(#ba55d3);
println(#ba55d3|ff);

println("Magenta = {#BF40BF}");
println("hsb(300deg, .667, .75) = {Color.hsb(300deg, .667, .75)}");
println("hsl(300deg, .5, .5) = {Color.hsl(300deg, .5, .5)}");

println("(Black + MediumOrchid) / 2 = {(Color.BLACK + Color.MEDIUMORCHID) / 2}");
println("MediumOrchid - Black + Black = {Color.MEDIUMORCHID - Color.BLACK + Color.BLACK}");
println("RED + LIME + BLUE = {Color.RED + Color.LIME + Color.BLUE}");
println("MediumOrchid / MediumOrchid = {%.3f Color.MEDIUMORCHID / Color.MEDIUMORCHID}");
println("MediumOrchid / White = {%.3f Color.MEDIUMORCHID / Color.WHITE}");
println("MediumOrchid * 2 = {Color.MEDIUMORCHID * 2}");
println("MediumOrchid < White = {Color.MEDIUMORCHID < Color.WHITE}");
println("MediumOrchid <= White = {Color.MEDIUMORCHID <= Color.WHITE}");
println("MediumOrchid > White = {Color.MEDIUMORCHID > Color.WHITE}");
println("MediumOrchid >= White = {Color.MEDIUMORCHID >= Color.WHITE}");
println("MediumOrchid == White = {Color.MEDIUMORCHID == Color.WHITE}");
println("MediumOrchid != White = {Color.MEDIUMORCHID != Color.WHITE}");
