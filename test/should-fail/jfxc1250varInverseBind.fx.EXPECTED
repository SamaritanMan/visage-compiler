test\should-fail\jfxc1250varInverseBind.fx:62: cannot find symbol
symbol  : variable memScr
location: class jfxc1250varInverseBind.Inh
	{ var x = bind memScr with inverse };   // ERROR: inherited, same package
	               ^
test\should-fail\jfxc1250varInverseBind.fx:67: memIScr has script only (default) bind access in jfxc1250subFail
	{ var x = bind memIScr with inverse };   // ERROR: inherited, same package
	               ^
test\should-fail\jfxc1250varInverseBind.fx:72: memRScr has script only (default) bind access in jfxc1250subFail
	{ var x = bind memRScr with inverse };   // ERROR: inherited, same package
	               ^
test\should-fail\jfxc1250varInverseBind.fx:77: memIRScr has script only (default) bind access in jfxc1250subFail
	{ var x = bind memIRScr with inverse };   // ERROR: inherited, same package
	               ^
test\should-fail\jfxc1250varInverseBind.fx:85: cannot find symbol
symbol  : variable memPkg
location: class jfxc1250varInverseBind.InhA
	{ var x = bind memPkg with inverse };   // ERROR: inherited, different package
	               ^
test\should-fail\jfxc1250varInverseBind.fx:86: cannot find symbol
symbol  : variable memScr
location: class jfxc1250varInverseBind.InhA
	{ var x = bind memScr with inverse };   // ERROR: inherited, different package
	               ^
test\should-fail\jfxc1250varInverseBind.fx:90: memIPkg has package bind access in jfxc1250.a.jfxc1250subFailA
	{ var x = bind memIPkg with inverse };   // ERROR: inherited, different package
	               ^
test\should-fail\jfxc1250varInverseBind.fx:91: memIScr has script only (default) bind access in jfxc1250.a.jfxc1250subFailA
	{ var x = bind memIScr with inverse };   // ERROR: inherited, different package
	               ^
test\should-fail\jfxc1250varInverseBind.fx:95: memRPkg has package bind access in jfxc1250.a.jfxc1250subFailA
	{ var x = bind memRPkg with inverse };   // ERROR: inherited, different package
	               ^
test\should-fail\jfxc1250varInverseBind.fx:96: memRScr has script only (default) bind access in jfxc1250.a.jfxc1250subFailA
	{ var x = bind memRScr with inverse };   // ERROR: inherited, different package
	               ^
test\should-fail\jfxc1250varInverseBind.fx:100: memIRPkg has package bind access in jfxc1250.a.jfxc1250subFailA
	{ var x = bind memIRPkg with inverse };   // ERROR: inherited, different package
	               ^
test\should-fail\jfxc1250varInverseBind.fx:101: memIRScr has script only (default) bind access in jfxc1250.a.jfxc1250subFailA
	{ var x = bind memIRScr with inverse };   // ERROR: inherited, different package
	               ^
test\should-fail\jfxc1250varInverseBind.fx:166: memScr has script only (default) access in jfxc1250subFail
	{ var x = bind vf.memScr with inverse };   // ERROR: same package
	                 ^
test\should-fail\jfxc1250varInverseBind.fx:171: memIScr has script only (default) bind access in jfxc1250subFail
	{ var x = bind vf.memIScr with inverse };   // ERROR: same package
	                 ^
test\should-fail\jfxc1250varInverseBind.fx:176: memRScr has script only (default) bind access in jfxc1250subFail
	{ var x = bind vf.memRScr with inverse };   // ERROR: same package
	                 ^
test\should-fail\jfxc1250varInverseBind.fx:181: memIRScr has script only (default) bind access in jfxc1250subFail
	{ var x = bind vf.memIRScr with inverse };   // ERROR: same package
	                 ^
test\should-fail\jfxc1250varInverseBind.fx:187: memPro has protected access in jfxc1250.a.jfxc1250subFailA
	{ var x = bind vf.memPro with inverse };   // ERROR: different package
	                 ^
test\should-fail\jfxc1250varInverseBind.fx:188: memPkg is not public in jfxc1250.a.jfxc1250subFailA; cannot be accessed from outside package
	{ var x = bind vf.memPkg with inverse };   // ERROR: different package
	                 ^
test\should-fail\jfxc1250varInverseBind.fx:189: memScr has script only (default) access in jfxc1250.a.jfxc1250subFailA
	{ var x = bind vf.memScr with inverse };   // ERROR: different package
	                 ^
test\should-fail\jfxc1250varInverseBind.fx:192: memIPro has protected bind access in jfxc1250.a.jfxc1250subFailA
	{ var x = bind vf.memIPro with inverse };   // ERROR: different package
	                 ^
test\should-fail\jfxc1250varInverseBind.fx:193: memIPkg has package bind access in jfxc1250.a.jfxc1250subFailA
	{ var x = bind vf.memIPkg with inverse };   // ERROR: different package
	                 ^
test\should-fail\jfxc1250varInverseBind.fx:194: memIScr has script only (default) bind access in jfxc1250.a.jfxc1250subFailA
	{ var x = bind vf.memIScr with inverse };   // ERROR: different package
	                 ^
test\should-fail\jfxc1250varInverseBind.fx:197: memRPro has protected bind access in jfxc1250.a.jfxc1250subFailA
	{ var x = bind vf.memRPro with inverse };   // ERROR: different package
	                 ^
test\should-fail\jfxc1250varInverseBind.fx:198: memRPkg has package bind access in jfxc1250.a.jfxc1250subFailA
	{ var x = bind vf.memRPkg with inverse };   // ERROR: different package
	                 ^
test\should-fail\jfxc1250varInverseBind.fx:199: memRScr has script only (default) bind access in jfxc1250.a.jfxc1250subFailA
	{ var x = bind vf.memRScr with inverse };   // ERROR: different package
	                 ^
test\should-fail\jfxc1250varInverseBind.fx:202: memIRPro has protected bind access in jfxc1250.a.jfxc1250subFailA
	{ var x = bind vf.memIRPro with inverse };   // ERROR: different package
	                 ^
test\should-fail\jfxc1250varInverseBind.fx:203: memIRPkg has package bind access in jfxc1250.a.jfxc1250subFailA
	{ var x = bind vf.memIRPkg with inverse };   // ERROR: different package
	                 ^
test\should-fail\jfxc1250varInverseBind.fx:204: memIRScr has script only (default) bind access in jfxc1250.a.jfxc1250subFailA
	{ var x = bind vf.memIRScr with inverse };   // ERROR: different package
	                 ^
28 errors
