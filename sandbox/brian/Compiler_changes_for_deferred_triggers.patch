Index: src/share/classes/com/sun/tools/javafx/comp/JavafxInitializationBuilder.java
===================================================================
--- src/share/classes/com/sun/tools/javafx/comp/JavafxInitializationBuilder.java	Thu Jan 24 13:51:45 EST 2008
+++ src/share/classes/com/sun/tools/javafx/comp/JavafxInitializationBuilder.java	Thu Jan 24 13:51:45 EST 2008
@@ -62,13 +62,16 @@
     private final Name sequenceReplaceListenerInterfaceName;
     private final Name sequenceChangeListenerInterfaceName;
     private static final String initHelperClassName = "com.sun.javafx.runtime.InitHelper";
-    private final Name locationName;
+    private static final String initContextClassName = "com.sun.javafx.runtime.InitializationContext";
+    private final Name attributeInitLocationName;
+    private final Name attributeInitValueName;
     private final Name setDefaultsName;
     private final Name addTriggersName;
     final Name userInitName;
     final Name postInitName;
     private final Name getNumFieldsName;
     private final Name initHelperName;
+    private final Name initContextName;
     private static final String assertNonNullName = "assertNonNull";
     private static final String addName = "add";
     private final Name initializeNonSyntheticName;
@@ -103,13 +106,15 @@
                     = names.fromString(JavafxTypeMorpher.locationPackageName + JavafxVarSymbol.typePrefixes[i] + "ChangeListener");
         sequenceReplaceListenerInterfaceName = names.fromString(JavafxTypeMorpher.locationPackageName + "SequenceReplaceListener");
         sequenceChangeListenerInterfaceName = names.fromString(JavafxTypeMorpher.locationPackageName + "SequenceChangeListener");
-        locationName = names.fromString("location");
+        attributeInitLocationName = names.fromString("location");
+        attributeInitValueName = names.fromString("value");
         setDefaultsName = names.fromString("setDefaults$");
         addTriggersName = names.fromString("addTriggers$");
         userInitName = names.fromString("userInit$");
         postInitName = names.fromString("postInit$");
         getNumFieldsName = names.fromString("getNumFields$");
         initHelperName = names.fromString("initHelper$");
+        initContextName = names.fromString("initContext$");
         initializeNonSyntheticName = names.fromString("initialize");
         onChangeArgName1 = names.fromString("$oldValue");
         onChangeArgName2 = names.fromString("$newValue");
@@ -666,10 +671,13 @@
                     List.<JCVariableDecl>nil(), 
                     List.<JCExpression>nil(), 
                     null, null));
-            List<JCVariableDecl> locationVarDeclList = List.nil();
-                locationVarDeclList = locationVarDeclList.append(make.VarDef(make.Modifiers(0L),
-                    locationName, toJava.makeTypeTree(attrInfo.type, null), null));
+            List<JCVariableDecl> locationVarDeclList = List.<JCVariableDecl>nil()
+                    .append(make.VarDef(make.Modifiers(0L),
+                                        attributeInitLocationName, toJava.makeTypeTree(attrInfo.type, null), null))
+                    .append(make.VarDef(make.Modifiers(0L),
+                                        attributeInitValueName, toJava.makeTypeTree(attrInfo.type, null), null));
-                
+
+                
             idefs.append(make.MethodDef(
                     make.Modifiers(Flags.PUBLIC | Flags.ABSTRACT),
                     names.fromString(attributeInitMethodNamePrefix + attrInfo.name.toString()),
@@ -681,9 +689,10 @@
         }
     }
 
-    private void addClassAttributeMethods(JFXClassDeclaration cDecl, ListBuffer<AttributeWrapper> attrInfos, 
+    private void addClassAttributeMethods(JFXClassDeclaration cDecl,
+                                          ListBuffer<AttributeWrapper> attrInfos,
-                                                                               ListBuffer<JCTree> members,
-                                                                               int numFields) {
+                                          ListBuffer<JCTree> members,
+                                          int numFields) {
         boolean classIsFinal = (cDecl.getModifiers().flags & Flags.FINAL) != 0;
         for (AttributeWrapper attrInfo : attrInfos) { 
             List<JCStatement> stats = List.nil();
@@ -718,17 +727,20 @@
 
             // Add the initHelper$.add(...) call
             List<JCExpression> initAddArgs = List.nil();
-            initAddArgs = initAddArgs.append(make.Assign(make.Ident(attrInfo.name), make.Ident(locationName)));
+            initAddArgs = initAddArgs.append(make.Assign(make.Ident(attrInfo.name), make.Ident(attributeInitLocationName)));
             
             initBlockStats = initBlockStats.append(toJava.callStatement(cDecl.pos(), make.Ident(initHelperName), addName, initAddArgs));
             
             JCBlock initBlock = make.Block(0L, initBlockStats);
-            List<JCVariableDecl> locationVarDeclList = List.nil();
-            locationVarDeclList = locationVarDeclList.append(
-                    make.VarDef(make.Modifiers(0L),
-                    locationName,
+            List<JCVariableDecl> locationVarDeclList = List.<JCVariableDecl>nil()
+                    .append(make.VarDef(make.Modifiers(0L),
+                                        attributeInitLocationName,
-                    toJava.makeTypeTree(attrInfo.type, null),
+                                        toJava.makeTypeTree(attrInfo.type, null),
+                                        null))
+                    .append(make.VarDef(make.Modifiers(0L),
+                                        attributeInitValueName,
+                                        toJava.makeTypeTree(attrInfo.type, null),
-                    null));
+                                        null));
             members.append(make.MethodDef(
                     make.Modifiers(Flags.PUBLIC),
                     names.fromString(attributeInitMethodNamePrefix + attrInfo.name.toString()),
@@ -762,6 +774,12 @@
         members.append(make.VarDef(make.Modifiers(Flags.PRIVATE),
                 initHelperName, make.Identifier(initHelperClassName), newIHClass));
         
+        // Add the InitContext field
+        members.append(make.VarDef(make.Modifiers(Flags.PRIVATE),
+                                   initContextName,
+                                   make.Identifier(initContextClassName),
+                                   make.NewClass(null, List.<JCExpression>nil(), make.Identifier(initContextClassName), List.<JCExpression>nil(), null)));
+        
         // Add the initialize$ method
         List<JCStatement> initializeStats = List.nil();
 
Index: src/share/classes/com/sun/tools/javafx/comp/JavafxToJava.java
===================================================================
--- src/share/classes/com/sun/tools/javafx/comp/JavafxToJava.java	Thu Jan 24 13:51:45 EST 2008
+++ src/share/classes/com/sun/tools/javafx/comp/JavafxToJava.java	Thu Jan 24 13:51:45 EST 2008
@@ -1011,6 +1011,11 @@
             }
             init = translateVarInit(tree, false).first;
         }
+        if (isClassVar) {
+            // @@@ BG add initializer
+            // @@@ For sequence or object, need type param
+            // @@@ For sequence, also need class
+        }
 
         // Convert initializers returning Java arrays to sequences.
         if (type.tag == TypeTags.ARRAY) {
