src.gensrc.dir=build/gensrc
# Version info -- override as needed
javafx.version = ${jfx.release.version}

# Just in case someday we want different versions for these
javafxc.version = ${javafx.version}
javafxdoc.version = ${javafx.version}

# This directory is removed when the project is cleaned:
build.dir=${basedir}/build
build.generated.dir=${build.dir}/gensrc

bundle.name = openjdk-compiler-${release}
bundle.dir = ${build.dir}/bundles
zip.bundle = ${bundle.dir}/${bundle.name}.zip
tgz.bundle = ${bundle.dir}/${bundle.name}.tgz
src.bundle = ${bundle.dir}/${bundle.name}-src.zip
bundle.includes=bin/**/*,doc/**/*,lib/**/*,demos/**/*

application.desc=The JavaFX Script compiler project.
application.homepage=https://openjfx-compiler.dev.java.net
application.title=JavaFX Script Compiler
application.vendor=Sun Microsystems, Inc.
build.classes.dir=${build.dir}/classes
build.instrumented.dir=${build.dir}/classes-instrumented
build.classes.excludes=**/*.java,**/*.form,**/*.fx,com/**/*.properties,**/*-template,**/*.g


# javafx platform version
javafx.release = ${javafx.version}-${jfx.release.milestone}
javafx.full.version = ${javafx.release}-${build.number.string}
javafx.version.file=${build.classes.dir}/com/sun/javafx/runtime/resources/version.properties

# javafxc tool version
javafxc.release = ${javafxc.version}-${jfx.release.milestone}
javafxc.full.version = ${javafxc.release}-${build.number.string}
javafxc.version.file=${build.classes.dir}/com/sun/tools/javafx/resources/version.properties

# javafxdoc tool version
javafxdoc.release = ${javafxdoc.version}-${jfx.release.milestone}
javafxdoc.full.version = ${javafxdoc.release}-${build.number.string}
javafxdoc.version.file=javafxdoc/build/classes/com/sun/tools/javafxdoc/resources/version.properties

# Only compile against the classpath explicitly listed here:
build.sysclasspath=ignore
build.test.classes.dir=${build.dir}/test/classes
build.test.results.dir=${build.dir}/test/results
build.buildtools.dir=${build.dir}/buildtools
build.staticsizes.dir=${build.dir}/staticsizes
build.ldclassreport.dir=${build.dir}/ldclassreport
debug.classpath=\
    ${run.classpath}
debug.test.classpath=\
    ${run.test.classpath}

# This directory is removed when the project is cleaned:
dist.dir=dist
javafxc.jar=shared/javafxc.jar
javafxdoc.jar=shared/javafxdoc.jar
javafxrt.jar=shared/javafxrt.jar
javafxrt-main.jar=desktop/javafxrt-main.jar

dist.jar=${dist.dir}/lib/${javafxc.jar}
dist.javafxdoc.jar=${dist.dir}/lib/${javafxdoc.jar}
dist.javafxrt.jar=${dist.dir}/lib/${javafxrt.jar}
dist.javafxrt-main.jar=${dist.dir}/lib/${javafxrt-main.jar}

dist.javadoc.dir=${dist.dir}/doc/compiler/api
dist.javafxdoc.dir=${dist.dir}/doc/api
dist.coverage.dir=${dist.dir}/coverage
dist.findbugs.dir=${dist.dir}/findbugs

# This is what the 'jfx-sdk and jfx-deploy' targets will copy to the upper level dist dir.
dist.executables=\
        bin/javafx${exe} \
        bin/javafxw${exe} \
        bin/javafxc${exe} \
        bin/javafxdoc${exe}

dist.libs=\
        lib/${javafxc.jar} \
        lib/${javafxdoc.jar} \
        lib/${javafxrt.jar} \
        lib/${javafxrt-main.jar} \

# These are the contents that are copied to the upper jfx.sdk.dir by
# the jfx-sdk target.
dist.contents=\
        ${dist.libs} \
        ${dist.executables} \
        src.zip

deployed.contents=\
        ${javafxc.jar} \
        ${javafxdoc.jar} \
        ${javafxrt.jar}

excludes=**/package-info.*
file.reference.ant.jar=${ant.class.path}
file.reference.antlr-runtime=${antlr-runtime.class.path}
file.reference.build-classes=runtime/build/classes
file.reference.cobertura.jar=${cobertura.class.path}
file.reference.javac.jar=lib/javac.jar
file.reference.junit-4.4.jar=${import.junit.jar}
file.reference.pack200task.jar=${import.antpack200.jar}
file.reference.scenegraph.jar=${scenegraph.class.path}
# needed to build on jdk 5.0
file.reference.script-api.jar=lib/script-api.jar
file.reference.plugin.jar=lib/plugin_exports.jar
includes=**
jar.compress=false
javac.classpath=\
    ${file.reference.javac.jar}:\
    ${file.reference.antlr-runtime}:\
    ${file.reference.ant.jar}:\
    ${file.reference.script-api.jar}:\
    ${file.reference.plugin.jar}

# Space-separated list of extra javac options
javac.compilerargs=-XDignore.symbol.file
javac.deprecation=false
javac.source=1.5
javac.target=1.5
# Instrumented directory needs to be in front of built classes to get coverage support.
javac.test.classpath=\
    ${javac.classpath}:\
    ${file.reference.scenegraph.jar}:\
    ${build.instrumented.dir}:\
    ${build.classes.dir}:\
    ${file.reference.junit-4.4.jar}:\
    ${file.reference.cobertura.jar}

javadoc.additionalparam=
javadoc.author=false
javadoc.encoding=
javadoc.noindex=false
javadoc.nonavbar=false
javadoc.notree=false
javadoc.pkgs=com.sun.javafx.api,com.sun.javafx.api.tree
javadoc.private=false
javadoc.splitindex=true
javadoc.use=true
javadoc.version=false
javadoc.windowtitle=
javafxdoc.packages=javafx.application javafx.animation javafx.async javafx.ext.swing javafx.input javafx.lang javafx.json javafx.json.rpc javafx.scene javafx.scene.image javafx.scene.paint javafx.scene.transform javafx.scene.layout javafx.scene.geometry javafx.scene.text javafx.scene.media javafx.scene.effect javafx.scene.effect.light javafx.sql javafx.util javafx.date javafx.xml
jnlp.codebase.type=local
jnlp.codebase.url=file:/work/src/javafx/openjfx-compiler/dist/
jnlp.enabled=false
jnlp.offline-allowed=false
jnlp.signed=false
libs.CopyLibs.classpath=lib/org-netbeans-modules-java-j2seproject-copylibstask.jar
main.class=com.sun.tools.javafx.Main
manifest.file=manifest.mf
meta.inf.dir=${src.dir}/META-INF
syntax.diagrams.dir=${build.dir}/doc/syntax-diagrams
platform.active=default_platform
run.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}
# Space-separated list of JVM arguments used when running the project
# (you may also define separate properties like run-sys-prop.name=value instead of -Dname=value
# or test-sys-prop.name=value to set system properties for unit tests):
run.jvmargs=-Xbootclasspath/p:${file.reference.javac.jar}
run.test.classpath=\
    ${javac.test.classpath}:\
    ${build.test.classes.dir}
src.buildtools.dir=buildtools/src
src.classes.dir=${basedir}/src/share/classes
test.src.dir=test/src
test.perf.src.dir=test/perf
svn.repository=https://javafx-compiler.dev.java.net/svn/openjfx-compiler/trunk
antlr.src.dir=${src.classes.dir}/com/sun/tools/javafx/antlr
antlr.generated.dir=${build.generated.dir}/com/sun/tools/javafx/antlr
test.src2.dir=test/unit/src

# The test directories that the 'test' target runs for the JFXCompiler test suite.
test.fx.roots=\
 test/features \
 test/regress \
 test/fxunit \
 test/should-fail \
 test/currently-failing \
 test/functional

# The test files that the 'smoketest' target runs
test.smoke.tests=\
 test/functional/javafx/lang/FX/AllTrees.fx \
 test/regress/jfxc1043.fx \
 test/regress/jfxc1044a.fx \
 test/regress/jfxc1053.fx \
 test/regress/jfxc1066.fx \
 test/regress/jfxc1087run.fx \
 test/regress/jfxc1143.fx \
 test/regress/jfxc2544.fx \
 test/functional/animation/fx/KeyFrame_TS101_02.fx \
 test/functional/animation/fx/KeyFrame_TS102_01.fx \
 test/functional/animation/fx/KeyFrame_TS103_02.fx \
 test/functional/animation/fx/KeyValue_TS200_01.fx \
 test/functional/animation/fx/KeyValue_TS200_02.fx \
 test/functional/animation/fx/KeyValue_TS200_03.fx \
 test/functional/animation/fx/KeyValue_TS200_04.fx \
 test/functional/animation/fx/Timeline_TS001_01.fx \
 test/functional/animation/fx/Timeline_TS001_02.fx \
 test/functional/animation/fx/Timeline_TS002_01.fx \
 test/functional/animation/fx/Timeline_TS002_02.fx \
 test/functional/animation/fx/Timeline_TS005_01.fx \
 test/functional/animation/fx/Timeline_TS006_01.fx \
 test/functional/animation/fx/Timeline_TS008_01.fx \
 test/functional/animation/fx/Timeline_TS012_01.fx \
 test/functional/animation/fx/Timeline_TS012_02.fx \
 test/functional/animation/fx/Timeline_TS014_01.fx \
 test/functional/animation/fx/Timeline_TS016_02.fx \
 test/functional/animation/fx/Timeline_TS017_02.fx \
 test/functional/animation/fx/Timeline_TS018_01.fx \
 test/functional/animation/language/Lang002_TS100_01.fx \
 test/functional/animation/language/Lang002_TS100_02.fx \
 test/functional/animation/language/Lang002_TS100_03.fx \
 test/functional/animation/language/Lang002_TS100_04.fx \
 test/functional/animation/language/Lang002_TS100_05.fx \
 test/functional/animation/language/Lang003_TS200_01.fx
