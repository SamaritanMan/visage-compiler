src.gensrc.dir=build/gensrc
# Version info -- override as needed
visage.version = ${visage.release.version}

# Just in case someday we want different versions for these
visagec.version = ${visage.version}
visagedoc.version = ${visage.version}

# This directory is removed when the project is cleaned:
build.dir=${basedir}/build
build.generated.dir=${build.dir}/gensrc
build.test.dir=${build.dir}/test

bundle.name = visage-compiler-${release}
bundle.dir = ${build.dir}/bundles
zip.bundle = ${bundle.dir}/${bundle.name}.zip
tgz.bundle = ${bundle.dir}/${bundle.name}.tgz
src.bundle = ${bundle.dir}/${bundle.name}-src.zip
bundle.includes=bin/**/*,doc/**/*,lib/**/*,demos/**/*,profiles/**/*

# URL of the real API docs, this is typically used by hudson and appserver
# ex: http://java.sun.com/visage/1.3/docs/api/
visage.api.url=http://java.sun.com/visage/1.3/docs/api/

application.desc=The Visage compiler project.
application.homepage=https://visage.org
application.title=Visage Compiler
application.vendor=Sun Microsystems, Inc.
build.classes.dir=${build.dir}/classes
build.instrumented.dir=${build.dir}/classes-instrumented
build.classes.excludes=**/*.java,**/*.form,**/*.visage,com/**/*.properties,**/*-template,**/*.g


# visage platform version
visage.release = ${visage.version}-${visage.release.milestone}
visage.full.version = ${visage.release}-${build.number.string}
visage.version.file=${build.classes.dir}/org/visage/runtime/resources/version.properties

# visagec tool version
visagec.release = ${visagec.version}-${visage.release.milestone}
visagec.full.version = ${visagec.release}-${build.number.string}
visagec.version.file=${build.classes.dir}/org/visage/tools/resources/version.properties

# visagedoc tool version
visagedoc.release = ${visagedoc.version}-${visage.release.milestone}
visagedoc.full.version = ${visagedoc.release}-${build.number.string}
visagedoc.version.file=visagedoc/build/classes/org/visage/tools/visagedoc/resources/version.properties

# Only compile against the classpath explicitly listed here:
build.sysclasspath=ignore
build.test.tmp.dir=${build.test.dir}/tmpdir
build.test.classes.dir=${build.test.dir}/classes
build.test.results.dir=${build.test.dir}/results
build.buildtools.dir=${build.dir}/buildtools
build.staticsizes.dir=${build.dir}/staticsizes
build.ldclassreport.dir=${build.dir}/ldclassreport
debug.classpath=\
    ${run.classpath}
debug.test.classpath=\
    ${run.test.classpath}

# This directory is removed when the project is cleaned:
dist.dir=dist
visagec.jar=shared/visagec.jar
fxjdi.jar=shared/fxjdi.jar
visagedoc.jar=shared/visagedoc.jar
visagert.jar=shared/visagert.jar
visagert-main.jar=desktop/visagert-main.jar

dist.jar=${dist.dir}/lib/${visagec.jar}
dist.fxjdi.jar=${dist.dir}/lib/${fxjdi.jar}
dist.visagedoc.jar=${dist.dir}/lib/${visagedoc.jar}
dist.visagert.jar=${dist.dir}/lib/${visagert.jar}
dist.visagert-main.jar=${dist.dir}/lib/${visagert-main.jar}

dist.javadoc.dir=${dist.dir}/doc/compiler/api
dist.visagedoc.dir=${dist.dir}/doc/api
dist.coverage.dir=${dist.dir}/coverage
dist.findbugs.dir=${dist.dir}/findbugs

# This is what the 'visage-sdk and visage-deploy' targets will copy to the upper level dist dir.
dist.executables=\
        bin/visage${exe} \
        bin/visagew${exe} \
        bin/visagec${exe} \
        bin/visagedoc${exe}

dist.libs=\
        lib/${visagec.jar} \
        lib/${visagedoc.jar} \
        lib/${fxjdi.jar} \
        lib/${visagert.jar} \
        lib/${visagert-main.jar} \

# These are the contents that are copied to the upper visage.sdk.dir by
# the visage-sdk target.
dist.contents=\
        ${dist.libs} \
        ${dist.executables} \
        src.zip

deployed.contents=\
        ${visagec.jar} \
        ${visagedoc.jar} \
        ${visagert.jar}

excludes=**/package-info.*
file.reference.ant.jar=${ant.class.path}
file.reference.antlr-runtime=${antlr-runtime.class.path}
file.reference.build-classes=runtime/build/classes
file.reference.cobertura.jar=${cobertura.class.path}
file.reference.javac.jar=lib/javac.jar
file.reference.junit-4.4.jar=${import.junit.jar}
file.reference.pack200task.jar=${import.antpack200.jar}
# needed to build on jdk 5.0
file.reference.script-api.jar=lib/script-api.jar
file.reference.plugin.jar=lib/plugin_exports.jar
includes=**
jar.compress=true
javac.classpath=\
    ${file.reference.javac.jar}:\
    ${file.reference.antlr-runtime}:\
    ${file.reference.ant.jar}:\
    ${file.reference.script-api.jar}:\
    ${file.reference.plugin.jar}

# Space-separated list of extra javac options
javac.compilerargs=-XDignore.symbol.file
javac.deprecation=false
javac.source=1.5
javac.target=1.5
# Instrumented directory needs to be in front of built classes to get coverage support.
javac.test.classpath=\
    ${javac.classpath}:\
    ${build.instrumented.dir}:\
    ${build.classes.dir}:\
    ${file.reference.junit-4.4.jar}:\
    ${file.reference.cobertura.jar}

javadoc.additionalparam=
javadoc.author=false
javadoc.encoding=
javadoc.noindex=false
javadoc.nonavbar=false
javadoc.notree=false
javadoc.pkgs=org.visage.api,org.visage.api.tree
javadoc.private=false
javadoc.splitindex=true
javadoc.use=true
javadoc.version=false
javadoc.windowtitle=
visagedoc.packages=visage.application visage.animation visage.async visage.ext.swing visage.input visage.lang visage.json visage.json.rpc visage.scene visage.scene.image visage.scene.paint visage.scene.transform visage.scene.layout visage.scene.geometry visage.scene.text visage.scene.media visage.scene.effect visage.scene.effect.light visage.sql visage.util visage.date visage.xml
jnlp.codebase.type=local
jnlp.codebase.url=file:/work/src/visage/visage-compiler/dist/
jnlp.enabled=false
jnlp.offline-allowed=false
jnlp.signed=false
libs.CopyLibs.classpath=lib/org-netbeans-modules-java-j2seproject-copylibstask.jar
main.class=org.visage.tools.Main
manifest.file=manifest.mf
meta.inf.dir=${src.dir}/META-INF
syntax.diagrams.dir=${build.dir}/doc/syntax-diagrams
platform.active=default_platform
run.classpath=\
    ${javac.classpath}:\
    ${build.classes.dir}
# Space-separated list of JVM arguments used when running the project
# (you may also define separate properties like run-sys-prop.name=value instead of -Dname=value
# or test-sys-prop.name=value to set system properties for unit tests):
run.jvmargs=-Xbootclasspath/p:${file.reference.javac.jar}
run.test.classpath=\
    ${javac.test.classpath}:\
    ${build.test.classes.dir}
src.buildtools.dir=buildtools/src
src.classes.dir=${basedir}/src/share/classes
test.src.dir=test/src
test.perf.src.dir=test/perf
svn.repository=https://visage-compiler.dev.java.net/svn/visage-compiler/trunk
antlr.src.dir=${src.classes.dir}/org/visage/tools/antlr
antlr.generated.dir=${build.generated.dir}/org/visage/tools/antlr
test.src2.dir=test/unit/src

# The test directories that the 'test' target runs for the VisageCompiler test suite.
test.visage.roots=\
 test/features \
 test/regress \
 test/fxunit \
 test/should-fail \
 test/currently-failing \
 test/functional

# The test files that the 'smoketest' target runs
test.smoke.tests=\
 test/functional/visage/lang/Visage/AllTrees.visage \
 test/regress/vsgc1043.visage \
 test/regress/vsgc1044a.visage \
 test/regress/vsgc1053.visage \
 test/regress/vsgc1066.visage \
 test/regress/vsgc1087run.visage \
 test/regress/vsgc1143.visage \
 test/regress/vsgc2544.visage \
 test/functional/animation/visage/KeyFrame_TS101_02.visage \
 test/functional/animation/visage/KeyFrame_TS102_01.visage \
 test/functional/animation/visage/KeyFrame_TS103_02.visage \
 test/functional/animation/visage/KeyValue_TS200_01.visage \
 test/functional/animation/visage/KeyValue_TS200_02.visage \
 test/functional/animation/visage/KeyValue_TS200_03.visage \
 test/functional/animation/visage/KeyValue_TS200_04.visage \
 test/functional/animation/visage/Timeline_TS001_01.visage \
 test/functional/animation/visage/Timeline_TS001_02.visage \
 test/functional/animation/visage/Timeline_TS002_01.visage \
 test/functional/animation/visage/Timeline_TS002_02.visage \
 test/functional/animation/visage/Timeline_TS005_01.visage \
 test/functional/animation/visage/Timeline_TS006_01.visage \
 test/functional/animation/visage/Timeline_TS008_01.visage \
 test/functional/animation/visage/Timeline_TS012_01.visage \
 test/functional/animation/visage/Timeline_TS012_02.visage \
 test/functional/animation/visage/Timeline_TS014_01.visage \
 test/functional/animation/visage/Timeline_TS016_02.visage \
 test/functional/animation/visage/Timeline_TS017_02.visage \
 test/functional/animation//visage/Timeline_TS018_01.visage \
 test/functional/animation/language/Lang002_TS100_01.visage \
 test/functional/animation/language/Lang002_TS100_02.visage \
 test/functional/animation/language/Lang002_TS100_03.visage \
 test/functional/animation/language/Lang002_TS100_04.visage \
 test/functional/animation/language/Lang002_TS100_05.visage \
 test/functional/animation/language/Lang003_TS200_01.visage

xxx=${basedir}/dev-xxx

test.visage.dev.fail.list=\
${compile.failures} \
${runtime.failures} \

# jjh: Temp addition of compile.failures and run.failures
# so ant test won't run them.
# datetimefmt.visage is unreliable
test.visage.dev.exclude.list=\
${test.visage.dev.hang.list} \
${test.visage.dev.tests.with.lazy} \
${compile.failures} \
${runtime.failures} \
test/functional/visage/date/datetimefmt.visage


test.visage.dev.hang.list=

# Other tests that should be on this list are
#  F25-lazy-bind/*
# Those tests have been deleted from the repo
# and should probably be examined later to see if
# they an be used to test that we are making binds
# lazy in the places where we think we are.

test.visage.dev.tests.with.lazy=\
 test/regress/vsgc2464.visage \
 test/regress/vsgc2942f.visage \
 test/regress/vsgc2942i.visage \
 test/regress/vsgc3369sanity.visage \
 test/regress/vsgc3445a.visage \
 test/regress/vsgc3445b.visage \
 test/regress/vsgc3445c.visage \
 test/regress/vsgc3445d.visage

compile.failures=
 
runtime.failures=\
 test/features/F19-multiple-inheritance/MxOnSeq01.visage \
 test/currently-failing/vsgc3291.visage

