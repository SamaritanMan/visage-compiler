<?xml version="1.0" encoding="UTF-8"?>
<!--
    Main build script for the JavaFX Runtime project. To successfully build
    this project you must also have the compiler workspace also checked out.
    This project must be in a subdirectory of the compiler workspace.

    We anticipate that in the future as the javafx compiler stabilizes this
    will change such that the runtime project would only need a jar of the
    compiler rather than the compiler workspace itself. For the time being this
    is more convenient since we frequently inspire fixes in the compiler based
    on the runtime project.
 -->
<project name="JavaFX_Runtime" default="default" basedir=".">
    <description>Builds, tests, and runs the project JavaFX Runtime.</description>
    <import file="nbproject/build-impl.xml"/>

    <available property="ant.jar" value="${ant.home}/lib/ant.jar" file="${ant.home}/lib/ant.jar"/>
    <!-- if the previous location is not correct than find the ant.jar from the java.class.path value -->
    <pathconvert property="ant.jar">
        <mapper type="regexp" from="${path.separator}([^${path.separator}]*ant.jar)${path.separator}" to="\1"/>
        <path location="${path.separator}${java.class.path}${path.separator}"/>
    </pathconvert>


    <!-- ensure version 1.7.0 of ant -->
    <target name="-post-init">
        <fail message="Ant version 1.7.0 or later is required to build JavaFX.">
            <condition><not><antversion atleast="1.7.0"/></not></condition>
        </fail>
        <taskdef name="javafxc" classname="com.sun.tools.javafx.ant.JavaFxAntTask">
            <classpath>
                <pathelement location="${ant.jar}"/>
                <pathelement location="${file.reference.javafxc.jar}"/>
                <pathelement path="${javac.classpath}"/>
            </classpath>
        </taskdef>
    </target>

    <!-- overridden to use the javac.jar located in the fx compiler workspace -->
    <target name="-do-compile" depends="init,deps-jar,-pre-pre-compile,-pre-compile" if="have.sources">
        <javac compiler="modern" fork="true"
               srcdir="${src.classes.dir}" destdir="${build.classes.dir}"
               debug="${javac.debug}" deprecation="${javac.deprecation}"
               includes="${includes}" excludes="${excludes}"
               source="${javac.source}" target="${javac.target}"
               includeantruntime="false" encoding="${source.encoding}"
               sourcepath="">
            <classpath>
                <path path="${javac.classpath}"/>
            </classpath>
            <compilerarg value="${javac.compilerargs}"/>
        </javac>
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.classes.dir}" excludes="${build.classes.excludes}"/>
        </copy>
    </target>

    <!--
        This target is called by the compile target, and will ensure that the
        .fx files are compiled after the java ones. Hopefully a future version
        of the netbeans plugin (and thus the netbeans generated build scripts)
        will handle this automatically in the future
    -->
    <target name="-post-compile" if="have.sources" depends="init,deps-jar,-pre-pre-compile,-pre-compile">
        <javafxc debug="${javac.debug}" deprecation="${javac.deprecation}"
                 destdir="${build.classes.dir}" fork="true" memoryMaximumSize="384m"
                 encoding="${source.encoding}" excludes="${excludes}" includeantruntime="false"
                 includes="**/*.fx" source="${javac.source}" sourcepath=""
                 srcdir="${src.classes.dir}" target="${javac.target}"
                 classpath="${build.classes.dir}:${javac.classpath}"
                 compilerclasspath="${build.classes.dir}:${javac.classpath}">
            <compilerarg line="${javafxc.compilerargs}"/>
        </javafxc>
    </target>

    <!--
        This target is overridden to ensure that all of the test scripts are
        compiled after any test Java files are compiled. Since the Runtime
        project doesn't need to worry about tests for the compiler, it doesn't
        need the more complicated jtreg style test harness that the compiler
        project uses. Rather, we can simply use JUnit. And there was much
        rejoicing.
    -->
    <target name="-post-compile-test" if="have.sources" depends="init,compile,-pre-pre-compile-test,-pre-compile-test,-do-compile-test">
        <javafxc debug="${javac.debug}" deprecation="${javac.deprecation}"
                 destdir="${build.test.classes.dir}" fork="true" memoryMaximumSize="256m"
                 encoding="${source.encoding}" excludes="${excludes}" includeantruntime="false"
                 includes="**/*.fx" source="${javac.source}" sourcepath=""
                 srcdir="${test.src}" target="${javac.target}"
                 classpath="${build.classes.dir}:${javac.test.classpath}"
                 compilerclasspath="${build.classes.dir}:${javac.test.classpath}">
            <compilerarg line="${javafxc.compilerargs}"/>
        </javafxc>
    </target>

    <!--
        This target is overridden because the stock implementation provided by
        netbeans in build-impl.xml only looks for *Test.java files, not Test.class
        files. By targeting class files instead, we pick up all the fx scripts
        that are being used as test cases.
    -->
    <target depends="init,compile-test,-pre-test-run" if="have.tests" name="-do-test-run">
        <junit dir="${work.dir}" errorproperty="tests.failed" failureproperty="tests.failed" fork="true" showoutput="true">
            <batchtest todir="${build.test.results.dir}">
                <fileset dir="${build.test.classes.dir}" excludes="${excludes}" includes="${includes}">
                    <filename name="**/*Test.class"/>
                </fileset>
                <fileset dir="${test.unit.dir}" excludes="${excludes}" includes="${includes}">
                    <filename name="**/*Test.class"/>
                </fileset>
                <fileset dir="${test.regress.dir}" excludes="${excludes}" includes="${includes}">
                    <filename name="**/*Test.class"/>
                </fileset>
                <fileset dir="${test.visual.dir}" excludes="${excludes}" includes="${includes}">
                    <filename name="**/*Test.class"/>
                </fileset>
            </batchtest>
            <classpath>
                <path path="${run.test.classpath}"/>
            </classpath>
            <syspropertyset>
                <propertyref prefix="test-sys-prop."/>
                <mapper from="test-sys-prop.*" to="*" type="glob"/>
            </syspropertyset>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>
            <jvmarg line="${run.jvmargs}"/>
        </junit>
    </target>

    <!-- properties that control what gets included in the jar, set from outside -->
    <property name="javafxc.excludes" value=""/>
    <property name="jar.excludes" value=""/>
    <property name="swing-layout.excludes" value=""/>

    <target name="jar" description="Build JARs" depends="init,compile,-pre-pre-jar">
        <jar compress="${jar.compress}" destfile="${dist.jar}">
            <fileset dir="${build.classes.dir}" includes="${javafxrt.includes}"/>
            <zipfileset src="${file.reference.javafxc.jar}" includes="com/sun/javafx/**,javafx/**"
                        excludes="com/sun/javafx/api/**"/>
        </jar>
        <jar compress="${jar.compress}" destfile="${dist.gui.jar}">
            <fileset dir="${build.classes.dir}" includes="${javafxgui.includes}"/>
        </jar>
        <jar compress="${jar.compress}" destfile="${dist.ext.jar}">
            <fileset dir="${build.classes.dir}" includes="javafx/ext/**"/>
        </jar>
        <copy file="${file.reference.scenegraph.jar}" todir="${dist.jar.dir}"/>
        <copy file="${file.reference.jmc.jar}" todir="${dist.jar.dir}"/>
    </target>

</project>
