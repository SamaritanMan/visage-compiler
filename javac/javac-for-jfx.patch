Index: javax/tools/JavaFileObject.java
===================================================================
--- javax/tools/JavaFileObject.java	(revision 252)
+++ javax/tools/JavaFileObject.java	(working copy)
@@ -60,7 +60,14 @@
          * example, regular files ending with {@code .java}.
          */
         SOURCE(".java"),
-
+// Javafx change
+// Enable this to allow pulling sources for source completion.
+//        /**
+//         * Source files written in the JavaFX programming language.  For
+//         * example, regular files ending with {@code .fx}.
+//         */
+//        JFX_SOURCE(".fx"),
+// Javafx change
         /**
          * Class files for the Java Virtual Machine.  For example,
          * regular files ending with {@code .class}.
Index: com/sun/tools/javac/jvm/Items.java
===================================================================
--- com/sun/tools/javac/jvm/Items.java	(revision 252)
+++ com/sun/tools/javac/jvm/Items.java	(working copy)
@@ -185,7 +185,7 @@
 
     /** The base class of all items, which implements default behavior.
      */
-    abstract class Item {
+    public abstract class Item {
 	
         /** The type code of values represented by this item.
 	 */
@@ -197,7 +197,7 @@
 
 	/** Generate code to load this item onto stack.
 	 */
-	Item load() {
+	public Item load() {
 	    throw new AssertionError();
 	}
 
@@ -281,7 +281,7 @@
 	    super(typecode);
 	}
 
-	Item load() {
+	public Item load() {
 	    return this;
 	}
 
@@ -315,7 +315,7 @@
 	    super(Code.typecode(type));
 	}
 
-	Item load() {
+	public Item load() {
 	    code.emitop0(iaload + typecode);
 	    return stackItem[typecode];
 	}
@@ -358,7 +358,7 @@
 	    this.isSuper = isSuper;
 	}
 
-	Item load() {
+	public Item load() {
 	    code.emitop0(aload_0);
 	    return stackItem[typecode];
 	}
@@ -370,7 +370,7 @@
 
     /** An item representing a local variable.
      */
-    class LocalItem extends Item {
+    public class LocalItem extends Item {
 
 	/** The variable's register.
 	 */
@@ -387,7 +387,7 @@
 	    this.reg = reg;
 	}
 
-	Item load() {
+	public Item load() {
 	    if (reg <= 3)
 		code.emitop0(iload_0 + Code.truncate(typecode) * 4 + reg);
 	    else
@@ -438,7 +438,7 @@
 	    this.member = member;
 	}
 
-	Item load() {
+	public Item load() {
 	    code.emitop2(getstatic, pool.put(member));
 	    return stackItem[typecode];
 	}
@@ -479,7 +479,7 @@
 	    this.nonvirtual = nonvirtual;
 	}
 
-	Item load() {
+	public Item load() {
 	    code.emitop2(getfield, pool.put(member));
 	    return stackItem[typecode];
 	}
@@ -546,7 +546,7 @@
 	    }
 	}
 
-	Item load() {
+	public Item load() {
 	    switch (typecode) {
 	    case INTcode: case BYTEcode: case SHORTcode: case CHARcode:
 		int ival = ((Number)value).intValue();
@@ -666,7 +666,7 @@
 	    this.lhs = lhs;
 	}
 
-	Item load() {
+	public Item load() {
 	    lhs.stash(typecode);
 	    lhs.store();
 	    return stackItem[typecode];
@@ -724,7 +724,7 @@
 	    this.falseJumps = falsejumps;
 	}
 
-	Item load() {
+	public Item load() {
 	    Chain trueChain = null;
 	    Chain falseChain = jumpFalse();
 	    if (!isFalse()) {
Index: com/sun/tools/javac/jvm/Gen.java
===================================================================
--- com/sun/tools/javac/jvm/Gen.java	(revision 252)
+++ com/sun/tools/javac/jvm/Gen.java	(working copy)
@@ -172,7 +172,7 @@
 
     /** Code buffer, set by genMethod.
      */
-    private Code code;
+    protected Code code;
 
     /** Items structure, set by genMethod.
      */
@@ -657,7 +657,7 @@
 
     /** Visitor argument: The current environment.
      */
-    Env<GenContext> env;
+    protected Env<GenContext> env;
 
     /** Visitor argument: The expected type (prototype).
      */
@@ -665,7 +665,7 @@
 
     /** Visitor result: The item representing the computed value.
      */
-    Item result;
+    protected Item result;
 
     /** Visitor method: generate code for a definition, catching and reporting
      *  any completion failures.
@@ -2261,7 +2261,7 @@
     /** code generation contexts,
      *  to be used as type parameter for environments.
      */
-    static class GenContext {
+    public static class GenContext {
 
 	/** A chain for all unresolved jumps that exit the current environment.
 	 */
Index: com/sun/tools/javac/jvm/Code.java
===================================================================
--- com/sun/tools/javac/jvm/Code.java	(revision 252)
+++ com/sun/tools/javac/jvm/Code.java	(working copy)
@@ -153,7 +153,7 @@
      *  We need this to emit line numbers lazily, which we need to do
      *  because of jump-to-jump optimization.
      */
-    int pendingStatPos = Position.NOPOS;
+    public int pendingStatPos = Position.NOPOS;
 
     /** Set true when a stackMap is needed at the current PC. */
     boolean pendingStackMap = false;
Index: com/sun/tools/javac/comp/Infer.java
===================================================================
--- com/sun/tools/javac/comp/Infer.java	(revision 252)
+++ com/sun/tools/javac/comp/Infer.java	(working copy)
@@ -67,7 +67,7 @@
     public static class NoInstanceException extends RuntimeException {
 	private static final long serialVersionUID = 0;
 
-	boolean isAmbiguous; // exist several incomparable best instances?
+	public boolean isAmbiguous; // exist several incomparable best instances?
 
 	JCDiagnostic diagnostic;
 
Index: com/sun/tools/javac/comp/MemberEnter.java
===================================================================
--- com/sun/tools/javac/comp/MemberEnter.java	(revision 252)
+++ com/sun/tools/javac/comp/MemberEnter.java	(working copy)
@@ -126,7 +126,8 @@
      *  @param toScope   The (import) scope in which imported classes
      *               are entered.
      */
-    private void importAll(int pos,
+// JavaFX change
+    protected void importAll(int pos,
                            final TypeSymbol tsym,
                            Env<AttrContext> env) {
         // Check that packages imported from exist (JLS ???).
@@ -393,7 +394,10 @@
     /** Enter field and method definitions and process import
      *  clauses, catching any completion failure exceptions.
      */
-    protected void memberEnter(JCTree tree, Env<AttrContext> env) {
+// JavaFX change
+    public
+// JavaFX change
+    /*protected*/ void memberEnter(JCTree tree, Env<AttrContext> env) {
         Env<AttrContext> prevEnv = this.env;
         try {
             this.env = env;
@@ -414,6 +418,9 @@
 
     /** Enter members for a class.
      */
+// Javafx change
+    protected
+// Javafx change
     void finishClass(JCClassDecl tree, Env<AttrContext> env) {
         if ((tree.mods.flags & Flags.ENUM) != 0 &&
             (types.supertype(tree.sym.type).tsym.flags() & Flags.ENUM) == 0) {
@@ -643,6 +650,9 @@
      *  @param tree     The variable definition.
      *  @param env      The environment current outside of the variable definition.
      */
+// JavaFX change
+    public
+// JavaFX change
     Env<AttrContext> initEnv(JCVariableDecl tree, Env<AttrContext> env) {
         Env<AttrContext> localEnv = env.dupto(new AttrContextEnv(tree, env.info.dup()));
         if (tree.sym.owner.kind == TYP) {
@@ -768,6 +778,9 @@
         s.attributes_field = buf.toList();
     }
 
+// Javafx change
+    protected
+// Javafx change
     /** Queue processing of an attribute default value. */
     void annotateDefaultValueLater(final JCExpression defaultValue,
                                    final Env<AttrContext> localEnv,
Index: com/sun/tools/javac/comp/Attr.java
===================================================================
--- com/sun/tools/javac/comp/Attr.java	(revision 252)
+++ com/sun/tools/javac/comp/Attr.java	(working copy)
@@ -68,17 +68,47 @@
     protected static final Context.Key<Attr> attrKey =
         new Context.Key<Attr>();
 
+// JavaFX change
+    protected
+// JavaFX change
     final Name.Table names;
+// JavaFX change
+    public
+// JavaFX change
     final Log log;
+// JavaFX change
+    public
+// JavaFX change
     final Symtab syms;
+// Javafx change
+    protected
+// Javafx change
     final Resolve rs;
+// JavaFX change
+    protected
+// JavaFX change
     final Check chk;
+// JavaFX change
+    protected
+// JavaFX change
     final MemberEnter memberEnter;
+// JavaFX change
+    protected
+// JavaFX change
     final TreeMaker make;
+// Javafx change
+    protected
+// Javafx change
     final ConstFold cfolder;
     final Enter enter;
     final Target target;
+// Javafx change
+    protected
+// Javafx change
     final Types types;
+// JavaFX change
+    protected
+// JavaFX change
     final Annotate annotate;
 
     public static Attr instance(Context context) {
@@ -166,6 +196,9 @@
      *  @param pkind    The expected kind (or: protokind) of the tree
      *  @param pt       The expected type (or: prototype) of the tree
      */
+// JavaFX change
+    protected
+// JavaFX change
     Type check(JCTree tree, Type owntype, int ownkind, int pkind, Type pt) {
         if (owntype.tag != ERROR && pt.tag != METHOD && pt.tag != FORALL) {
             if ((ownkind & ~pkind) == 0) {
@@ -339,18 +372,30 @@
 
     /** Visitor argument: the current environment.
      */
+// JavaFX change
+    public
+// JavaFX change
     Env<AttrContext> env;
 
     /** Visitor argument: the currently expected proto-kind.
      */
+// JavaFX change
+    protected
+// JavaFX change
     int pkind;
 
     /** Visitor argument: the currently expected proto-type.
      */
+// JavaFX change
+    protected
+// JavaFX change
     Type pt;
 
     /** Visitor result: the computed type.
      */
+// JavaFX change
+    protected
+// JavaFX change
     Type result;
 
     /** Visitor method: attribute a tree, catching any completion failure
@@ -361,6 +406,9 @@
      *  @param pkind   The protokind visitor argument.
      *  @param pt      The prototype visitor argument.
      */
+// JavaFX change
+    protected
+// JavaFX change
     Type attribTree(JCTree tree, Env<AttrContext> env, int pkind, Type pt) {
         Env<AttrContext> prevEnv = this.env;
         int prevPkind = this.pkind;
@@ -392,12 +440,18 @@
     /** Derived visitor method: attribute an expression tree with
      *  no constraints on the computed type.
      */
+// Javafx change
+    protected
+// Javafx change
     Type attribExpr(JCTree tree, Env<AttrContext> env) {
         return attribTree(tree, env, VAL, Type.noType);
     }
 
     /** Derived visitor method: attribute a type tree.
      */
+// JavaFX change
+    public
+// JavaFX change
     Type attribType(JCTree tree, Env<AttrContext> env) {
         Type result = attribTree(tree, env, TYP, Type.noType);
         return result;
@@ -427,6 +481,9 @@
 
     /** Attribute the arguments in a method call, returning a list of types.
      */
+// JavaFX change
+    protected
+// JavaFX change
     List<Type> attribArgs(List<JCExpression> trees, Env<AttrContext> env) {
         ListBuffer<Type> argtypes = new ListBuffer<Type>();
         for (List<JCExpression> l = trees; l.nonEmpty(); l = l.tail)
@@ -435,6 +492,9 @@
         return argtypes.toList();
     }
 
+// Javafx change
+    protected
+// Javafx change
     /** Attribute a type argument list, returning a list of types.
      */
     List<Type> attribTypes(List<JCExpression> trees, Env<AttrContext> env) {
@@ -470,6 +530,9 @@
         attribStats(typarams, env);
     }
 
+// Javafx change
+    public
+// Javafx change
     void attribBounds(List<JCTypeParameter> typarams) {
         for (JCTypeParameter typaram : typarams) {
             Type bound = typaram.type.getUpperBound();
@@ -1326,6 +1389,9 @@
          *  @param tree   The application node
          *  @param env    The environment current at the application.
          */
+// Javafx change
+    protected
+// Javafx change
         boolean checkFirstConstructorStat(JCMethodInvocation tree, Env<AttrContext> env) {
             JCMethodDecl enclMethod = env.enclMethod;
             if (enclMethod != null && enclMethod.name == names.init) {
@@ -1341,6 +1407,9 @@
 
         /** Obtain a method type with given argument types.
          */
+// Javafx change
+    protected
+// Javafx change
         Type newMethTemplate(List<Type> argtypes, List<Type> typeargtypes) {
             MethodType mt = new MethodType(argtypes, null, null, syms.methodClass);
             return (typeargtypes == null) ? mt : (Type)new ForAll(typeargtypes, mt);
@@ -2029,6 +2098,9 @@
             }
         }
 
+// Javafx change
+        protected
+// Javafx change
         /** Determine type of identifier or select expression and check that
          *  (1) the referenced symbol is not deprecated
          *  (2) the symbol's type is safe (@see checkSafe)
@@ -2679,7 +2751,10 @@
     }
 
     /** Finish the attribution of a class. */
-    private void attribClassBody(Env<AttrContext> env, ClassSymbol c) {
+// Javafx change
+    public
+// Javafx change
+    void attribClassBody(Env<AttrContext> env, ClassSymbol c) {
         JCClassDecl tree = (JCClassDecl)env.tree;
         assert c == tree.sym;
 
@@ -2804,7 +2879,10 @@
                 log.warning(TreeInfo.diagnosticPositionFor(svuid, tree), "constant.SVUID", c);
         }
 
-    private Type capture(Type type) {
+// JavaFX change
+    protected
+// JavaFX change
+    /*private*/ Type capture(Type type) {
         return types.capture(type);
     }
 }
Index: com/sun/tools/javac/comp/Enter.java
===================================================================
--- com/sun/tools/javac/comp/Enter.java	(revision 252)
+++ com/sun/tools/javac/comp/Enter.java	(working copy)
@@ -95,10 +95,22 @@
 
     Log log;
     Symtab syms;
+// JavaFX change
+    protected
+// JavaFX change
     Check chk;
+// JavaFX change
+    protected
+// JavaFX change
     TreeMaker make;
+// JavaFX change
+    protected
+// JavaFX change
     ClassReader reader;
     Annotate annotate;
+// JavaFX change
+    protected
+// JavaFX change
     MemberEnter memberEnter;
     Lint lint;
     JavaFileManager fileManager;
@@ -135,7 +147,10 @@
     /** A hashtable mapping classes and packages to the environments current
      *  at the points of their definitions.
      */
-    Map<TypeSymbol,Env<AttrContext>> typeEnvs =
+// JavaFX change
+    protected
+// JavaFX change
+Map<TypeSymbol,Env<AttrContext>> typeEnvs =
 	    new HashMap<TypeSymbol,Env<AttrContext>>();
 
     /** Accessor for typeEnvs
@@ -156,6 +171,9 @@
     /** The queue of all classes that might still need to be completed;
      *	saved and initialized by main().
      */
+// JavaFX change
+    protected
+// JavaFX change
     ListBuffer<ClassSymbol> uncompleted;
 
     /** A dummy class to serve as enclClass for toplevel environments.
@@ -219,6 +237,9 @@
      *	where the local scope is for type variables, and the this and super symbol
      *	only, and members go into the class member scope.
      */
+// JavaFX change
+    public
+// JavaFX change
     Scope enterScope(Env<AttrContext> env) {
 	return (env.tree.getTag() == JCTree.CLASSDEF)
 	    ? ((JCClassDecl) env.tree).sym.members_field
@@ -235,6 +256,9 @@
 
     /** Visitor result: the computed type.
      */
+// JavaFX change
+    protected
+// JavaFX change
     Type result;
 
     /** Visitor method: enter all classes in given tree, catching any
@@ -258,6 +282,9 @@
 
     /** Visitor method: enter classes of a list of trees, returning a list of types.
      */
+// JavaFX change
+    protected
+// JavaFX change
     <T extends JCTree> List<Type> classEnter(List<T> trees, Env<AttrContext> env) {
 	ListBuffer<Type> ts = new ListBuffer<Type>();
 	for (List<T> l = trees; l.nonEmpty(); l = l.tail)
@@ -404,7 +431,7 @@
     //where
 	/** Does class have the same name as the file it appears in?
 	 */
-	private static boolean classNameMatchesFileName(ClassSymbol c,
+	protected static boolean classNameMatchesFileName(ClassSymbol c,
 							Env<AttrContext> env) {
 	    return env.toplevel.sourcefile.isNameCompatible(c.name.toString(),
 							    JavaFileObject.Kind.SOURCE);
Index: com/sun/tools/javac/comp/Check.java
===================================================================
--- com/sun/tools/javac/comp/Check.java	(revision 252)
+++ com/sun/tools/javac/comp/Check.java	(working copy)
@@ -56,13 +56,19 @@
     protected static final Context.Key<Check> checkKey =
 	new Context.Key<Check>();
 
-    private final Name.Table names;
+// JavaFX change
+    public
+// JavaFX change
+    /*private*/ final Name.Table names;
     private final Log log;
     private final Symtab syms;
     private final Infer infer;
     private final Target target;
     private final Source source;
-    private final Types types;
+// JavaFX change
+    public
+// JavaFX change
+    /*private*/ final Types types;
     private final boolean skipAnnotations;
     private final TreeInfo treeinfo;
 
@@ -217,6 +223,9 @@
 
     /** Report duplicate declaration error.
      */
+// JavaFX change
+    protected
+// JavaFX change
     void duplicateError(DiagnosticPosition pos, Symbol sym) {
 	if (!sym.type.isErroneous()) {
 	    log.error(pos, "already.defined", sym, sym.location());
@@ -241,6 +250,9 @@
      *	@param v	     The symbol.
      *	@param s	     The scope.
      */
+// JavaFX change
+    public
+// JavaFX change
     void checkTransparentVar(DiagnosticPosition pos, VarSymbol v, Scope s) {
 	if (s.next != null) {
 	    for (Scope.Entry e = s.next.lookup(v.name);
@@ -262,6 +274,9 @@
      *	@param c	     The symbol.
      *	@param s	     The scope.
      */
+// JavaFX change
+    public
+// JavaFX change
     void checkTransparentClass(DiagnosticPosition pos, ClassSymbol c, Scope s) {
 	if (s.next != null) {
 	    for (Scope.Entry e = s.next.lookup(c.name);
@@ -284,6 +299,9 @@
      *	@param name	     The class name.
      *	@param s	     The enclosing scope.
      */
+// JavaFX change
+    public
+// JavaFX change
     boolean checkUniqueClassName(DiagnosticPosition pos, Name name, Scope s) {
 	for (Scope.Entry e = s.lookup(name); e.scope == s; e = e.next()) {
 	    if (e.sym.kind == TYP && e.sym.name != names.error) {
@@ -310,6 +328,9 @@
      *    enclClass is the flat name of the enclosing class,
      *    classname is the simple name of the local class
      */
+// JavaFX change
+    public
+// JavaFX change
     Name localClassName(ClassSymbol c) {
 	for (int i=1; ; i++) {
 	    Name flatname = names.
@@ -330,6 +351,9 @@
      *  @param found      The type that was found.
      *  @param req        The type that was required.
      */
+// JavaFX change
+    public
+// JavaFX change
     Type checkType(DiagnosticPosition pos, Type found, Type req) {
 	if (req.tag == ERROR)
 	    return req;
@@ -471,6 +495,9 @@
      *  @param t             The type to be checked.
      *  @param noBounds    True if type bounds are illegal here.
      */
+// JavaFX change
+    public
+// JavaFX change
     Type checkClassType(DiagnosticPosition pos, Type t, boolean noBounds) {
 	t = checkClassType(pos, t);
 	if (noBounds && t.isParameterized()) {
@@ -570,6 +597,9 @@
      *  @param flags         The set of modifiers given in a definition.
      *  @param sym           The defined symbol.
      */
+// JavaFX change
+    public
+// JavaFX change
     long checkFlags(DiagnosticPosition pos, long flags, Symbol sym, JCTree tree) {
 	long mask;
 	long implicit = 0;
@@ -750,6 +780,9 @@
 
     /** Visitor method: Validate a list of type expressions.
      */
+// JavaFX change
+    public
+// JavaFX change
     void validate(List<? extends JCTree> trees) {
 	for (List<? extends JCTree> l = trees; l.nonEmpty(); l = l.tail)
 	    validate(l.head);
@@ -1077,6 +1110,9 @@
      *  @param origin       The class of which the overriding method
      *			    is a member.
      */
+// Javafx modification
+public
+// Javafx modification
     void checkOverride(JCTree tree,
 		       MethodSymbol m,
 		       MethodSymbol other,
@@ -1654,6 +1690,9 @@
      *  enum, an annotation, Class, Class<?>, Class<? extends
      *  Anything>, arrays of the preceding.
      */
+// Javafx modification
+public
+// Javafx modification
     void validateAnnotationType(JCTree restype) {
         // restype may be null if an error occurred, so don't bother validating it
         if (restype != null) {
@@ -1829,6 +1868,9 @@
 	}
     }
 
+// JavaFX change
+    public
+// JavaFX change
     void checkDeprecatedAnnotation(DiagnosticPosition pos, Symbol s) {
 	if (allowAnnotations &&
 	    lint.isEnabled(Lint.LintCategory.DEP_ANN) &&
@@ -1972,6 +2014,9 @@
     }
 
 
+// Javafx change
+    public
+// Javafx change
     /**
      *  Check for division by integer constant zero
      *	@param pos	     Position for error reporting.
Index: com/sun/tools/javac/comp/Resolve.java
===================================================================
--- com/sun/tools/javac/comp/Resolve.java	(revision 252)
+++ com/sun/tools/javac/comp/Resolve.java	(working copy)
@@ -114,6 +114,9 @@
     /** An environment is "static" if its static level is greater than
      *  the one of its outer environment
      */
+// JavaFX change
+    public
+// JavaFX change
     static boolean isStatic(Env<AttrContext> env) {
         return env.info.staticLevel > env.outer.info.staticLevel;
     }
@@ -701,6 +704,9 @@
      *  @param allowBoxing Allow boxing conversions of arguments.
      *  @param useVarargs Box trailing arguments into an array for varargs.
      */
+// Javafx change
+    public
+// Javafx change
     Symbol findMethod(Env<AttrContext> env,
                       Type site,
                       Name name,
@@ -1100,6 +1106,9 @@
 
     /** Same as above, but without type arguments and arguments.
      */
+// Javafx change
+    public
+// Javafx change
     Symbol access(Symbol sym,
                   DiagnosticPosition pos,
                   Type site,
@@ -1285,6 +1294,7 @@
      *  @param allowBoxing Allow boxing and varargs conversions.
      *  @param useVarargs Box trailing arguments into an array for varargs.
      */
+    public // Javafx change
     Symbol resolveConstructor(DiagnosticPosition pos, Env<AttrContext> env,
                               Type site, List<Type> argtypes,
                               List<Type> typeargtypes,
@@ -1369,6 +1379,7 @@
      * @param c             The qualifier.
      * @param name          The identifier's name.
      */
+    public // Javafx change
     Symbol resolveSelf(DiagnosticPosition pos,
                        Env<AttrContext> env,
                        TypeSymbol c,
@@ -1443,6 +1454,7 @@
 
     /** A localized string describing a given kind.
      */
+    public // Javafx change
     static JCDiagnostic kindName(int kind) {
         switch (kind) {
         case PCK: return JCDiagnostic.fragment("kindname.package");
@@ -1494,6 +1506,7 @@
 
     /** A localized string describing a given set of kinds.
      */
+    public // Javafx change
     static JCDiagnostic kindNames(int kind) {
         StringBuffer key = new StringBuffer();
         key.append("kindname");
Index: com/sun/tools/javac/comp/AttrContext.java
===================================================================
--- com/sun/tools/javac/comp/AttrContext.java	(revision 252)
+++ com/sun/tools/javac/comp/AttrContext.java	(working copy)
@@ -40,20 +40,35 @@
 
     /** The scope of local symbols.
      */
+// JavaFX change
+    public
+// JavaFX change
     Scope scope = null;
 
     /** The number of enclosing `static' modifiers.
      */
+// JavaFX change
+    public
+// JavaFX change
     int staticLevel = 0;
 
+// Javafx change
+    public
+// Javafx change
     /** Is this an environment for a this(...) or super(...) call?
      */
     boolean isSelfCall = false;
 
+// Javafx change
+    public
+// Javafx change
     /** Are we evaluating the selector of a `super' or type name?
      */
     boolean selectSuper = false;
 
+// Javafx change
+    public
+// Javafx change
     /** Are arguments to current function applications boxed into an array for varargs?
      */
     boolean varArgs = false;
@@ -64,10 +79,16 @@
 
     /** A record of the lint/SuppressWarnings currently in effect
      */
+// JavaFX change
+    public
+// JavaFX change
     Lint lint;
 
     /** Duplicate this context, replacing scope field and copying all others.
      */
+// JavaFX change
+    public
+// JavaFX change
     AttrContext dup(Scope scope) {
 	AttrContext info = new AttrContext();
 	info.scope = scope;
@@ -82,6 +103,9 @@
 
     /** Duplicate this context, copying all fields.
      */
+// JavaFX change
+    public
+// JavaFX change
     AttrContext dup() {
 	return dup(scope);
     }
Index: com/sun/tools/javac/comp/ConstFold.java
===================================================================
--- com/sun/tools/javac/comp/ConstFold.java	(revision 252)
+++ com/sun/tools/javac/comp/ConstFold.java	(working copy)
@@ -42,6 +42,9 @@
  *  This code and its internal interfaces are subject to change or
  *  deletion without notice.</b>
  */
+// Javafx change
+   public
+// Javafx change
 strictfp class ConstFold {
     protected static final Context.Key<ConstFold> constFoldKey =
 	new Context.Key<ConstFold>();
@@ -153,6 +156,9 @@
      *  @param left      The type of the operation's left operand.
      *  @param right     The type of the operation's right operand.
      */
+// Javafx change
+    public
+// Javafx change
     Type fold2(int opcode, Type left, Type right) {
 	try {
 	    if (opcode > ByteCodes.preMask) {
@@ -324,6 +330,9 @@
 	}
     }
 
+// Javafx change
+    public
+// Javafx change
     /** Coerce constant type to target type.
      *  @param etype      The source type of the coercion,
      *                    which is assumed to be a constant type compatble with
Index: com/sun/tools/javac/tree/TreeMaker.java
===================================================================
--- com/sun/tools/javac/tree/TreeMaker.java	(revision 252)
+++ com/sun/tools/javac/tree/TreeMaker.java	(working copy)
@@ -67,12 +67,12 @@
     public JCCompilationUnit toplevel;
 
     /** The current name table. */
-    Name.Table names;
+    protected Name.Table names;
 
-    Types types;
+    protected Types types;
 
     /** The current symbol table. */
-    Symtab syms;
+    protected Symtab syms;
 
     /** Create a tree maker with null toplevel and NOPOS as initial position.
      */
@@ -87,7 +87,7 @@
 
     /** Create a tree maker with a given toplevel and FIRSTPOS as initial position.
      */
-    TreeMaker(JCCompilationUnit toplevel, Name.Table names, Types types, Symtab syms) {
+    protected TreeMaker(JCCompilationUnit toplevel, Name.Table names, Types types, Symtab syms) {
         this.pos = Position.FIRSTPOS;
         this.toplevel = toplevel;
         this.names = names;
Index: com/sun/tools/javac/tree/Pretty.java
===================================================================
--- com/sun/tools/javac/tree/Pretty.java	(revision 252)
+++ com/sun/tools/javac/tree/Pretty.java	(working copy)
@@ -56,7 +56,7 @@
      *  the output even though that detail would not be valid java
      *  soruce.
      */
-    private final boolean sourceOutput;
+    protected final boolean sourceOutput;
 
     /** The output stream on which trees are printed.
      */
@@ -72,7 +72,7 @@
 
     /** The enclosing class name.
      */
-    Name enclClassName;
+    protected Name enclClassName;
 
     /** A hashtable mapping trees to their documentation comments
      *  (can be null)
@@ -81,19 +81,19 @@
 
     /** Align code to be indented to left margin.
      */
-    void align() throws IOException {
+    public void align() throws IOException {
         for (int i = 0; i < lmargin; i++) out.write(" ");
     }
 
     /** Increase left margin by indentation width.
      */
-    void indent() {
+    public void indent() {
         lmargin = lmargin + width;
     }
 
     /** Decrease left margin by indentation width.
      */
-    void undent() {
+    public void undent() {
         lmargin = lmargin - width;
     }
 
@@ -134,16 +134,16 @@
      *************************************************************************/
 
     /** Exception to propogate IOException through visitXXX methods */
-    private static class UncheckedIOException extends Error {
+    protected static class UncheckedIOException extends Error {
 	static final long serialVersionUID = -4032692679158424751L;
-        UncheckedIOException(IOException e) {
+        public UncheckedIOException(IOException e) {
             super(e.getMessage(), e);
         }
     }
 
     /** Visitor argument: the current precedence level.
      */
-    int prec;
+    protected int prec;
 
     /** Visitor method: print expression tree.
      *  @param prec  The current precedence level.
@@ -1094,7 +1094,7 @@
                     print("void");
                     break;
                 default:
-                    print("error");
+                    print("error(type for "+tree.getClass()+")");
                     break;
             }
         } catch (IOException e) {
Index: com/sun/tools/javac/tree/TreeTranslator.java
===================================================================
--- com/sun/tools/javac/tree/TreeTranslator.java	(revision 252)
+++ com/sun/tools/javac/tree/TreeTranslator.java	(working copy)
@@ -46,7 +46,10 @@
 
     /** Visitor result field: a tree
      */
-    protected JCTree result;
+// JavaFX change
+    public
+// JavaFX change
+    JCTree result;
 
     /** Visitor method: Translate a single node.
      */
Index: com/sun/tools/javac/tree/TreeInfo.java
===================================================================
--- com/sun/tools/javac/tree/TreeInfo.java	(revision 252)
+++ com/sun/tools/javac/tree/TreeInfo.java	(working copy)
@@ -57,9 +57,13 @@
 
     /** The names of all operators.
      */
-    private Name[] opname = new Name[JCTree.MOD - JCTree.POS + 1];
+// JavaFX change
+    protected
+    /*private*/ Name[] opname = new Name[JCTree.MOD - JCTree.POS + 1];
 
-    private TreeInfo(Context context) {
+// JavaFX change
+    protected
+    /*private*/ TreeInfo(Context context) {
 	context.put(treeInfoKey, this);
 
 	Name.Table names = Name.Table.instance(context);
Index: com/sun/tools/javac/code/Symtab.java
===================================================================
--- com/sun/tools/javac/code/Symtab.java	(revision 252)
+++ com/sun/tools/javac/code/Symtab.java	(working copy)
@@ -201,7 +201,7 @@
      *  @param name   The constant's name.
      *  @param type   The constant's type.
      */
-    private VarSymbol enterConstant(String name, Type type) {
+    protected VarSymbol enterConstant(String name, Type type) {
         VarSymbol c = new VarSymbol(
 	    PUBLIC | STATIC | FINAL,
 	    names.fromString(name),
@@ -219,7 +219,7 @@
      *  @param res      The operation's result type.
      *  @param opcode   The operation's bytecode instruction.
      */
-    private void enterBinop(String name,
+    protected void enterBinop(String name,
 			    Type left, Type right, Type res,
 			    int opcode) {
         predefClass.members().enter(
@@ -236,7 +236,7 @@
      *  @param opcode1     First opcode.
      *  @param opcode2     Second opcode.
      */
-    private void enterBinop(String name,
+    protected void enterBinop(String name,
 			    Type left, Type right, Type res,
 			    int opcode1, int opcode2) {
 	enterBinop(
@@ -249,7 +249,7 @@
      *  @param res      The operation's result type.
      *  @param opcode   The operation's bytecode instruction.
      */
-    private OperatorSymbol enterUnop(String name,
+    protected OperatorSymbol enterUnop(String name,
 				     Type arg,
 				     Type res,
 				     int opcode) {
@@ -268,7 +268,7 @@
     /** Enter a class into symbol table.
      *  @param    The name of the class.
      */
-    private Type enterClass(String s) {
+    protected Type enterClass(String s) {
 	return reader.enterClass(names.fromString(s)).type;
     }
 
@@ -419,7 +419,11 @@
 			   List.<Type>nil(), methodClass),
 	    arrayClass);
 	arrayClass.members().enter(arrayCloneMethod);
+        
+	nullcheck = enterUnop("<*nullchk*>", objectType, objectType, nullchk);
+    }
 
+    public void enterOperators() {
 	// Enter operators.
         enterUnop("+", doubleType, doubleType, nop);
         enterUnop("+", floatType, floatType, nop);
@@ -451,7 +455,6 @@
         enterUnop("--", byteType, byteType, isub);
 
         enterUnop("!", booleanType, booleanType, bool_not);
-	nullcheck = enterUnop("<*nullchk*>", objectType, objectType, nullchk);
 
 	// string concatenation
         enterBinop("+", stringType, objectType, stringType, string_add);
Index: com/sun/tools/javac/util/BaseFileObject.java
===================================================================
--- com/sun/tools/javac/util/BaseFileObject.java	(revision 252)
+++ com/sun/tools/javac/util/BaseFileObject.java	(working copy)
@@ -43,6 +43,11 @@
             return CLASS;
         else if (n.endsWith(SOURCE.extension))
             return SOURCE;
+// Javafx change
+// Enable this to allow pulling sources for source completion.
+//        else if (n.endsWith(JFX_SOURCE.extension))
+//            return SOURCE;
+// Javafx change end
         else if (n.endsWith(HTML.extension))
             return HTML;
         else
